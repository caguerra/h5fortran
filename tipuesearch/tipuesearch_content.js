var tipuesearch = {"pages":[{"title":" Object-oriented Fortran 2018 HDF5 interface ","text":"Object-oriented Fortran 2018 HDF5 interface Developer Info Michael Hirsch, Ph.D. SciVision, Inc.","tags":"home","loc":"index.html"},{"title":"hdf5_interface.f90 – Object-oriented Fortran 2018 HDF5 interface","text":"This file depends on sourcefile~~hdf5_interface.f90~~EfferentGraph sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~hdf5_interface.f90~~AfferentGraph sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~read.f90 read.f90 sourcefile~read.f90->sourcefile~hdf5_interface.f90 sourcefile~write.f90 write.f90 sourcefile~write.f90->sourcefile~hdf5_interface.f90 sourcefile~writer.f90 writer.f90 sourcefile~writer.f90->sourcefile~write.f90 sourcefile~reader.f90 reader.f90 sourcefile~reader.f90->sourcefile~read.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules hdf5_interface Source Code hdf5_interface.f90 Source Code module hdf5_interface !! HDF5 object-oriented polymorphic interface use , intrinsic :: iso_fortran_env , only : real32 , real64 , int32 , int64 , stderr => error_unit use H5LT , only : HID_T , SIZE_T , HSIZE_T , H5F_ACC_RDONLY_F , H5F_ACC_RDWR_F , H5F_ACC_TRUNC_F , & h5open_f , h5close_f , h5gcreate_f , h5gclose_f , h5fopen_f , h5fcreate_f , h5fclose_f , h5lexists_f use string_utils , only : toLower , strip_trailing_null , truncate_string_null implicit none !> main type type :: hdf5_file character (:), allocatable :: filename integer ( HID_T ) :: lid , & !< location identifier gid , & !< group identifier glid , & !< group location identifier sid , did , pid integer :: comp_lvl = 0 !< compression level (1-9)  0: disable compression integer ( HSIZE_T ) :: chunk_size ( 7 ) = [ 64 , 64 , 1 , 1 , 1 , 1 , 1 ] !< chunk size per dimension (arbitrary) logical :: verbose = . false . contains !> initialize HDF5 file procedure , public :: initialize => hdf_initialize , finalize => hdf_finalize , writeattr , & open => hdf_open_group , close => hdf_close_group , shape => hdf_get_shape !> write group or dataset integer/real generic , public :: write => hdf_write_scalar , hdf_write_1d , hdf_write_2d , hdf_write_3d , & hdf_write_4d , hdf_write_5d , hdf_write_6d , hdf_write_7d , hdf_write_group !> read dataset integer/real generic , public :: read => & hdf_read_scalar , hdf_read_1d , hdf_read_2d , hdf_read_3d , & hdf_read_4d , hdf_read_5d , hdf_read_6d , hdf_read_7d !> private methods procedure , public :: hdf_write_group , & hdf_write_scalar , hdf_write_1d , hdf_write_2d , hdf_write_3d , & hdf_write_4d , hdf_write_5d , hdf_write_6d , hdf_write_7d , & hdf_read_scalar , hdf_read_1d , hdf_read_2d , hdf_read_3d , & hdf_read_4d , hdf_read_5d , hdf_read_6d , hdf_read_7d end type hdf5_file !> Submodules interface module subroutine hdf_setup_read ( self , dname , dims , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( HSIZE_T ), intent ( out ) :: dims (:) integer , intent ( out ) :: ierr end subroutine hdf_setup_read module subroutine hdf_setup_write ( self , dname , dtype , dims , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname integer ( HID_T ), intent ( in ) :: dtype integer ( HSIZE_T ), intent ( in ) :: dims (:) integer , intent ( in ), optional :: chunk_size (:) integer , intent ( out ) :: ierr end subroutine hdf_setup_write module subroutine hdf_wrapup ( self , ierr ) class ( hdf5_file ), intent ( in ) :: self integer , intent ( out ) :: ierr end subroutine hdf_wrapup module subroutine hdf_set_deflate ( self , dims , ierr ) class ( hdf5_file ), intent ( inout ) :: self integer ( HSIZE_T ), intent ( in ) :: dims (:) integer , intent ( out ) :: ierr end subroutine hdf_set_deflate module subroutine hdf_write_scalar ( self , dname , value , ierr ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value integer , intent ( out ) :: ierr end subroutine hdf_write_scalar module subroutine hdf_write_1d ( self , dname , value , ierr ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:) integer , intent ( out ) :: ierr end subroutine hdf_write_1d module subroutine hdf_write_2d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:) integer , intent ( in ), optional :: chunk_size (:) integer , intent ( out ) :: ierr end subroutine hdf_write_2d module subroutine hdf_write_3d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:,:) integer , intent ( in ), optional :: chunk_size (:) integer , intent ( out ) :: ierr end subroutine hdf_write_3d module subroutine hdf_write_4d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) integer , intent ( out ) :: ierr end subroutine hdf_write_4d module subroutine hdf_write_5d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) integer , intent ( out ) :: ierr end subroutine hdf_write_5d module subroutine hdf_write_6d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) integer , intent ( out ) :: ierr end subroutine hdf_write_6d module subroutine hdf_write_7d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:,:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) integer , intent ( out ) :: ierr end subroutine hdf_write_7d module subroutine hdf_get_shape ( self , dname , dims , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( HSIZE_T ), intent ( out ), allocatable :: dims (:) integer , intent ( out ) :: ierr end subroutine hdf_get_shape module subroutine hdf_read_scalar ( self , dname , value , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( inout ) :: value integer , intent ( out ) :: ierr end subroutine hdf_read_scalar module subroutine hdf_read_1d ( self , dname , value , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:) integer , intent ( out ) :: ierr end subroutine hdf_read_1d module subroutine hdf_read_2d ( self , dname , value , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:) integer , intent ( out ) :: ierr end subroutine hdf_read_2d module subroutine hdf_read_3d ( self , dname , value , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:,:) integer , intent ( out ) :: ierr end subroutine hdf_read_3d module subroutine hdf_read_4d ( self , dname , value , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:,:,:) integer , intent ( out ) :: ierr end subroutine hdf_read_4d module subroutine hdf_read_5d ( self , dname , value , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:,:,:,:) integer , intent ( out ) :: ierr end subroutine hdf_read_5d module subroutine hdf_read_6d ( self , dname , value , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:,:,:,:,:) integer , intent ( out ) :: ierr end subroutine hdf_read_6d module subroutine hdf_read_7d ( self , dname , value , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:,:,:,:,:,:) integer , intent ( out ) :: ierr end subroutine hdf_read_7d module subroutine hdf_open_group ( self , gname , ierr ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: gname integer , intent ( out ) :: ierr end subroutine hdf_open_group module subroutine hdf_close_group ( self , ierr ) class ( hdf5_file ), intent ( inout ) :: self integer , intent ( out ) :: ierr end subroutine hdf_close_group module subroutine writeattr ( self , dname , attr , attrval , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname , attr , attrval integer , intent ( out ) :: ierr end subroutine writeattr end interface integer , parameter :: ENOENT = 2 , EIO = 5 private public :: hdf5_file , toLower , hsize_t , strip_trailing_null , truncate_string_null contains subroutine hdf_initialize ( self , filename , ierr , status , action , comp_lvl ) !! Opens hdf5 file class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: filename integer , intent ( out ) :: ierr character ( * ), intent ( in ), optional :: status character ( * ), intent ( in ), optional :: action integer , intent ( in ), optional :: comp_lvl character (:), allocatable :: lstatus , laction logical :: exists self % pid = 0 self % sid = 0 !! arbitrary sentinel values, telling us it hasn't been used by HDF5 self % filename = filename if ( present ( comp_lvl )) self % comp_lvl = comp_lvl !> Initialize FORTRAN interface. call h5open_f ( ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: HDF5 library initialize' return endif lstatus = 'old' if ( present ( status )) lstatus = toLower ( status ) laction = 'rw' if ( present ( action )) laction = toLower ( action ) select case ( lstatus ) case ( 'old' , 'unknown' ) select case ( laction ) case ( 'read' , 'r' ) !< Open an existing file. inquire ( file = filename , exist = exists ) if (. not . exists ) then write ( stderr , * ) 'ERROR: ' // filename // ' does not exist.' ierr = ENOENT return endif call h5fopen_f ( filename , H5F_ACC_RDONLY_F , self % lid , ierr ) case ( 'write' , 'readwrite' , 'w' , 'rw' , 'r+' , 'append' , 'a' ) call h5fopen_f ( filename , H5F_ACC_RDWR_F , self % lid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // filename // ' could not be opened' ierr = EIO return endif case default write ( stderr , * ) 'Unsupported action -> ' // laction ierr = 128 return endselect case ( 'new' , 'replace' ) call h5fcreate_f ( filename , H5F_ACC_TRUNC_F , self % lid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // filename // ' could not be created' ierr = EIO return endif case default write ( stderr , * ) 'Unsupported status -> ' // lstatus ierr = 128 return endselect end subroutine hdf_initialize subroutine hdf_finalize ( self , ierr ) class ( hdf5_file ), intent ( in ) :: self integer , intent ( out ) :: ierr !> close hdf5 file call h5fclose_f ( self % lid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: HDF5 file close: ' // self % filename return endif !>  Close Fortran interface. call h5close_f ( ierr ) if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: HDF5 library close' end subroutine hdf_finalize subroutine hdf_write_group ( self , gname , ierr ) !! NOTE: needs to stay here instead of in submodule apparently? class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: gname !< relative path to group integer , intent ( out ) :: ierr integer ( HID_T ) :: gid integer :: sp , ep , sl logical :: gexist sl = len ( gname ) sp = 1 ep = 0 do ep = index ( gname ( sp + 1 : sl ), \"/\" ) ! no subgroup found if ( ep == 0 ) exit ! check subgroup exists sp = sp + ep call h5lexists_f ( self % lid , gname ( 1 : sp - 1 ), gexist , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: did not find group ' // gname // ' in ' // self % filename return endif if (. not . gexist ) then call h5gcreate_f ( self % lid , gname ( 1 : sp - 1 ), gid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: creating group ' // gname // ' in ' // self % filename return endif call h5gclose_f ( gid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: closing group ' // gname // ' in ' // self % filename return endif endif end do end subroutine hdf_write_group end module hdf5_interface","tags":"","loc":"sourcefile/hdf5_interface.f90.html"},{"title":"read.f90 – Object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for reading HDF5, via child submodules This file depends on sourcefile~~read.f90~~EfferentGraph sourcefile~read.f90 read.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~read.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~read.f90~~AfferentGraph sourcefile~read.f90 read.f90 sourcefile~reader.f90 reader.f90 sourcefile~reader.f90->sourcefile~read.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules read Source Code read.f90 Source Code !! This submodule is for reading HDF5, via child submodules submodule ( hdf5_interface ) read use H5LT , only : h5ltget_dataset_info_f , h5ltread_dataset_f , h5ltget_dataset_ndims_f , & h5dopen_f , h5dread_f , h5dclose_f , h5ltread_dataset_string_f , h5ltpath_valid_f implicit none contains module procedure hdf_setup_read ! module subroutine hdf_setup_read(self, dname, dims, ierr) !   class(hdf5_file), intent(in) :: self !   character(*), intent(in) :: dname !   integer(HSIZE_T), intent(out) :: dims(:) !   integer, intent(out) :: ierr integer ( SIZE_T ) :: dsize integer :: dtype logical :: exists call h5ltpath_valid_f ( self % lid , dname , . true ., exists , ierr ) if (. not . exists . or . ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' does not exist in ' // self % filename ierr = - 1 return endif call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: open ' // dname // ' read ' // self % filename end procedure hdf_setup_read module procedure hdf_get_shape !! must get dims before info, as \"dims\" must be allocated or segfault occurs. integer ( SIZE_T ) :: dsize integer :: dtype , drank logical :: exists call h5ltpath_valid_f ( self % lid , dname , . true ., exists , ierr ) if (. not . exists . or . ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' does not exist in ' // self % filename ierr = - 1 return endif call h5ltget_dataset_ndims_f ( self % lid , dname , drank , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' rank ' // self % filename return endif allocate ( dims ( drank )) call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' info ' // self % filename end procedure hdf_get_shape end submodule read","tags":"","loc":"sourcefile/read.f90.html"},{"title":"reader.f90 – Object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for reading double precision float (64 bit) This file depends on sourcefile~~reader.f90~~EfferentGraph sourcefile~reader.f90 reader.f90 sourcefile~read.f90 read.f90 sourcefile~reader.f90->sourcefile~read.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~read.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules read_real64 Source Code reader.f90 Source Code !! This submodule is for reading double precision float (64 bit) submodule ( hdf5_interface : read ) read_real64 use H5LT , only : HSIZE_T , SIZE_T , H5_REAL_KIND , H5_INTEGER_KIND , H5KIND_TO_TYPE , h5ltpath_valid_f implicit none contains module procedure hdf_read_scalar integer ( HSIZE_T ) :: dims ( rank ( value )) logical :: exists select type ( value ) type is ( character ( * )) call h5ltpath_valid_f ( self % lid , dname , . true ., exists , ierr ) if (. not . exists ) then write ( stderr , * ) 'ERROR: ' // dname // ' does not exist in ' // self % filename ierr = - 1 return endif block !! Need to use \"buf\" variable, even intent(inout) doesn't help without !! separate \"buf\" variable character ( len ( value )) :: buf call h5ltread_dataset_string_f ( self % lid , dname , buf , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename return endif value = buf end block return type is ( real ( real64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( real ( real32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( integer ( int32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) type is ( integer ( int64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) end select if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename end procedure hdf_read_scalar module procedure hdf_read_1d integer ( HSIZE_T ) :: dims ( rank ( value )) call hdf_setup_read ( self , dname , dims , ierr ) if ( ierr /= 0 ) return select type ( value ) type is ( real ( real64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( real ( real32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( integer ( int32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) type is ( integer ( int64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) end select if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename end procedure hdf_read_1d module procedure hdf_read_2d integer ( HSIZE_T ) :: dims ( rank ( value )) call hdf_setup_read ( self , dname , dims , ierr ) if ( ierr /= 0 ) return select type ( value ) type is ( real ( real64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( real ( real32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( integer ( int32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) type is ( integer ( int64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) end select if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename end procedure hdf_read_2d module procedure hdf_read_3d integer ( HSIZE_T ) :: dims ( rank ( value )) call hdf_setup_read ( self , dname , dims , ierr ) if ( ierr /= 0 ) return select type ( value ) type is ( real ( real64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( real ( real32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( integer ( int32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) type is ( integer ( int64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) end select if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename end procedure hdf_read_3d module procedure hdf_read_4d integer ( HSIZE_T ) :: dims ( rank ( value )) call hdf_setup_read ( self , dname , dims , ierr ) if ( ierr /= 0 ) return select type ( value ) type is ( real ( real64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( real ( real32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( integer ( int32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) type is ( integer ( int64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) end select if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename end procedure hdf_read_4d module procedure hdf_read_5d integer ( HSIZE_T ) :: dims ( rank ( value )) call hdf_setup_read ( self , dname , dims , ierr ) if ( ierr /= 0 ) return select type ( value ) type is ( real ( real64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( real ( real32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( integer ( int32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) type is ( integer ( int64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) end select if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename end procedure hdf_read_5d module procedure hdf_read_6d integer ( HSIZE_T ) :: dims ( rank ( value )) call hdf_setup_read ( self , dname , dims , ierr ) if ( ierr /= 0 ) return select type ( value ) type is ( real ( real64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( real ( real32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( integer ( int32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) type is ( integer ( int64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) end select if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename end procedure hdf_read_6d module procedure hdf_read_7d integer ( HSIZE_T ) :: dims ( rank ( value )) call hdf_setup_read ( self , dname , dims , ierr ) if ( ierr /= 0 ) return select type ( value ) type is ( real ( real64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( real ( real32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) type is ( integer ( int32 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) type is ( integer ( int64 )) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) end select if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename end procedure hdf_read_7d end submodule read_real64","tags":"","loc":"sourcefile/reader.f90.html"},{"title":"string_utils.f90 – Object-oriented Fortran 2018 HDF5 interface","text":"This module is for string manipulation Files dependent on this one sourcefile~~string_utils.f90~~AfferentGraph sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 sourcefile~read.f90 read.f90 sourcefile~read.f90->sourcefile~hdf5_interface.f90 sourcefile~write.f90 write.f90 sourcefile~write.f90->sourcefile~hdf5_interface.f90 sourcefile~writer.f90 writer.f90 sourcefile~writer.f90->sourcefile~write.f90 sourcefile~reader.f90 reader.f90 sourcefile~reader.f90->sourcefile~read.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules string_utils Source Code string_utils.f90 Source Code !! This module is for string manipulation module string_utils use , intrinsic :: iso_c_binding , only : c_null_char implicit none contains elemental function toLower ( str ) !! convert uppercase characters to lowercase !! !! can be trivially extended to non-ASCII character ( * ), intent ( in ) :: str character ( len ( str )) :: toLower character ( * ), parameter :: lower = \"abcdefghijklmnopqrstuvwxyz\" , & upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" integer :: i , j toLower = str do concurrent ( i = 1 : len ( str )) j = index ( upper , str ( i : i )) if ( j > 0 ) toLower ( i : i ) = lower ( j : j ) end do end function toLower pure function strip_trailing_null ( str ) result ( stripped ) !! strip trailing C null from strings character ( * ), intent ( in ) :: str character (:), allocatable :: stripped integer :: i i = len_trim ( str ) if ( str ( i : i ) == c_null_char ) then stripped = trim ( str (: i - 1 )) else stripped = trim ( str ) endif end function strip_trailing_null pure function truncate_string_null ( str ) result ( trunc ) !! truncate string to C_null_char character ( * ), intent ( in ) :: str character (:), allocatable :: trunc integer :: i i = index ( str , c_null_char ) if ( i > 0 ) then trunc = trim ( str (: i - 1 )) else !< didn't find any c_null trunc = trim ( str ) endif end function truncate_string_null end module string_utils","tags":"","loc":"sourcefile/string_utils.f90.html"},{"title":"write.f90 – Object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for writing HDF5 data via child submodules This file depends on sourcefile~~write.f90~~EfferentGraph sourcefile~write.f90 write.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~write.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~write.f90~~AfferentGraph sourcefile~write.f90 write.f90 sourcefile~writer.f90 writer.f90 sourcefile~writer.f90->sourcefile~write.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules write Source Code write.f90 Source Code !! This submodule is for writing HDF5 data via child submodules submodule ( hdf5_interface ) write use H5LT , only : h5screate_f , h5sclose_f , H5S_SCALAR_F , & h5dopen_f , h5dcreate_f , h5dwrite_f , h5dclose_f , & h5ltmake_dataset_f , & h5ltpath_valid_f , h5ltset_attribute_string_f , h5screate_simple_f , & h5pset_chunk_f , h5pset_deflate_f , h5pset_shuffle_f , h5pcreate_f , H5P_DATASET_CREATE_F , h5pclose_f , & h5ltmake_dataset_string_f , h5gopen_f , h5gclose_f implicit none contains module procedure writeattr logical :: exists call self % write ( dname , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: create ' // dname // ' ' // self % filename return endif call h5ltpath_valid_f ( self % lid , dname , . true ., exists , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: checking existence: ' // dname // ' file ' // self % filename ierr = - 1 return endif if (. not . exists ) then write ( stderr , * ) 'ERROR: variable ' // dname // ' must be created before writing ' // attr return endif call h5ltset_attribute_string_f ( self % lid , dname , attr , attrval , ierr ) if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: writing attribute ' // attr // ' to ' // dname // ' file ' // self % filename end procedure writeattr module procedure hdf_setup_write !! hdf_setup_write(self, dname, dtype, dims, ierr, chunk_size) logical :: exists call h5ltpath_valid_f ( self % lid , dname , . true ., exists , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' check exist ' // self % filename return endif if ( exists ) then !> open dataset call h5dopen_f ( self % lid , dname , self % did , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: open ' // dname // ' ' // self % filename return endif else call self % write ( dname , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: create ' // dname // ' ' // self % filename return endif endif if ( size ( dims ) >= 2 ) then if ( present ( chunk_size )) self % chunk_size (: size ( dims )) = chunk_size call hdf_set_deflate ( self , dims , ierr ) else self % pid = 0 !! sentinel value for unused property endif print * , dname , size ( dims ) if ( exists ) return if ( size ( dims ) == 0 ) then call h5screate_f ( H5S_SCALAR_F , self % sid , ierr ) else call h5screate_simple_f ( size ( dims ), dims , self % sid , ierr ) endif if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: dataspace ' // dname // ' create ' // self % filename return endif if ( size ( dims ) >= 2 ) then call h5dcreate_f ( self % lid , dname , dtype , self % sid , self % did , ierr , self % pid ) else call h5dcreate_f ( self % lid , dname , dtype , self % sid , self % did , ierr ) endif if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: dataset ' // dname // ' create ' // self % filename end procedure hdf_setup_write module procedure hdf_set_deflate integer :: ndims , i integer ( HSIZE_T ), allocatable :: chunk_size (:) ndims = size ( dims ) allocate ( chunk_size ( ndims )) do i = 1 , ndims chunk_size ( i ) = min ( self % chunk_size ( i ), dims ( i )) enddo if ( self % verbose ) print * , 'dims: ' , dims , 'chunk size: ' , chunk_size call h5pcreate_f ( H5P_DATASET_CREATE_F , self % pid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: create property ' // self % filename return endif call h5pset_chunk_f ( self % pid , ndims , chunk_size , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: set chunk ' // self % filename return endif if ( self % comp_lvl < 1 . or . self % comp_lvl > 9 ) return call h5pset_shuffle_f ( self % pid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: enable Shuffle ' // self % filename return endif call h5pset_deflate_f ( self % pid , self % comp_lvl , ierr ) if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: enable Deflate compression ' // self % filename end procedure hdf_set_deflate module procedure hdf_wrapup if ( self % sid /= 0 ) then call h5sclose_f ( self % sid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: close dataspace: ' , self % sid , self % filename return endif endif if ( self % pid /= 0 ) then call h5pclose_f ( self % pid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: close property: ' , self % pid , self % filename return endif endif call h5dclose_f ( self % did , ierr ) if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: close dataset: ' , self % did , self % filename end procedure hdf_wrapup module procedure hdf_open_group call h5gopen_f ( self % lid , gname , self % gid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: opening group ' // gname // ' in ' // self % filename return endif self % glid = self % lid self % lid = self % gid end procedure hdf_open_group module procedure hdf_close_group call h5gclose_f ( self % gid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: closing group ' // self % filename return endif self % lid = self % glid end procedure hdf_close_group end submodule write","tags":"","loc":"sourcefile/write.f90.html"},{"title":"writer.f90 – Object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for writing double precision float (64 bit) This file depends on sourcefile~~writer.f90~~EfferentGraph sourcefile~writer.f90 writer.f90 sourcefile~write.f90 write.f90 sourcefile~writer.f90->sourcefile~write.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~write.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules writer_ND Source Code writer.f90 Source Code !! This submodule is for writing double precision float (64 bit) submodule ( hdf5_interface : write ) writer_ND use H5LT , only : H5_REAL_KIND , H5_INTEGER_KIND , H5S_SCALAR_F , H5KIND_TO_TYPE implicit none contains module procedure hdf_write_scalar integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) select type ( value ) type is ( character ( * )) call h5ltmake_dataset_string_f ( self % lid , dname , value , ierr ) if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' write ' // self % filename return type is ( real ( real64 )) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( real ( real32 )) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int32 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int64 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) end select if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' write ' // self % filename return endif call hdf_wrapup ( self , ierr ) end procedure hdf_write_scalar module procedure hdf_write_1d integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) select type ( value ) type is ( real ( real64 )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( real ( real32 )) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int32 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int64 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) end select if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' write ' // self % filename return endif call hdf_wrapup ( self , ierr ) end procedure hdf_write_1d module procedure hdf_write_2d integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) select type ( value ) type is ( real ( real64 )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( real ( real32 )) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int32 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int64 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) end select if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' write ' // self % filename return endif call hdf_wrapup ( self , ierr ) end procedure hdf_write_2d module procedure hdf_write_3d integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) select type ( value ) type is ( real ( real64 )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( real ( real32 )) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int32 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int64 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) end select if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' write ' // self % filename return endif call hdf_wrapup ( self , ierr ) end procedure hdf_write_3d module procedure hdf_write_4d integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) select type ( value ) type is ( real ( real64 )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( real ( real32 )) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int32 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int64 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) end select if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' write ' // self % filename return endif call hdf_wrapup ( self , ierr ) end procedure hdf_write_4d module procedure hdf_write_5d integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) select type ( value ) type is ( real ( real64 )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( real ( real32 )) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int32 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int64 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) end select if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' write ' // self % filename return endif call hdf_wrapup ( self , ierr ) end procedure hdf_write_5d module procedure hdf_write_6d integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) select type ( value ) type is ( real ( real64 )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( real ( real32 )) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int32 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int64 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) end select if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' write ' // self % filename return endif call hdf_wrapup ( self , ierr ) end procedure hdf_write_6d module procedure hdf_write_7d integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) select type ( value ) type is ( real ( real64 )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( real ( real32 )) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int32 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) type is ( integer ( int64 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , ierr ) if ( ierr /= 0 ) return call h5dwrite_f ( self % did , dtype , value , dims , ierr ) end select if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' write ' // self % filename return endif call hdf_wrapup ( self , ierr ) end procedure hdf_write_7d end submodule writer_ND","tags":"","loc":"sourcefile/writer.f90.html"},{"title":"hdf5_file – Object-oriented Fortran 2018 HDF5 interface ","text":"type, public :: hdf5_file main type Contents Variables filename lid gid glid sid did pid comp_lvl chunk_size verbose Type-Bound Procedures shape close open writeattr finalize initialize write read hdf_read_7d hdf_read_6d hdf_read_5d hdf_read_4d hdf_read_3d hdf_read_2d hdf_read_1d hdf_read_scalar hdf_write_7d hdf_write_6d hdf_write_5d hdf_write_4d hdf_write_3d hdf_write_2d hdf_write_1d hdf_write_scalar hdf_write_group Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: filename integer(kind=HID_T), public :: lid integer(kind=HID_T), public :: gid integer(kind=HID_T), public :: glid integer(kind=HID_T), public :: sid integer(kind=HID_T), public :: did integer(kind=HID_T), public :: pid integer, public :: comp_lvl = 0 integer(kind=HSIZE_T), public :: chunk_size (7) = [64, 64, 1, 1, 1, 1, 1] logical, public :: verbose = .false. Type-Bound Procedures procedure, public :: shape => hdf_get_shape initialize HDF5 file interface Submodules public module subroutine hdf_get_shape(self, dname, dims, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) integer, intent(out) :: ierr procedure, public :: close => hdf_close_group interface Submodules public module subroutine hdf_close_group(self, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out) :: ierr procedure, public :: open => hdf_open_group interface Submodules public module subroutine hdf_open_group(self, gname, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname integer, intent(out) :: ierr procedure, public :: writeattr interface Submodules public module subroutine writeattr(self, dname, attr, attrval, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval integer, intent(out) :: ierr procedure, public :: finalize => hdf_finalize private subroutine hdf_finalize (self, ierr) close hdf5 file\n  Close Fortran interface. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self integer, intent(out) :: ierr procedure, public :: initialize => hdf_initialize private subroutine hdf_initialize (self, filename, ierr, status, action, comp_lvl) Opens hdf5 file Read more… Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: filename integer, intent(out) :: ierr character(len=*), intent(in), optional :: status character(len=*), intent(in), optional :: action integer, intent(in), optional :: comp_lvl generic, public :: write => hdf_write_scalar , hdf_write_1d , hdf_write_2d , hdf_write_3d , hdf_write_4d , hdf_write_5d , hdf_write_6d , hdf_write_7d , hdf_write_group write group or dataset integer/real public interface hdf_write_scalar () Submodules Arguments None public interface hdf_write_1d () Submodules Arguments None public interface hdf_write_2d () Submodules Arguments None public interface hdf_write_3d () Submodules Arguments None public interface hdf_write_4d () Submodules Arguments None public interface hdf_write_5d () Submodules Arguments None public interface hdf_write_6d () Submodules Arguments None public interface hdf_write_7d () Submodules Arguments None private subroutine hdf_write_group (self, gname, ierr) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname integer, intent(out) :: ierr generic, public :: read => hdf_read_scalar , hdf_read_1d , hdf_read_2d , hdf_read_3d , hdf_read_4d , hdf_read_5d , hdf_read_6d , hdf_read_7d read dataset integer/real public interface hdf_read_scalar () Submodules Arguments None public interface hdf_read_1d () Submodules Arguments None public interface hdf_read_2d () Submodules Arguments None public interface hdf_read_3d () Submodules Arguments None public interface hdf_read_4d () Submodules Arguments None public interface hdf_read_5d () Submodules Arguments None public interface hdf_read_6d () Submodules Arguments None public interface hdf_read_7d () Submodules Arguments None procedure, public :: hdf_read_7d private methods interface Submodules public module subroutine hdf_read_7d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out) :: ierr procedure, public :: hdf_read_6d interface Submodules public module subroutine hdf_read_6d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out) :: ierr procedure, public :: hdf_read_5d interface Submodules public module subroutine hdf_read_5d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out) :: ierr procedure, public :: hdf_read_4d interface Submodules public module subroutine hdf_read_4d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out) :: ierr procedure, public :: hdf_read_3d interface Submodules public module subroutine hdf_read_3d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out) :: ierr procedure, public :: hdf_read_2d interface Submodules public module subroutine hdf_read_2d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out) :: ierr procedure, public :: hdf_read_1d interface Submodules public module subroutine hdf_read_1d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out) :: ierr procedure, public :: hdf_read_scalar interface Submodules public module subroutine hdf_read_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(inout) :: value integer, intent(out) :: ierr procedure, public :: hdf_write_7d interface Submodules public module subroutine hdf_write_7d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) procedure, public :: hdf_write_6d interface Submodules public module subroutine hdf_write_6d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) procedure, public :: hdf_write_5d interface Submodules public module subroutine hdf_write_5d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) procedure, public :: hdf_write_4d interface Submodules public module subroutine hdf_write_4d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) procedure, public :: hdf_write_3d interface Submodules public module subroutine hdf_write_3d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) procedure, public :: hdf_write_2d interface Submodules public module subroutine hdf_write_2d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) procedure, public :: hdf_write_1d interface Submodules public module subroutine hdf_write_1d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out) :: ierr procedure, public :: hdf_write_scalar interface Submodules public module subroutine hdf_write_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out) :: ierr procedure, public :: hdf_write_group private subroutine hdf_write_group (self, gname, ierr) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname integer, intent(out) :: ierr","tags":"","loc":"type/hdf5_file.html"},{"title":"hdf_initialize – Object-oriented Fortran 2018 HDF5 interface","text":"private subroutine hdf_initialize(self, filename, ierr, status, action, comp_lvl) Opens hdf5 file arbitrary sentinel values, telling us it hasn't been used by HDF5\n Initialize FORTRAN interface. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: filename integer, intent(out) :: ierr character(len=*), intent(in), optional :: status character(len=*), intent(in), optional :: action integer, intent(in), optional :: comp_lvl Calls proc~~hdf_initialize~~CallsGraph proc~hdf_initialize hdf_initialize h5open_f h5open_f proc~hdf_initialize->h5open_f h5fopen_f h5fopen_f proc~hdf_initialize->h5fopen_f proc~tolower toLower proc~hdf_initialize->proc~tolower h5fcreate_f h5fcreate_f proc~hdf_initialize->h5fcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_initialize.html"},{"title":"hdf_finalize – Object-oriented Fortran 2018 HDF5 interface","text":"private subroutine hdf_finalize(self, ierr) close hdf5 file\n  Close Fortran interface. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self integer, intent(out) :: ierr Calls proc~~hdf_finalize~~CallsGraph proc~hdf_finalize hdf_finalize h5close_f h5close_f proc~hdf_finalize->h5close_f h5fclose_f h5fclose_f proc~hdf_finalize->h5fclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_finalize.html"},{"title":"hdf_write_group – Object-oriented Fortran 2018 HDF5 interface","text":"private subroutine hdf_write_group(self, gname, ierr) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname integer, intent(out) :: ierr Calls proc~~hdf_write_group~~CallsGraph proc~hdf_write_group hdf_write_group h5gclose_f h5gclose_f proc~hdf_write_group->h5gclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_group.html"},{"title":"hdf_setup_read – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_setup_read~~CallsGraph interface~hdf_setup_read hdf_setup_read proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~hdf_setup_read~~CalledByGraph interface~hdf_setup_read hdf_setup_read proc~hdf_read_2d hdf_read_2d proc~hdf_read_2d->interface~hdf_setup_read proc~hdf_read_5d hdf_read_5d proc~hdf_read_5d->interface~hdf_setup_read proc~hdf_read_1d hdf_read_1d proc~hdf_read_1d->interface~hdf_setup_read proc~hdf_read_7d hdf_read_7d proc~hdf_read_7d->interface~hdf_setup_read proc~hdf_read_4d hdf_read_4d proc~hdf_read_4d->interface~hdf_setup_read proc~hdf_read_3d hdf_read_3d proc~hdf_read_3d->interface~hdf_setup_read proc~hdf_read_6d hdf_read_6d proc~hdf_read_6d->interface~hdf_setup_read interface~hdf_read_4d hdf_read_4d interface~hdf_read_4d->proc~hdf_read_4d interface~hdf_read_7d hdf_read_7d interface~hdf_read_7d->proc~hdf_read_7d interface~hdf_read_5d hdf_read_5d interface~hdf_read_5d->proc~hdf_read_5d interface~hdf_read_6d hdf_read_6d interface~hdf_read_6d->proc~hdf_read_6d interface~hdf_read_1d hdf_read_1d interface~hdf_read_1d->proc~hdf_read_1d interface~hdf_read_3d hdf_read_3d interface~hdf_read_3d->proc~hdf_read_3d interface~hdf_read_2d hdf_read_2d interface~hdf_read_2d->proc~hdf_read_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_setup_read(self, dname, dims, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out) :: dims (:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_setup_read.html"},{"title":"hdf_setup_write – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_setup_write~~CallsGraph interface~hdf_setup_write hdf_setup_write proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~hdf_setup_write~~CalledByGraph interface~hdf_setup_write hdf_setup_write proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->interface~hdf_setup_write proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->interface~hdf_setup_write proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->interface~hdf_setup_write proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->interface~hdf_setup_write proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->interface~hdf_setup_write proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->interface~hdf_setup_write proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->interface~hdf_setup_write proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->interface~hdf_setup_write interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_setup_write(self, dname, dtype, dims, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=HID_T), intent(in) :: dtype integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_setup_write.html"},{"title":"hdf_wrapup – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_wrapup~~CallsGraph interface~hdf_wrapup hdf_wrapup proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~hdf_wrapup~~CalledByGraph interface~hdf_wrapup hdf_wrapup proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->interface~hdf_wrapup proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->interface~hdf_wrapup proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->interface~hdf_wrapup proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->interface~hdf_wrapup proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->interface~hdf_wrapup proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->interface~hdf_wrapup proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->interface~hdf_wrapup proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->interface~hdf_wrapup interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_wrapup(self, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_wrapup.html"},{"title":"hdf_set_deflate – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_set_deflate~~CallsGraph interface~hdf_set_deflate hdf_set_deflate proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~hdf_set_deflate~~CalledByGraph interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write hdf_setup_write proc~hdf_setup_write->interface~hdf_set_deflate interface~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->interface~hdf_setup_write proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->interface~hdf_setup_write proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->interface~hdf_setup_write proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->interface~hdf_setup_write proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->interface~hdf_setup_write proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->interface~hdf_setup_write proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->interface~hdf_setup_write proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->interface~hdf_setup_write interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_set_deflate(self, dims, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_set_deflate.html"},{"title":"hdf_write_scalar – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_scalar~~CallsGraph interface~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_wrapup hdf_wrapup proc~hdf_write_scalar->interface~hdf_wrapup h5ltmake_dataset_string_f h5ltmake_dataset_string_f proc~hdf_write_scalar->h5ltmake_dataset_string_f interface~hdf_setup_write hdf_setup_write proc~hdf_write_scalar->interface~hdf_setup_write h5dwrite_f h5dwrite_f proc~hdf_write_scalar->h5dwrite_f h5kind_to_type h5kind_to_type proc~hdf_write_scalar->h5kind_to_type proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_write_scalarCallsGraph = svgPanZoom('#interfacehdf_write_scalarCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_write_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_write_scalar.html"},{"title":"hdf_write_1d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_1d~~CallsGraph interface~hdf_write_1d hdf_write_1d proc~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_setup_write hdf_setup_write proc~hdf_write_1d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_1d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_1d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_1d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_write_1dCallsGraph = svgPanZoom('#interfacehdf_write_1dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_write_1d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_write_1d.html"},{"title":"hdf_write_2d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_2d~~CallsGraph interface~hdf_write_2d hdf_write_2d proc~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_setup_write hdf_setup_write proc~hdf_write_2d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_2d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_2d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_2d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_write_2dCallsGraph = svgPanZoom('#interfacehdf_write_2dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_write_2d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_write_2d.html"},{"title":"hdf_write_3d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_3d~~CallsGraph interface~hdf_write_3d hdf_write_3d proc~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_setup_write hdf_setup_write proc~hdf_write_3d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_3d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_3d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_3d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_write_3dCallsGraph = svgPanZoom('#interfacehdf_write_3dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_write_3d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_write_3d.html"},{"title":"hdf_write_4d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_4d~~CallsGraph interface~hdf_write_4d hdf_write_4d proc~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_setup_write hdf_setup_write proc~hdf_write_4d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_4d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_4d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_4d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_write_4dCallsGraph = svgPanZoom('#interfacehdf_write_4dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_write_4d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_write_4d.html"},{"title":"hdf_write_5d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_5d~~CallsGraph interface~hdf_write_5d hdf_write_5d proc~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_setup_write hdf_setup_write proc~hdf_write_5d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_5d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_5d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_5d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_write_5dCallsGraph = svgPanZoom('#interfacehdf_write_5dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_write_5d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_write_5d.html"},{"title":"hdf_write_6d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_6d~~CallsGraph interface~hdf_write_6d hdf_write_6d proc~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d interface~hdf_setup_write hdf_setup_write proc~hdf_write_6d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_6d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_6d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_6d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_write_6dCallsGraph = svgPanZoom('#interfacehdf_write_6dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_write_6d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_write_6d.html"},{"title":"hdf_write_7d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_7d~~CallsGraph interface~hdf_write_7d hdf_write_7d proc~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d interface~hdf_setup_write hdf_setup_write proc~hdf_write_7d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_7d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_7d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_7d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_write_7dCallsGraph = svgPanZoom('#interfacehdf_write_7dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_write_7d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_write_7d.html"},{"title":"hdf_get_shape – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_shape~~CallsGraph interface~hdf_get_shape hdf_get_shape proc~hdf_get_shape hdf_get_shape interface~hdf_get_shape->proc~hdf_get_shape h5ltpath_valid_f h5ltpath_valid_f proc~hdf_get_shape->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_shape->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_get_shape->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_shape(self, dname, dims, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_get_shape.html"},{"title":"hdf_read_scalar – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_scalar~~CallsGraph interface~hdf_read_scalar hdf_read_scalar proc~hdf_read_scalar hdf_read_scalar interface~hdf_read_scalar->proc~hdf_read_scalar h5ltpath_valid_f h5ltpath_valid_f proc~hdf_read_scalar->h5ltpath_valid_f h5ltread_dataset_string_f h5ltread_dataset_string_f proc~hdf_read_scalar->h5ltread_dataset_string_f h5kind_to_type h5kind_to_type proc~hdf_read_scalar->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_read_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(inout) :: value integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_read_scalar.html"},{"title":"hdf_read_1d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_1d~~CallsGraph interface~hdf_read_1d hdf_read_1d proc~hdf_read_1d hdf_read_1d interface~hdf_read_1d->proc~hdf_read_1d interface~hdf_setup_read hdf_setup_read proc~hdf_read_1d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_1d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_read_1d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_read_1d.html"},{"title":"hdf_read_2d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_2d~~CallsGraph interface~hdf_read_2d hdf_read_2d proc~hdf_read_2d hdf_read_2d interface~hdf_read_2d->proc~hdf_read_2d interface~hdf_setup_read hdf_setup_read proc~hdf_read_2d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_2d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_read_2d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_read_2d.html"},{"title":"hdf_read_3d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_3d~~CallsGraph interface~hdf_read_3d hdf_read_3d proc~hdf_read_3d hdf_read_3d interface~hdf_read_3d->proc~hdf_read_3d interface~hdf_setup_read hdf_setup_read proc~hdf_read_3d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_3d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_read_3d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_read_3d.html"},{"title":"hdf_read_4d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_4d~~CallsGraph interface~hdf_read_4d hdf_read_4d proc~hdf_read_4d hdf_read_4d interface~hdf_read_4d->proc~hdf_read_4d interface~hdf_setup_read hdf_setup_read proc~hdf_read_4d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_4d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_read_4d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_read_4d.html"},{"title":"hdf_read_5d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_5d~~CallsGraph interface~hdf_read_5d hdf_read_5d proc~hdf_read_5d hdf_read_5d interface~hdf_read_5d->proc~hdf_read_5d interface~hdf_setup_read hdf_setup_read proc~hdf_read_5d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_5d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_read_5d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_read_5d.html"},{"title":"hdf_read_6d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_6d~~CallsGraph interface~hdf_read_6d hdf_read_6d proc~hdf_read_6d hdf_read_6d interface~hdf_read_6d->proc~hdf_read_6d interface~hdf_setup_read hdf_setup_read proc~hdf_read_6d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_6d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_read_6d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_read_6d.html"},{"title":"hdf_read_7d – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_7d~~CallsGraph interface~hdf_read_7d hdf_read_7d proc~hdf_read_7d hdf_read_7d interface~hdf_read_7d->proc~hdf_read_7d interface~hdf_setup_read hdf_setup_read proc~hdf_read_7d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_7d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_read_7d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_read_7d.html"},{"title":"hdf_open_group – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_open_group~~CallsGraph interface~hdf_open_group hdf_open_group proc~hdf_open_group hdf_open_group interface~hdf_open_group->proc~hdf_open_group h5gopen_f h5gopen_f proc~hdf_open_group->h5gopen_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_open_group(self, gname, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_open_group.html"},{"title":"hdf_close_group – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_close_group~~CallsGraph interface~hdf_close_group hdf_close_group proc~hdf_close_group hdf_close_group interface~hdf_close_group->proc~hdf_close_group h5gclose_f h5gclose_f proc~hdf_close_group->h5gclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_close_group(self, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out) :: ierr","tags":"","loc":"interface/hdf_close_group.html"},{"title":"writeattr – Object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~writeattr~~CallsGraph interface~writeattr writeattr proc~writeattr writeattr interface~writeattr->proc~writeattr h5ltpath_valid_f h5ltpath_valid_f proc~writeattr->h5ltpath_valid_f h5ltset_attribute_string_f h5ltset_attribute_string_f proc~writeattr->h5ltset_attribute_string_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine writeattr(self, dname, attr, attrval, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval integer, intent(out) :: ierr","tags":"","loc":"interface/writeattr.html"},{"title":"toLower – Object-oriented Fortran 2018 HDF5 interface","text":"public elemental function toLower(str) convert uppercase characters to lowercase can be trivially extended to non-ASCII Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=len(str)) Called by proc~~tolower~~CalledByGraph proc~tolower toLower proc~hdf_initialize hdf_initialize proc~hdf_initialize->proc~tolower Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/tolower.html"},{"title":"strip_trailing_null – Object-oriented Fortran 2018 HDF5 interface","text":"public pure function strip_trailing_null(str) result(stripped) strip trailing C null from strings Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=:),\n  allocatable Contents None","tags":"","loc":"proc/strip_trailing_null.html"},{"title":"truncate_string_null – Object-oriented Fortran 2018 HDF5 interface","text":"public pure function truncate_string_null(str) result(trunc) truncate string to C_null_char Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=:),\n  allocatable Contents None","tags":"","loc":"proc/truncate_string_null.html"},{"title":"hdf_setup_read – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_setup_read module subroutine hdf_setup_read(self, dname, dims, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out) :: dims (:) integer, intent(out) :: ierr Calls proc~~hdf_setup_read~~CallsGraph proc~hdf_setup_read hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_setup_read~~CalledByGraph proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read proc~hdf_read_2d hdf_read_2d proc~hdf_read_2d->interface~hdf_setup_read proc~hdf_read_5d hdf_read_5d proc~hdf_read_5d->interface~hdf_setup_read proc~hdf_read_1d hdf_read_1d proc~hdf_read_1d->interface~hdf_setup_read proc~hdf_read_7d hdf_read_7d proc~hdf_read_7d->interface~hdf_setup_read proc~hdf_read_4d hdf_read_4d proc~hdf_read_4d->interface~hdf_setup_read proc~hdf_read_3d hdf_read_3d proc~hdf_read_3d->interface~hdf_setup_read proc~hdf_read_6d hdf_read_6d proc~hdf_read_6d->interface~hdf_setup_read interface~hdf_read_4d hdf_read_4d interface~hdf_read_4d->proc~hdf_read_4d interface~hdf_read_7d hdf_read_7d interface~hdf_read_7d->proc~hdf_read_7d interface~hdf_read_5d hdf_read_5d interface~hdf_read_5d->proc~hdf_read_5d interface~hdf_read_6d hdf_read_6d interface~hdf_read_6d->proc~hdf_read_6d interface~hdf_read_1d hdf_read_1d interface~hdf_read_1d->proc~hdf_read_1d interface~hdf_read_3d hdf_read_3d interface~hdf_read_3d->proc~hdf_read_3d interface~hdf_read_2d hdf_read_2d interface~hdf_read_2d->proc~hdf_read_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_setup_read.html"},{"title":"hdf_get_shape – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_shape module subroutine hdf_get_shape(self, dname, dims, ierr) Interface → must get dims before info, as \"dims\" must be allocated or segfault occurs. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) integer, intent(out) :: ierr Calls proc~~hdf_get_shape~~CallsGraph proc~hdf_get_shape hdf_get_shape h5ltpath_valid_f h5ltpath_valid_f proc~hdf_get_shape->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_shape->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_get_shape->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_shape~~CalledByGraph proc~hdf_get_shape hdf_get_shape interface~hdf_get_shape hdf_get_shape interface~hdf_get_shape->proc~hdf_get_shape Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_shape.html"},{"title":"hdf_read_scalar – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_read_scalar module subroutine hdf_read_scalar(self, dname, value, ierr) Interface → Need to use \"buf\" variable, even intent(inout) doesn't help without\n separate \"buf\" variable Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(inout) :: value integer, intent(out) :: ierr Calls proc~~hdf_read_scalar~~CallsGraph proc~hdf_read_scalar hdf_read_scalar h5ltpath_valid_f h5ltpath_valid_f proc~hdf_read_scalar->h5ltpath_valid_f h5ltread_dataset_string_f h5ltread_dataset_string_f proc~hdf_read_scalar->h5ltread_dataset_string_f h5kind_to_type h5kind_to_type proc~hdf_read_scalar->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_scalar~~CalledByGraph proc~hdf_read_scalar hdf_read_scalar interface~hdf_read_scalar hdf_read_scalar interface~hdf_read_scalar->proc~hdf_read_scalar Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_scalar.html"},{"title":"hdf_read_1d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_read_1d module subroutine hdf_read_1d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out) :: ierr Calls proc~~hdf_read_1d~~CallsGraph proc~hdf_read_1d hdf_read_1d interface~hdf_setup_read hdf_setup_read proc~hdf_read_1d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_1d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_1d~~CalledByGraph proc~hdf_read_1d hdf_read_1d interface~hdf_read_1d hdf_read_1d interface~hdf_read_1d->proc~hdf_read_1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_1d.html"},{"title":"hdf_read_2d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_read_2d module subroutine hdf_read_2d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out) :: ierr Calls proc~~hdf_read_2d~~CallsGraph proc~hdf_read_2d hdf_read_2d interface~hdf_setup_read hdf_setup_read proc~hdf_read_2d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_2d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_2d~~CalledByGraph proc~hdf_read_2d hdf_read_2d interface~hdf_read_2d hdf_read_2d interface~hdf_read_2d->proc~hdf_read_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_2d.html"},{"title":"hdf_read_3d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_read_3d module subroutine hdf_read_3d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out) :: ierr Calls proc~~hdf_read_3d~~CallsGraph proc~hdf_read_3d hdf_read_3d interface~hdf_setup_read hdf_setup_read proc~hdf_read_3d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_3d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_3d~~CalledByGraph proc~hdf_read_3d hdf_read_3d interface~hdf_read_3d hdf_read_3d interface~hdf_read_3d->proc~hdf_read_3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_3d.html"},{"title":"hdf_read_4d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_read_4d module subroutine hdf_read_4d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out) :: ierr Calls proc~~hdf_read_4d~~CallsGraph proc~hdf_read_4d hdf_read_4d interface~hdf_setup_read hdf_setup_read proc~hdf_read_4d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_4d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_4d~~CalledByGraph proc~hdf_read_4d hdf_read_4d interface~hdf_read_4d hdf_read_4d interface~hdf_read_4d->proc~hdf_read_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_4d.html"},{"title":"hdf_read_5d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_read_5d module subroutine hdf_read_5d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out) :: ierr Calls proc~~hdf_read_5d~~CallsGraph proc~hdf_read_5d hdf_read_5d interface~hdf_setup_read hdf_setup_read proc~hdf_read_5d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_5d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_5d~~CalledByGraph proc~hdf_read_5d hdf_read_5d interface~hdf_read_5d hdf_read_5d interface~hdf_read_5d->proc~hdf_read_5d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_5d.html"},{"title":"hdf_read_6d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_read_6d module subroutine hdf_read_6d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out) :: ierr Calls proc~~hdf_read_6d~~CallsGraph proc~hdf_read_6d hdf_read_6d interface~hdf_setup_read hdf_setup_read proc~hdf_read_6d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_6d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_6d~~CalledByGraph proc~hdf_read_6d hdf_read_6d interface~hdf_read_6d hdf_read_6d interface~hdf_read_6d->proc~hdf_read_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_6d.html"},{"title":"hdf_read_7d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_read_7d module subroutine hdf_read_7d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out) :: ierr Calls proc~~hdf_read_7d~~CallsGraph proc~hdf_read_7d hdf_read_7d interface~hdf_setup_read hdf_setup_read proc~hdf_read_7d->interface~hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_7d->h5kind_to_type proc~hdf_setup_read hdf_setup_read interface~hdf_setup_read->proc~hdf_setup_read h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_read->h5ltpath_valid_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_setup_read->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_7d~~CalledByGraph proc~hdf_read_7d hdf_read_7d interface~hdf_read_7d hdf_read_7d interface~hdf_read_7d->proc~hdf_read_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_7d.html"},{"title":"writeattr – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure writeattr module subroutine writeattr(self, dname, attr, attrval, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval integer, intent(out) :: ierr Calls proc~~writeattr~~CallsGraph proc~writeattr writeattr h5ltpath_valid_f h5ltpath_valid_f proc~writeattr->h5ltpath_valid_f h5ltset_attribute_string_f h5ltset_attribute_string_f proc~writeattr->h5ltset_attribute_string_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~writeattr~~CalledByGraph proc~writeattr writeattr interface~writeattr writeattr interface~writeattr->proc~writeattr Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/writeattr.html"},{"title":"hdf_setup_write – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_setup_write module subroutine hdf_setup_write(self, dname, dtype, dims, ierr, chunk_size) Interface → hdf_setup_write(self, dname, dtype, dims, ierr, chunk_size) open dataset\n sentinel value for unused property Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=HID_T), intent(in) :: dtype integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_setup_write~~CallsGraph proc~hdf_setup_write hdf_setup_write h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_setup_write~~CalledByGraph proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->interface~hdf_setup_write proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->interface~hdf_setup_write proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->interface~hdf_setup_write proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->interface~hdf_setup_write proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->interface~hdf_setup_write proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->interface~hdf_setup_write proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->interface~hdf_setup_write proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->interface~hdf_setup_write interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_setup_write.html"},{"title":"hdf_set_deflate – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_set_deflate module subroutine hdf_set_deflate(self, dims, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(out) :: ierr Calls proc~~hdf_set_deflate~~CallsGraph proc~hdf_set_deflate hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_set_deflate~~CalledByGraph proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate proc~hdf_setup_write hdf_setup_write proc~hdf_setup_write->interface~hdf_set_deflate interface~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->interface~hdf_setup_write proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->interface~hdf_setup_write proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->interface~hdf_setup_write proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->interface~hdf_setup_write proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->interface~hdf_setup_write proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->interface~hdf_setup_write proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->interface~hdf_setup_write proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->interface~hdf_setup_write interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d var panprochdf_set_deflateCalledByGraph = svgPanZoom('#prochdf_set_deflateCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_set_deflate.html"},{"title":"hdf_wrapup – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_wrapup module subroutine hdf_wrapup(self, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self integer, intent(out) :: ierr Calls proc~~hdf_wrapup~~CallsGraph proc~hdf_wrapup hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_wrapup~~CalledByGraph proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->interface~hdf_wrapup proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->interface~hdf_wrapup proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->interface~hdf_wrapup proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->interface~hdf_wrapup proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->interface~hdf_wrapup proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->interface~hdf_wrapup proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->interface~hdf_wrapup proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->interface~hdf_wrapup interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_wrapup.html"},{"title":"hdf_open_group – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_open_group module subroutine hdf_open_group(self, gname, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname integer, intent(out) :: ierr Calls proc~~hdf_open_group~~CallsGraph proc~hdf_open_group hdf_open_group h5gopen_f h5gopen_f proc~hdf_open_group->h5gopen_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_open_group~~CalledByGraph proc~hdf_open_group hdf_open_group interface~hdf_open_group hdf_open_group interface~hdf_open_group->proc~hdf_open_group Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_open_group.html"},{"title":"hdf_close_group – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_close_group module subroutine hdf_close_group(self, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out) :: ierr Calls proc~~hdf_close_group~~CallsGraph proc~hdf_close_group hdf_close_group h5gclose_f h5gclose_f proc~hdf_close_group->h5gclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_close_group~~CalledByGraph proc~hdf_close_group hdf_close_group interface~hdf_close_group hdf_close_group interface~hdf_close_group->proc~hdf_close_group Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_close_group.html"},{"title":"hdf_write_scalar – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_write_scalar module subroutine hdf_write_scalar(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out) :: ierr Calls proc~~hdf_write_scalar~~CallsGraph proc~hdf_write_scalar hdf_write_scalar interface~hdf_wrapup hdf_wrapup proc~hdf_write_scalar->interface~hdf_wrapup h5ltmake_dataset_string_f h5ltmake_dataset_string_f proc~hdf_write_scalar->h5ltmake_dataset_string_f interface~hdf_setup_write hdf_setup_write proc~hdf_write_scalar->interface~hdf_setup_write h5dwrite_f h5dwrite_f proc~hdf_write_scalar->h5dwrite_f h5kind_to_type h5kind_to_type proc~hdf_write_scalar->h5kind_to_type proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_write_scalarCallsGraph = svgPanZoom('#prochdf_write_scalarCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_scalar~~CalledByGraph proc~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_scalar.html"},{"title":"hdf_write_1d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_write_1d module subroutine hdf_write_1d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out) :: ierr Calls proc~~hdf_write_1d~~CallsGraph proc~hdf_write_1d hdf_write_1d interface~hdf_setup_write hdf_setup_write proc~hdf_write_1d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_1d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_1d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_1d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_write_1dCallsGraph = svgPanZoom('#prochdf_write_1dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_1d~~CalledByGraph proc~hdf_write_1d hdf_write_1d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_1d.html"},{"title":"hdf_write_2d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_write_2d module subroutine hdf_write_2d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_write_2d~~CallsGraph proc~hdf_write_2d hdf_write_2d interface~hdf_setup_write hdf_setup_write proc~hdf_write_2d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_2d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_2d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_2d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_write_2dCallsGraph = svgPanZoom('#prochdf_write_2dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_2d~~CalledByGraph proc~hdf_write_2d hdf_write_2d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_2d.html"},{"title":"hdf_write_3d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_write_3d module subroutine hdf_write_3d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_write_3d~~CallsGraph proc~hdf_write_3d hdf_write_3d interface~hdf_setup_write hdf_setup_write proc~hdf_write_3d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_3d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_3d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_3d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_write_3dCallsGraph = svgPanZoom('#prochdf_write_3dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_3d~~CalledByGraph proc~hdf_write_3d hdf_write_3d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_3d.html"},{"title":"hdf_write_4d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_write_4d module subroutine hdf_write_4d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_write_4d~~CallsGraph proc~hdf_write_4d hdf_write_4d interface~hdf_setup_write hdf_setup_write proc~hdf_write_4d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_4d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_4d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_4d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_write_4dCallsGraph = svgPanZoom('#prochdf_write_4dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_4d~~CalledByGraph proc~hdf_write_4d hdf_write_4d interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_4d.html"},{"title":"hdf_write_5d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_write_5d module subroutine hdf_write_5d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_write_5d~~CallsGraph proc~hdf_write_5d hdf_write_5d interface~hdf_setup_write hdf_setup_write proc~hdf_write_5d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_5d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_5d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_5d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_write_5dCallsGraph = svgPanZoom('#prochdf_write_5dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_5d~~CalledByGraph proc~hdf_write_5d hdf_write_5d interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_5d.html"},{"title":"hdf_write_6d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_write_6d module subroutine hdf_write_6d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_write_6d~~CallsGraph proc~hdf_write_6d hdf_write_6d interface~hdf_setup_write hdf_setup_write proc~hdf_write_6d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_6d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_6d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_6d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_write_6dCallsGraph = svgPanZoom('#prochdf_write_6dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_6d~~CalledByGraph proc~hdf_write_6d hdf_write_6d interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_6d.html"},{"title":"hdf_write_7d – Object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_write_7d module subroutine hdf_write_7d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_write_7d~~CallsGraph proc~hdf_write_7d hdf_write_7d interface~hdf_setup_write hdf_setup_write proc~hdf_write_7d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_write_7d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_7d->h5kind_to_type h5dwrite_f h5dwrite_f proc~hdf_write_7d->h5dwrite_f proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_write_7dCallsGraph = svgPanZoom('#prochdf_write_7dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_7d~~CalledByGraph proc~hdf_write_7d hdf_write_7d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_7d.html"},{"title":"hdf5_interface – Object-oriented Fortran 2018 HDF5 interface","text":"HDF5 object-oriented polymorphic interface Uses iso_fortran_env H5LT string_utils module~~hdf5_interface~~UsesGraph module~hdf5_interface hdf5_interface H5LT H5LT module~hdf5_interface->H5LT iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env module~string_utils string_utils module~hdf5_interface->module~string_utils iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: read write module~~hdf5_interface~~UsedByGraph module~hdf5_interface hdf5_interface module~read read module~read->module~hdf5_interface module~write write module~write->module~hdf5_interface module~writer_nd writer_ND module~writer_nd->module~write module~read_real64 read_real64 module~read_real64->module~read Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Variables ENOENT EIO Interfaces hdf_setup_read hdf_setup_write hdf_wrapup hdf_set_deflate hdf_write_scalar hdf_write_1d hdf_write_2d hdf_write_3d hdf_write_4d hdf_write_5d hdf_write_6d hdf_write_7d hdf_get_shape hdf_read_scalar hdf_read_1d hdf_read_2d hdf_read_3d hdf_read_4d hdf_read_5d hdf_read_6d hdf_read_7d hdf_open_group hdf_close_group writeattr Derived Types hdf5_file Subroutines hdf_initialize hdf_finalize hdf_write_group Variables Type Visibility Attributes Name Initial integer, public, parameter :: ENOENT = 2 integer, public, parameter :: EIO = 5 Interfaces interface Submodules public module subroutine hdf_setup_read(self, dname, dims, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out) :: dims (:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_setup_write(self, dname, dtype, dims, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=HID_T), intent(in) :: dtype integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_wrapup(self, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self integer, intent(out) :: ierr interface Submodules public module subroutine hdf_set_deflate(self, dims, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_write_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out) :: ierr interface Submodules public module subroutine hdf_write_1d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_write_2d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_write_3d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_write_4d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_write_5d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_write_6d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_write_7d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_get_shape(self, dname, dims, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_read_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(inout) :: value integer, intent(out) :: ierr interface Submodules public module subroutine hdf_read_1d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_read_2d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_read_3d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_read_4d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_read_5d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_read_6d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_read_7d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out) :: ierr interface Submodules public module subroutine hdf_open_group(self, gname, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname integer, intent(out) :: ierr interface Submodules public module subroutine hdf_close_group(self, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out) :: ierr interface Submodules public module subroutine writeattr(self, dname, attr, attrval, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval integer, intent(out) :: ierr Derived Types type, public :: hdf5_file main type Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: filename integer(kind=HID_T), public :: lid integer(kind=HID_T), public :: gid integer(kind=HID_T), public :: glid integer(kind=HID_T), public :: sid integer(kind=HID_T), public :: did integer(kind=HID_T), public :: pid integer, public :: comp_lvl = 0 integer(kind=HSIZE_T), public :: chunk_size (7) = [64, 64, 1, 1, 1, 1, 1] logical, public :: verbose = .false. Type-Bound Procedures procedure, public :: shape => hdf_get_shape initialize HDF5 file procedure, public :: close => hdf_close_group procedure, public :: open => hdf_open_group procedure, public :: writeattr procedure, public :: finalize => hdf_finalize procedure, public :: initialize => hdf_initialize generic, public :: write => hdf_write_scalar, hdf_write_1d, hdf_write_2d, hdf_write_3d, hdf_write_4d, hdf_write_5d, hdf_write_6d, hdf_write_7d, hdf_write_group write group or dataset integer/real generic, public :: read => hdf_read_scalar, hdf_read_1d, hdf_read_2d, hdf_read_3d, hdf_read_4d, hdf_read_5d, hdf_read_6d, hdf_read_7d read dataset integer/real procedure, public :: hdf_read_7d private methods procedure, public :: hdf_read_6d procedure, public :: hdf_read_5d procedure, public :: hdf_read_4d procedure, public :: hdf_read_3d procedure, public :: hdf_read_2d procedure, public :: hdf_read_1d procedure, public :: hdf_read_scalar procedure, public :: hdf_write_7d procedure, public :: hdf_write_6d procedure, public :: hdf_write_5d procedure, public :: hdf_write_4d procedure, public :: hdf_write_3d procedure, public :: hdf_write_2d procedure, public :: hdf_write_1d procedure, public :: hdf_write_scalar procedure, public :: hdf_write_group Subroutines private subroutine hdf_initialize (self, filename, ierr, status, action, comp_lvl) Opens hdf5 file Read more… Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: filename integer, intent(out) :: ierr character(len=*), intent(in), optional :: status character(len=*), intent(in), optional :: action integer, intent(in), optional :: comp_lvl private subroutine hdf_finalize (self, ierr) close hdf5 file\n  Close Fortran interface. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self integer, intent(out) :: ierr private subroutine hdf_write_group (self, gname, ierr) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname integer, intent(out) :: ierr","tags":"","loc":"module/hdf5_interface.html"},{"title":"string_utils – Object-oriented Fortran 2018 HDF5 interface","text":"Uses iso_c_binding module~~string_utils~~UsesGraph module~string_utils string_utils iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by module~~string_utils~~UsedByGraph module~string_utils string_utils module~hdf5_interface hdf5_interface module~hdf5_interface->module~string_utils module~read read module~read->module~hdf5_interface module~write write module~write->module~hdf5_interface module~writer_nd writer_ND module~writer_nd->module~write module~read_real64 read_real64 module~read_real64->module~read Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Functions toLower strip_trailing_null truncate_string_null Functions public elemental function toLower (str) convert uppercase characters to lowercase Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=len(str)) public pure function strip_trailing_null (str) result(stripped) strip trailing C null from strings Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=:),\n  allocatable public pure function truncate_string_null (str) result(trunc) truncate string to C_null_char Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=:),\n  allocatable","tags":"","loc":"module/string_utils.html"},{"title":"read – Object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface module~~read~~UsesGraph module~read read H5LT H5LT module~read->H5LT module~hdf5_interface hdf5_interface module~read->module~hdf5_interface module~hdf5_interface->H5LT iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env module~string_utils string_utils module~hdf5_interface->module~string_utils iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: read_real64 module~~read~~UsedByGraph module~read read module~read_real64 read_real64 module~read_real64->module~read Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_setup_read hdf_get_shape Module Procedures module procedure hdf_setup_read module subroutine hdf_setup_read(self, dname, dims, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out) :: dims (:) integer, intent(out) :: ierr module procedure hdf_get_shape module subroutine hdf_get_shape(self, dname, dims, ierr) Interface → must get dims before info, as \"dims\" must be allocated or segfault occurs. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) integer, intent(out) :: ierr","tags":"","loc":"module/read.html"},{"title":"read_real64 – Object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface : read module~~read_real64~~UsesGraph module~read_real64 read_real64 H5LT H5LT module~read_real64->H5LT module~read read module~read_real64->module~read module~read->H5LT module~hdf5_interface hdf5_interface module~read->module~hdf5_interface module~hdf5_interface->H5LT iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env module~string_utils string_utils module~hdf5_interface->module~string_utils iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_read_scalar hdf_read_1d hdf_read_2d hdf_read_3d hdf_read_4d hdf_read_5d hdf_read_6d hdf_read_7d Module Procedures module procedure hdf_read_scalar module subroutine hdf_read_scalar(self, dname, value, ierr) Interface → Need to use \"buf\" variable, even intent(inout) doesn't help without\n separate \"buf\" variable Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(inout) :: value integer, intent(out) :: ierr module procedure hdf_read_1d module subroutine hdf_read_1d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out) :: ierr module procedure hdf_read_2d module subroutine hdf_read_2d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out) :: ierr module procedure hdf_read_3d module subroutine hdf_read_3d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out) :: ierr module procedure hdf_read_4d module subroutine hdf_read_4d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out) :: ierr module procedure hdf_read_5d module subroutine hdf_read_5d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out) :: ierr module procedure hdf_read_6d module subroutine hdf_read_6d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out) :: ierr module procedure hdf_read_7d module subroutine hdf_read_7d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out) :: ierr","tags":"","loc":"module/read_real64.html"},{"title":"write – Object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface module~~write~~UsesGraph module~write write H5LT H5LT module~write->H5LT module~hdf5_interface hdf5_interface module~write->module~hdf5_interface module~hdf5_interface->H5LT iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env module~string_utils string_utils module~hdf5_interface->module~string_utils iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: writer_ND module~~write~~UsedByGraph module~write write module~writer_nd writer_ND module~writer_nd->module~write Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures writeattr hdf_setup_write hdf_set_deflate hdf_wrapup hdf_open_group hdf_close_group Module Procedures module procedure writeattr module subroutine writeattr(self, dname, attr, attrval, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval integer, intent(out) :: ierr module procedure hdf_setup_write module subroutine hdf_setup_write(self, dname, dtype, dims, ierr, chunk_size) Interface → hdf_setup_write(self, dname, dtype, dims, ierr, chunk_size) Read more… Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=HID_T), intent(in) :: dtype integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) module procedure hdf_set_deflate module subroutine hdf_set_deflate(self, dims, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(out) :: ierr module procedure hdf_wrapup module subroutine hdf_wrapup(self, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self integer, intent(out) :: ierr module procedure hdf_open_group module subroutine hdf_open_group(self, gname, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname integer, intent(out) :: ierr module procedure hdf_close_group module subroutine hdf_close_group(self, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out) :: ierr","tags":"","loc":"module/write.html"},{"title":"writer_ND – Object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface : write module~~writer_nd~~UsesGraph module~writer_nd writer_ND H5LT H5LT module~writer_nd->H5LT module~write write module~writer_nd->module~write module~write->H5LT module~hdf5_interface hdf5_interface module~write->module~hdf5_interface module~hdf5_interface->H5LT iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env module~string_utils string_utils module~hdf5_interface->module~string_utils iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_write_scalar hdf_write_1d hdf_write_2d hdf_write_3d hdf_write_4d hdf_write_5d hdf_write_6d hdf_write_7d Module Procedures module procedure hdf_write_scalar module subroutine hdf_write_scalar(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out) :: ierr module procedure hdf_write_1d module subroutine hdf_write_1d(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out) :: ierr module procedure hdf_write_2d module subroutine hdf_write_2d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) module procedure hdf_write_3d module subroutine hdf_write_3d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) module procedure hdf_write_4d module subroutine hdf_write_4d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) module procedure hdf_write_5d module subroutine hdf_write_5d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) module procedure hdf_write_6d module subroutine hdf_write_6d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) module procedure hdf_write_7d module subroutine hdf_write_7d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"module/writer_nd.html"}]}