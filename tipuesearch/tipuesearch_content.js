var tipuesearch = {"pages":[{"title":" Object-oriented Fortran 2008 HDF5 interface ","text":"Object-oriented Fortran 2008 HDF5 interface Developer Info Michael Hirsch, Ph.D.","tags":"home","loc":"index.html"},{"title":"interface.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~interface.f90~~EfferentGraph sourcefile~interface.f90 interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~interface.f90~~AfferentGraph sourcefile~interface.f90 interface.f90 sourcefile~test_hdf5_ifc.f90 test_hdf5_ifc.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~interface.f90 sourcefile~test_scalar.f90 test_scalar.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_scalar.f90 sourcefile~test_array.f90 test_array.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_array.f90 sourcefile~test_lt.f90 test_lt.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_lt.f90 sourcefile~test_string.f90 test_string.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_string.f90 sourcefile~test_exist.f90 test_exist.f90 sourcefile~test_exist.f90->sourcefile~interface.f90 sourcefile~test_error.f90 test_error.f90 sourcefile~test_error.f90->sourcefile~interface.f90 sourcefile~test_scalar.f90->sourcefile~interface.f90 sourcefile~write.f90 write.f90 sourcefile~write.f90->sourcefile~interface.f90 sourcefile~read.f90 read.f90 sourcefile~read.f90->sourcefile~interface.f90 sourcefile~test_array.f90->sourcefile~interface.f90 sourcefile~test_lt.f90->sourcefile~interface.f90 sourcefile~test_string.f90->sourcefile~interface.f90 sourcefile~test_shape.f90 test_shape.f90 sourcefile~test_shape.f90->sourcefile~interface.f90 sourcefile~test_deflate.f90 test_deflate.f90 sourcefile~test_deflate.f90->sourcefile~interface.f90 sourcefile~writer_nd.f90 writer_nd.f90 sourcefile~writer_nd.f90->sourcefile~write.f90 sourcefile~reader_nd.f90 reader_nd.f90 sourcefile~reader_nd.f90->sourcefile~read.f90 sourcefile~reader_lt.f90 reader_lt.f90 sourcefile~reader_lt.f90->sourcefile~read.f90 sourcefile~writer_lt.f90 writer_lt.f90 sourcefile~writer_lt.f90->sourcefile~write.f90 sourcefile~writer.f90 writer.f90 sourcefile~writer.f90->sourcefile~write.f90 sourcefile~reader.f90 reader.f90 sourcefile~reader.f90->sourcefile~read.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules h5fortran Source Code interface.f90 Source Code module h5fortran !! HDF5 object-oriented polymorphic interface use , intrinsic :: iso_c_binding , only : c_ptr , c_loc use , intrinsic :: iso_fortran_env , only : real32 , real64 , int64 , int32 , stderr => error_unit use hdf5 , only : HID_T , SIZE_T , HSIZE_T , H5F_ACC_RDONLY_F , H5F_ACC_RDWR_F , H5F_ACC_TRUNC_F , & H5S_ALL_F , H5S_SELECT_SET_F , & H5T_NATIVE_DOUBLE , H5T_NATIVE_REAL , H5T_NATIVE_INTEGER , H5T_NATIVE_CHARACTER , & h5open_f , h5close_f , & h5dopen_f , h5dclose_f , h5dget_space_f , & h5gcreate_f , h5gclose_f , & h5fopen_f , h5fcreate_f , h5fclose_f , & h5lexists_f , & h5sclose_f , h5sselect_hyperslab_f , h5screate_simple_f , & h5get_libversion_f , h5eset_auto_f use h5lt , only : h5ltget_dataset_ndims_f , h5ltget_dataset_info_f use string_utils , only : toLower , strip_trailing_null , truncate_string_null implicit none private public :: hdf5_file , toLower , hdf_shape_check , hdf_get_slice , hdf_wrapup , hsize_t , strip_trailing_null , truncate_string_null , & check , h5write , h5read !> Workaround for Intel 19.1 / 2020 bug with /stand:f18 !> error #6410: This name has not been declared as an array or a function.   [RANK] intrinsic :: rank !> main type type :: hdf5_file character (:), allocatable :: filename integer ( HID_T ) :: lid = 0 , & !< location ID gid , & !< group ID glid !< group location ID integer :: comp_lvl = 0 !< compression level (1-9)  0: disable compression logical :: verbose = . true ., debug = . false . integer :: libversion ( 3 ) !< major, minor, rel contains !> initialize HDF5 file procedure , public :: initialize => hdf_initialize , finalize => hdf_finalize , & write_group , writeattr , & open => hdf_open_group , close => hdf_close_group , & shape => hdf_get_shape , layout => hdf_get_layout , chunks => hdf_get_chunk , & exist => hdf_check_exist , exists => hdf_check_exist , & is_contig => hdf_is_contig , is_chunked => hdf_is_chunked !> write group or dataset integer/real generic , public :: write => hdf_write_scalar , hdf_write_1d , hdf_write_2d , hdf_write_3d , & hdf_write_4d , hdf_write_5d , hdf_write_6d , hdf_write_7d !> read dataset integer/real generic , public :: read => & hdf_read_scalar , hdf_read_1d , hdf_read_2d , hdf_read_3d , & hdf_read_4d , hdf_read_5d , hdf_read_6d , hdf_read_7d !> private methods procedure , private :: hdf_write_scalar , hdf_write_1d , hdf_write_2d , hdf_write_3d , & hdf_write_4d , hdf_write_5d , hdf_write_6d , hdf_write_7d , & hdf_read_scalar , hdf_read_1d , hdf_read_2d , hdf_read_3d , & hdf_read_4d , hdf_read_5d , hdf_read_6d , hdf_read_7d end type hdf5_file interface h5write procedure lt0write , lt1write , lt2write , lt3write , lt4write , lt5write , lt6write , lt7write end interface h5write interface h5read procedure lt0read , lt1read , lt2read , lt3read , lt4read , lt5read , lt6read , lt7read end interface h5read !> Submodules interface module subroutine lt0write ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( in ) :: value integer , intent ( out ), optional :: ierr end subroutine lt0write module subroutine lt1write ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( in ) :: value (:) integer , intent ( out ), optional :: ierr end subroutine lt1write module subroutine lt2write ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( in ) :: value (:,:) integer , intent ( out ), optional :: ierr end subroutine lt2write module subroutine lt3write ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( in ) :: value (:,:,:) integer , intent ( out ), optional :: ierr end subroutine lt3write module subroutine lt4write ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( in ) :: value (:,:,:,:) integer , intent ( out ), optional :: ierr end subroutine lt4write module subroutine lt5write ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( in ) :: value (:,:,:,:,:) integer , intent ( out ), optional :: ierr end subroutine lt5write module subroutine lt6write ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( in ) :: value (:,:,:,:,:,:) integer , intent ( out ), optional :: ierr end subroutine lt6write module subroutine lt7write ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( in ) :: value (:,:,:,:,:,:,:) integer , intent ( out ), optional :: ierr end subroutine lt7write module subroutine lt0read ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( out ) :: value integer , intent ( out ), optional :: ierr end subroutine lt0read module subroutine lt1read ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( out ) :: value (:) integer , intent ( out ), optional :: ierr end subroutine lt1read module subroutine lt2read ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( out ) :: value (:,:) integer , intent ( out ), optional :: ierr end subroutine lt2read module subroutine lt3read ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( out ) :: value (:,:,:) integer , intent ( out ), optional :: ierr end subroutine lt3read module subroutine lt4read ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( out ) :: value (:,:,:,:) integer , intent ( out ), optional :: ierr end subroutine lt4read module subroutine lt5read ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( out ) :: value (:,:,:,:,:) integer , intent ( out ), optional :: ierr end subroutine lt5read module subroutine lt6read ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( out ) :: value (:,:,:,:,:,:) integer , intent ( out ), optional :: ierr end subroutine lt6read module subroutine lt7read ( filename , dname , value , ierr ) character ( * ), intent ( in ) :: filename , dname class ( * ), intent ( out ) :: value (:,:,:,:,:,:,:) integer , intent ( out ), optional :: ierr end subroutine lt7read module subroutine hdf_write_scalar ( self , dname , value , ierr ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value integer , intent ( out ), optional :: ierr end subroutine hdf_write_scalar module subroutine hdf_write_1d ( self , dname , value , ierr ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:) integer , intent ( out ), optional :: ierr end subroutine hdf_write_1d module subroutine hdf_write_2d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:) integer , intent ( in ), optional :: chunk_size ( rank ( value )) integer , intent ( out ), optional :: ierr end subroutine hdf_write_2d module subroutine hdf_write_3d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:,:) integer , intent ( in ), optional :: chunk_size ( rank ( value )) integer , intent ( out ), optional :: ierr end subroutine hdf_write_3d module subroutine hdf_write_4d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:,:,:) integer , intent ( in ), optional :: chunk_size ( rank ( value )) integer , intent ( out ), optional :: ierr end subroutine hdf_write_4d module subroutine hdf_write_5d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:,:,:,:) integer , intent ( in ), optional :: chunk_size ( rank ( value )) integer , intent ( out ), optional :: ierr end subroutine hdf_write_5d module subroutine hdf_write_6d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:,:,:,:,:) integer , intent ( in ), optional :: chunk_size ( rank ( value )) integer , intent ( out ), optional :: ierr end subroutine hdf_write_6d module subroutine hdf_write_7d ( self , dname , value , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( in ) :: value (:,:,:,:,:,:,:) integer , intent ( in ), optional :: chunk_size ( rank ( value )) integer , intent ( out ), optional :: ierr end subroutine hdf_write_7d module subroutine hdf_get_shape ( self , dname , dims , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( HSIZE_T ), intent ( out ), allocatable :: dims (:) integer , intent ( out ), optional :: ierr end subroutine hdf_get_shape module integer function hdf_get_layout ( self , dname ) result ( layout ) !! H5D_CONTIGUOUS_F, H5D_CHUNKED_F, H5D_VIRTUAL_F, H5D_COMPACT_F class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname end function hdf_get_layout module subroutine hdf_get_chunk ( self , dname , chunk_size ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( hsize_t ), intent ( out ) :: chunk_size (:) end subroutine hdf_get_chunk module logical function hdf_check_exist ( self , dname ) result ( exists ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname end function hdf_check_exist module logical function hdf_is_contig ( self , dname ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname end function hdf_is_contig module logical function hdf_is_chunked ( self , dname ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname end function hdf_is_chunked module subroutine hdf_read_scalar ( self , dname , value , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( inout ) :: value integer , intent ( out ), optional :: ierr end subroutine hdf_read_scalar module subroutine hdf_read_1d ( self , dname , value , ierr , istart , iend , stride ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:) integer , intent ( out ), optional :: ierr integer , intent ( in ), optional , dimension (:) :: istart , iend , stride end subroutine hdf_read_1d module subroutine hdf_read_2d ( self , dname , value , ierr , istart , iend , stride ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:) integer , intent ( out ), optional :: ierr integer , intent ( in ), optional , dimension (:) :: istart , iend , stride end subroutine hdf_read_2d module subroutine hdf_read_3d ( self , dname , value , ierr , istart , iend , stride ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:,:) integer , intent ( out ), optional :: ierr integer , intent ( in ), optional , dimension (:) :: istart , iend , stride end subroutine hdf_read_3d module subroutine hdf_read_4d ( self , dname , value , ierr , istart , iend , stride ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:,:,:) integer , intent ( out ), optional :: ierr integer , intent ( in ), optional , dimension (:) :: istart , iend , stride end subroutine hdf_read_4d module subroutine hdf_read_5d ( self , dname , value , ierr , istart , iend , stride ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:,:,:,:) integer , intent ( out ), optional :: ierr integer , intent ( in ), optional , dimension (:) :: istart , iend , stride end subroutine hdf_read_5d module subroutine hdf_read_6d ( self , dname , value , ierr , istart , iend , stride ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:,:,:,:,:) integer , intent ( out ), optional :: ierr integer , intent ( in ), optional , dimension (:) :: istart , iend , stride end subroutine hdf_read_6d module subroutine hdf_read_7d ( self , dname , value , ierr , istart , iend , stride ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname class ( * ), intent ( out ) :: value (:,:,:,:,:,:,:) integer , intent ( out ), optional :: ierr integer , intent ( in ), optional , dimension (:) :: istart , iend , stride end subroutine hdf_read_7d module subroutine hdf_open_group ( self , gname , ierr ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: gname integer , intent ( out ), optional :: ierr end subroutine hdf_open_group module subroutine hdf_close_group ( self , ierr ) class ( hdf5_file ), intent ( inout ) :: self integer , intent ( out ), optional :: ierr end subroutine hdf_close_group module subroutine writeattr ( self , dname , attr , attrval , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname , attr , attrval integer , intent ( out ), optional :: ierr end subroutine writeattr end interface contains subroutine hdf_initialize ( self , filename , ierr , status , action , comp_lvl , verbose , debug ) !! Opens hdf5 file class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: filename integer , intent ( out ), optional :: ierr character ( * ), intent ( in ), optional :: status character ( * ), intent ( in ), optional :: action integer , intent ( in ), optional :: comp_lvl logical , intent ( in ), optional :: verbose , debug character (:), allocatable :: lstatus , laction logical :: exists integer :: ier self % filename = filename if ( present ( comp_lvl )) self % comp_lvl = comp_lvl if ( present ( verbose )) self % verbose = verbose if ( present ( debug )) self % debug = debug !> Initialize FORTRAN interface. call h5open_f ( ier ) if ( check ( ier , 'ERROR: HDF5 library initialize' )) then if ( present ( ierr )) then ierr = ier return else error stop endif endif !> get library version call h5get_libversion_f ( self % libversion ( 1 ), self % libversion ( 2 ), self % libversion ( 3 ), ier ) if ( self % debug ) print '(A,3I3)' , 'HDF5 version: ' , self % libversion if ( check ( ier , 'ERROR: HDF5 library get version' )) then if ( present ( ierr )) then ierr = ier return else error stop endif endif if ( self % verbose ) then call h5eset_auto_f ( 1 , ier ) else call h5eset_auto_f ( 0 , ier ) endif if ( check ( ier , 'ERROR: HDF5 library set traceback' )) then if ( present ( ierr )) then ierr = ier return else error stop endif endif lstatus = 'unknown' if ( present ( status )) lstatus = toLower ( status ) laction = 'rw' if ( present ( action )) laction = toLower ( action ) select case ( lstatus ) case ( 'old' , 'unknown' ) select case ( laction ) case ( 'read' , 'r' ) !< Open an existing file. call h5fopen_f ( filename , H5F_ACC_RDONLY_F , self % lid , ier ) case ( 'write' , 'readwrite' , 'w' , 'rw' , 'r+' , 'append' , 'a' ) inquire ( file = filename , exist = exists ) if ( lstatus /= 'old' . and . . not . exists ) then call h5fcreate_f ( filename , H5F_ACC_TRUNC_F , self % lid , ier ) else call h5fopen_f ( filename , H5F_ACC_RDWR_F , self % lid , ier ) endif case default write ( stderr , * ) 'Unsupported action -> ' // laction ier = 128 endselect case ( 'new' , 'replace' ) call h5fcreate_f ( filename , H5F_ACC_TRUNC_F , self % lid , ier ) case default write ( stderr , * ) 'Unsupported status -> ' // lstatus ier = 128 end select if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR:initialize ' // filename // ' could not be created' )) then if ( present ( ierr )) return error stop endif end subroutine hdf_initialize subroutine hdf_finalize ( self , ierr ) class ( hdf5_file ), intent ( inout ) :: self integer , intent ( out ), optional :: ierr integer :: ier !> close hdf5 file call h5fclose_f ( self % lid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR:finalize: HDF5 file close: ' // self % filename )) then if ( present ( ierr )) return error stop endif !>  Close Fortran interface. call h5close_f ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR:finalize: HDF5 library close' )) then if ( present ( ierr )) return error stop endif !> sentinel lid self % lid = 0 end subroutine hdf_finalize subroutine write_group ( self , gname , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: gname !< relative path to group integer , intent ( out ), optional :: ierr integer ( HID_T ) :: gid integer :: ier integer :: sp , ep , sl logical :: gexist sl = len ( gname ) sp = 1 ep = 0 do ep = index ( gname ( sp + 1 : sl ), \"/\" ) ! no subgroup found if ( ep == 0 ) exit ! check subgroup exists sp = sp + ep call h5lexists_f ( self % lid , gname ( 1 : sp - 1 ), gexist , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: did not find group ' // gname // ' in ' // self % filename )) then if ( present ( ierr )) return error stop endif if (. not . gexist ) then call h5gcreate_f ( self % lid , gname ( 1 : sp - 1 ), gid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: creating group ' // gname // ' in ' // self % filename )) then if ( present ( ierr )) return error stop endif call h5gclose_f ( gid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: closing group ' // gname // ' in ' // self % filename )) then if ( present ( ierr )) return error stop endif endif end do end subroutine write_group logical function check ( ierr , msg ) integer , intent ( in ) :: ierr character ( * ), intent ( in ) :: msg check = ierr /= 0 if (. not . check ) return write ( stderr , * ) msg end function check subroutine hdf_wrapup ( did , sid , ierr ) integer ( HID_T ), intent ( in ) :: sid , did integer , intent ( out ) :: ierr if ( sid /= 0 ) then call h5sclose_f ( sid , ierr ) if ( check ( ierr , 'ERROR:h5sclose dataspace' )) return endif call h5dclose_f ( did , ierr ) if ( check ( ierr , 'ERROR:h5dclose dataset' )) return end subroutine hdf_wrapup subroutine hdf_get_slice ( self , dname , did , sid , mem_sid , ierr , i0 , i1 , i2 ) !! setup array slices for read and write class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( hid_t ), intent ( out ) :: sid , did , mem_sid integer , intent ( out ) :: ierr class ( * ), intent ( in ), dimension (:) :: i0 , i1 class ( * ), intent ( in ), optional , dimension (:) :: i2 integer ( hsize_t ), dimension ( size ( i0 )) :: istart , iend , stride , mem_dims integer :: mem_rank !! istart select type ( i0 ) type is ( integer ( int32 )) istart = int ( i0 , int64 ) type is ( integer ( hsize_t )) istart = i0 class default ierr = - 1 write ( stderr , * ) 'ERROR: wrong integer type for istart: ' , dname , self % filename return end select !! iend select type ( i1 ) type is ( integer ( int32 )) iend = int ( i1 , int64 ) type is ( integer ( hsize_t )) iend = i1 class default ierr = - 1 write ( stderr , * ) 'ERROR: wrong integer type for iend: ' , dname , self % filename return end select !! stride if ( present ( i2 )) then select type ( i2 ) type is ( integer ( int32 )) stride = int ( i2 , int64 ) type is ( integer ( hsize_t )) stride = i2 class default ierr = - 1 write ( stderr , * ) 'ERROR: wrong integer type for stride: ' , dname , self % filename return end select if ( self % debug ) print * , 'DEBUG: user-stride:' , stride else stride = 1 if ( self % debug ) print * , 'DEBUG: auto-stride' , stride endif !! compensate for 0-based hyperslab vs. 1-based Fortran istart = istart - 1 mem_dims = iend - istart mem_rank = size ( mem_dims ) call h5dopen_f ( self % lid , dname , did , ierr ) if ( ierr == 0 ) call h5dget_space_f ( did , sid , ierr ) if ( ierr == 0 ) call h5sselect_hyperslab_f ( sid , H5S_SELECT_SET_F , istart , mem_dims , ierr , stride = stride ) if ( ierr == 0 ) call h5screate_simple_f ( mem_rank , mem_dims , mem_sid , ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR:get_slice:' , dname , self % filename return endif end subroutine hdf_get_slice subroutine hdf_shape_check ( self , dname , dims , ierr ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( HSIZE_T ), intent ( in ) :: dims (:) integer , intent ( out ) :: ierr integer ( SIZE_T ) :: dsize integer ( HSIZE_T ) :: ddims ( size ( dims )) integer :: dtype , drank if (. not . self % exist ( dname )) then write ( stderr , * ) 'ERROR: ' // dname // ' does not exist in ' // self % filename ierr = - 1 return endif !> check for matching rank, else bad reads can occur--doesn't always crash without this check call h5ltget_dataset_ndims_f ( self % lid , dname , drank , ierr ) if ( check ( ierr , 'ERROR: get_dataset_ndim ' // dname // ' read ' // self % filename )) return if ( drank /= size ( dims )) then write ( stderr , '(A,I6,A,I6)' ) 'ERROR: rank mismatch ' // dname // ' = ' , drank , '  variable rank =' , size ( dims ) ierr = - 1 return endif !> check for matching size, else bad reads can occur. call h5ltget_dataset_info_f ( self % lid , dname , ddims , dtype , dsize , ierr ) if ( check ( ierr , 'ERROR: get_dataset_info ' // dname // ' read ' // self % filename )) return if (. not . all ( dims == ddims )) then write ( stderr , * ) 'ERROR: shape mismatch ' // dname // ' = ' , ddims , '  variable shape =' , dims ierr = - 1 return endif end subroutine hdf_shape_check end module h5fortran","tags":"","loc":"sourcefile/interface.f90.html"},{"title":"read.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~read.f90~~EfferentGraph sourcefile~read.f90 read.f90 sourcefile~interface.f90 interface.f90 sourcefile~read.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~read.f90~~AfferentGraph sourcefile~read.f90 read.f90 sourcefile~reader.f90 reader.f90 sourcefile~reader.f90->sourcefile~read.f90 sourcefile~reader_nd.f90 reader_nd.f90 sourcefile~reader_nd.f90->sourcefile~read.f90 sourcefile~reader_lt.f90 reader_lt.f90 sourcefile~reader_lt.f90->sourcefile~read.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules read Source Code read.f90 Source Code submodule ( h5fortran ) read !! This submodule is for reading HDF5 via submodules use hdf5 , only : h5dget_create_plist_f , & h5pget_layout_f , h5pget_chunk_f , H5D_CONTIGUOUS_F , H5D_CHUNKED_F use H5LT , only : h5ltpath_valid_f implicit none contains module procedure hdf_get_shape !! must get dims before info, as \"dims\" must be allocated or segfault occurs. integer ( SIZE_T ) :: dsize integer :: dtype , drank , ier ier = 0 if (. not . self % exist ( dname )) then write ( stderr , * ) 'ERROR:get_shape: ' // dname // ' does not exist in ' // self % filename ier = - 1 endif if ( ier == 0 ) call h5ltget_dataset_ndims_f ( self % lid , dname , drank , ier ) if ( ier == 0 ) then allocate ( dims ( drank )) call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ier ) endif if ( present ( ierr )) ierr = ier if ( ier /= 0 ) then if ( present ( ierr )) return error stop endif end procedure hdf_get_shape module procedure hdf_get_chunk integer :: ierr , drank integer ( HID_T ) :: pid , did chunk_size = - 1 if (. not . self % exist ( dname )) then write ( stderr , * ) 'ERROR:get_chunk: ' // dname // ' does not exist in ' // self % filename ierr = - 1 return endif if (. not . self % is_chunked ( dname )) return call h5ltget_dataset_ndims_f ( self % lid , dname , drank , ierr ) if ( check ( ierr , 'ERROR:get_chunk: get rank ' // dname // ' ' // self % filename )) return call h5dopen_f ( self % lid , dname , did , ierr ) if ( check ( ierr , 'ERROR:get_chunk: open dataset ' // dname // ' ' // self % filename )) return call h5dget_create_plist_f ( did , pid , ierr ) if ( check ( ierr , 'ERROR:get_chunk: get property list ID ' // dname // ' ' // self % filename )) return call h5pget_chunk_f ( pid , drank , chunk_size , ierr ) if ( ierr /= drank ) then write ( stderr , * ) 'ERROR:get_chunk read ' // dname // ' ' // self % filename return endif call h5dclose_f ( did , ierr ) if ( check ( ierr , 'ERROR:get_chunk: close dataset: ' // dname // ' ' // self % filename )) return end procedure hdf_get_chunk module procedure hdf_get_layout integer ( HID_T ) :: pid , did integer :: ierr layout = - 1 if (. not . self % exist ( dname )) then write ( stderr , * ) 'ERROR:get_layout: ' // dname // ' does not exist in ' // self % filename return endif call h5dopen_f ( self % lid , dname , did , ierr ) if ( check ( ierr , 'ERROR:get_layout: open dataset ' // dname // ' ' // self % filename )) return call h5dget_create_plist_f ( did , pid , ierr ) if ( check ( ierr , 'ERROR:get_layout: get property list ID ' // dname // ' ' // self % filename )) return call h5pget_layout_f ( pid , layout , ierr ) if ( check ( ierr , 'ERROR:get_layout read ' // dname // ' ' // self % filename )) return call h5dclose_f ( did , ierr ) if ( check ( ierr , 'ERROR:get_layout: close dataset: ' // dname // ' ' // self % filename )) return end procedure hdf_get_layout module procedure hdf_is_contig hdf_is_contig = self % layout ( dname ) == H5D_CONTIGUOUS_F end procedure hdf_is_contig module procedure hdf_is_chunked hdf_is_chunked = self % layout ( dname ) == H5D_CHUNKED_F end procedure hdf_is_chunked module procedure hdf_check_exist integer :: ierr if ( self % lid == 0 ) then write ( stderr , * ) 'ERROR: must initialize file before checking existance of variable' exists = . false . return endif call h5ltpath_valid_f ( self % lid , & path = dname , & check_object_valid = . true ., & path_valid = exists , & errcode = ierr ) if ( ierr /= 0 ) then write ( stderr , * ) 'ERROR: could not determine status of ' // dname // ' in ' // self % filename return endif end procedure hdf_check_exist end submodule read","tags":"","loc":"sourcefile/read.f90.html"},{"title":"reader.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~reader.f90~~EfferentGraph sourcefile~reader.f90 reader.f90 sourcefile~read.f90 read.f90 sourcefile~reader.f90->sourcefile~read.f90 sourcefile~interface.f90 interface.f90 sourcefile~read.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules reader Source Code reader.f90 Source Code submodule ( h5fortran : read ) reader !! This submodule is for reading 0-D..7-D data use hdf5 , only : h5dread_f use h5lt , only : h5ltread_dataset_string_f implicit none contains module procedure hdf_read_scalar integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( hid_t ) :: did , sid integer :: ier ier = 0 sid = 0 if (. not . self % exist ( dname )) then write ( stderr , * ) 'ERROR: ' // dname // ' does not exist in ' // self % filename ier = - 1 endif if ( ier == 0 ) then call h5dopen_f ( self % lid , dname , did , ier ) if ( ier == 0 ) then select type ( value ) type is ( character ( * )) call hdf_wrapup ( did , sid , ier ) !< FIXME: till character is treated same as other types block character ( len ( value )) :: buf call h5ltread_dataset_string_f ( self % lid , dname , buf , ier ) value = buf end block return type is ( real ( real64 )) call h5dread_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier ) type is ( real ( real32 )) call h5dread_f ( did , H5T_NATIVE_REAL , value , dims , ier ) type is ( integer ( int32 )) call h5dread_f ( did , H5T_NATIVE_INTEGER , value , dims , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) endif if ( present ( ierr )) ierr = ier if ( ier /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename if ( present ( ierr )) return error stop endif end procedure hdf_read_scalar module procedure hdf_read_1d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( hid_t ) :: did , sid , mem_sid integer :: ier sid = H5S_ALL_F mem_sid = H5S_ALL_F dims = shape ( value ) if ( present ( istart ) . and . present ( iend )) then if ( present ( stride )) then call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend , stride ) else call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend ) endif else call hdf_shape_check ( self , dname , dims , ier ) if ( ier == 0 ) call h5dopen_f ( self % lid , dname , did , ier ) endif if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h5dread_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier , mem_sid , sid ) type is ( real ( real32 )) call h5dread_f ( did , H5T_NATIVE_REAL , value , dims , ier , mem_sid , sid ) type is ( integer ( int32 )) call h5dread_f ( did , H5T_NATIVE_INTEGER , value , dims , ier , mem_sid , sid ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( ier /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename if ( present ( ierr )) return error stop endif end procedure hdf_read_1d module procedure hdf_read_2d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( hid_t ) :: did , sid , mem_sid integer :: ier sid = H5S_ALL_F mem_sid = H5S_ALL_F dims = shape ( value ) if ( present ( istart ) . and . present ( iend )) then if ( present ( stride )) then call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend , stride ) else call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend ) endif else call hdf_shape_check ( self , dname , dims , ier ) if ( ier == 0 ) call h5dopen_f ( self % lid , dname , did , ier ) endif if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h5dread_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier , mem_sid , sid ) type is ( real ( real32 )) call h5dread_f ( did , H5T_NATIVE_REAL , value , dims , ier , mem_sid , sid ) type is ( integer ( int32 )) call h5dread_f ( did , H5T_NATIVE_INTEGER , value , dims , ier , mem_sid , sid ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( ier /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename if ( present ( ierr )) return error stop endif end procedure hdf_read_2d module procedure hdf_read_3d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( hid_t ) :: did , sid , mem_sid integer :: ier sid = H5S_ALL_F mem_sid = H5S_ALL_F dims = shape ( value ) if ( present ( istart ) . and . present ( iend )) then if ( present ( stride )) then call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend , stride ) else call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend ) endif else call hdf_shape_check ( self , dname , dims , ier ) if ( ier == 0 ) call h5dopen_f ( self % lid , dname , did , ier ) endif if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h5dread_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier , mem_sid , sid ) type is ( real ( real32 )) call h5dread_f ( did , H5T_NATIVE_REAL , value , dims , ier , mem_sid , sid ) type is ( integer ( int32 )) call h5dread_f ( did , H5T_NATIVE_INTEGER , value , dims , ier , mem_sid , sid ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( ier /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename if ( present ( ierr )) return error stop endif end procedure hdf_read_3d module procedure hdf_read_4d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( hid_t ) :: did , sid , mem_sid integer :: ier sid = H5S_ALL_F mem_sid = H5S_ALL_F dims = shape ( value ) if ( present ( istart ) . and . present ( iend )) then if ( present ( stride )) then call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend , stride ) else call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend ) endif else call hdf_shape_check ( self , dname , dims , ier ) if ( ier == 0 ) call h5dopen_f ( self % lid , dname , did , ier ) endif if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h5dread_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier , mem_sid , sid ) type is ( real ( real32 )) call h5dread_f ( did , H5T_NATIVE_REAL , value , dims , ier , mem_sid , sid ) type is ( integer ( int32 )) call h5dread_f ( did , H5T_NATIVE_INTEGER , value , dims , ier , mem_sid , sid ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( ier /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename if ( present ( ierr )) return error stop endif end procedure hdf_read_4d module procedure hdf_read_5d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( hid_t ) :: did , sid , mem_sid integer :: ier sid = H5S_ALL_F mem_sid = H5S_ALL_F dims = shape ( value ) if ( present ( istart ) . and . present ( iend )) then if ( present ( stride )) then call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend , stride ) else call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend ) endif else call hdf_shape_check ( self , dname , dims , ier ) if ( ier == 0 ) call h5dopen_f ( self % lid , dname , did , ier ) endif if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h5dread_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier , mem_sid , sid ) type is ( real ( real32 )) call h5dread_f ( did , H5T_NATIVE_REAL , value , dims , ier , mem_sid , sid ) type is ( integer ( int32 )) call h5dread_f ( did , H5T_NATIVE_INTEGER , value , dims , ier , mem_sid , sid ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( ier /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename if ( present ( ierr )) return error stop endif end procedure hdf_read_5d module procedure hdf_read_6d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( hid_t ) :: did , sid , mem_sid integer :: ier sid = H5S_ALL_F mem_sid = H5S_ALL_F dims = shape ( value ) if ( present ( istart ) . and . present ( iend )) then if ( present ( stride )) then call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend , stride ) else call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend ) endif else call hdf_shape_check ( self , dname , dims , ier ) if ( ier == 0 ) call h5dopen_f ( self % lid , dname , did , ier ) endif if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h5dread_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier , mem_sid , sid ) type is ( real ( real32 )) call h5dread_f ( did , H5T_NATIVE_REAL , value , dims , ier , mem_sid , sid ) type is ( integer ( int32 )) call h5dread_f ( did , H5T_NATIVE_INTEGER , value , dims , ier , mem_sid , sid ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( ier /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename if ( present ( ierr )) return error stop endif end procedure hdf_read_6d module procedure hdf_read_7d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( hid_t ) :: did , sid , mem_sid integer :: ier sid = H5S_ALL_F mem_sid = H5S_ALL_F dims = shape ( value ) if ( present ( istart ) . and . present ( iend )) then if ( present ( stride )) then call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend , stride ) else call hdf_get_slice ( self , dname , did , sid , mem_sid , ier , istart , iend ) endif else call hdf_shape_check ( self , dname , dims , ier ) if ( ier == 0 ) call h5dopen_f ( self % lid , dname , did , ier ) endif if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h5dread_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier , mem_sid , sid ) type is ( real ( real32 )) call h5dread_f ( did , H5T_NATIVE_REAL , value , dims , ier , mem_sid , sid ) type is ( integer ( int32 )) call h5dread_f ( did , H5T_NATIVE_INTEGER , value , dims , ier , mem_sid , sid ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( ier /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename if ( present ( ierr )) return error stop endif end procedure hdf_read_7d end submodule reader","tags":"","loc":"sourcefile/reader.f90.html"},{"title":"reader_lt.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~reader_lt.f90~~EfferentGraph sourcefile~reader_lt.f90 reader_lt.f90 sourcefile~read.f90 read.f90 sourcefile~reader_lt.f90->sourcefile~read.f90 sourcefile~interface.f90 interface.f90 sourcefile~read.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules reader_lt Source Code reader_lt.f90 Source Code submodule ( h5fortran : read ) reader_lt implicit none contains module procedure lt0read type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'old' ) if ( ier == 0 ) then select type ( value ) type is ( character ( * )) call h % read ( dname , value , ier ) type is ( real ( real64 )) call h % read ( dname , value , ier ) type is ( real ( real32 )) call h % read ( dname , value , ier ) type is ( integer ( int32 )) call h % read ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' read_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt0read module procedure lt1read type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'old' ) if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h % read ( dname , value , ier ) type is ( real ( real32 )) call h % read ( dname , value , ier ) type is ( integer ( int32 )) call h % read ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' read_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt1read module procedure lt2read type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'old' ) if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h % read ( dname , value , ier ) type is ( real ( real32 )) call h % read ( dname , value , ier ) type is ( integer ( int32 )) call h % read ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' read_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt2read module procedure lt3read type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'old' ) if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h % read ( dname , value , ier ) type is ( real ( real32 )) call h % read ( dname , value , ier ) type is ( integer ( int32 )) call h % read ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' read_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt3read module procedure lt4read type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'old' ) if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h % read ( dname , value , ier ) type is ( real ( real32 )) call h % read ( dname , value , ier ) type is ( integer ( int32 )) call h % read ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' read_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt4read module procedure lt5read type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'old' ) if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h % read ( dname , value , ier ) type is ( real ( real32 )) call h % read ( dname , value , ier ) type is ( integer ( int32 )) call h % read ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' read_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt5read module procedure lt6read type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'old' ) if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h % read ( dname , value , ier ) type is ( real ( real32 )) call h % read ( dname , value , ier ) type is ( integer ( int32 )) call h % read ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' read_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt6read module procedure lt7read type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'old' ) if ( ier == 0 ) then select type ( value ) type is ( real ( real64 )) call h % read ( dname , value , ier ) type is ( real ( real32 )) call h % read ( dname , value , ier ) type is ( integer ( int32 )) call h % read ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled by h5fortran.' ier = - 1 end select endif if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' read_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt7read end submodule reader_lt","tags":"","loc":"sourcefile/reader_lt.f90.html"},{"title":"reader_nd.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"conceptual--not tested--will use h5dread_f instead This file depends on sourcefile~~reader_nd.f90~~EfferentGraph sourcefile~reader_nd.f90 reader_nd.f90 sourcefile~read.f90 read.f90 sourcefile~reader_nd.f90->sourcefile~read.f90 sourcefile~interface.f90 interface.f90 sourcefile~read.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules reader_ND Source Code reader_nd.f90 Source Code !! conceptual--not tested--will use h5dread_f instead submodule ( h5fortran : read ) reader_ND implicit none contains module procedure hdf_read_8d integer ( HSIZE_T ) :: dims ( rank ( value )) integer :: i ( rank ( value )) TYPE ( C_PTR ) :: f_ptr call hdf_setup_read ( self , dname , dims , ierr ) if ( ierr /= 0 ) return select type ( value ) type is ( real ( real64 )) i = lbound ( value ) f_ptr = c_loc ( value ( i ( 1 ), i ( 2 ), i ( 3 ), i ( 4 ), i ( 5 ), i ( 6 ), i ( 7 ), i ( 8 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), f_ptr , ierr ) type is ( real ( real32 )) i = lbound ( value ) f_ptr = c_loc ( value ( i ( 1 ), i ( 2 ), i ( 3 ), i ( 4 ), i ( 5 ), i ( 6 ), i ( 7 ), i ( 8 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), f_ptr , ierr ) type is ( integer ( int32 )) i = lbound ( value ) f_ptr = c_loc ( value ( i ( 1 ), i ( 2 ), i ( 3 ), i ( 4 ), i ( 5 ), i ( 6 ), i ( 7 ), i ( 8 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), f_ptr , ierr ) type is ( integer ( int64 )) i = lbound ( value ) f_ptr = c_loc ( value ( i ( 1 ), i ( 2 ), i ( 3 ), i ( 4 ), i ( 5 ), i ( 6 ), i ( 7 ), i ( 8 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), f_ptr , ierr ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ierr = - 1 end select if ( ierr /= 0 ) write ( stderr , * ) 'ERROR: ' // dname // ' read ' // self % filename end procedure hdf_read_8d end submodule reader_ND","tags":"","loc":"sourcefile/reader_nd.f90.html"},{"title":"string_utils.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This module is for string manipulation Files dependent on this one sourcefile~~string_utils.f90~~AfferentGraph sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90 interface.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 sourcefile~test_hdf5_ifc.f90 test_hdf5_ifc.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~interface.f90 sourcefile~test_scalar.f90 test_scalar.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_scalar.f90 sourcefile~test_array.f90 test_array.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_array.f90 sourcefile~test_lt.f90 test_lt.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_lt.f90 sourcefile~test_string.f90 test_string.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_string.f90 sourcefile~test_exist.f90 test_exist.f90 sourcefile~test_exist.f90->sourcefile~interface.f90 sourcefile~test_error.f90 test_error.f90 sourcefile~test_error.f90->sourcefile~interface.f90 sourcefile~test_scalar.f90->sourcefile~interface.f90 sourcefile~write.f90 write.f90 sourcefile~write.f90->sourcefile~interface.f90 sourcefile~read.f90 read.f90 sourcefile~read.f90->sourcefile~interface.f90 sourcefile~test_array.f90->sourcefile~interface.f90 sourcefile~test_lt.f90->sourcefile~interface.f90 sourcefile~test_string.f90->sourcefile~interface.f90 sourcefile~test_shape.f90 test_shape.f90 sourcefile~test_shape.f90->sourcefile~interface.f90 sourcefile~test_deflate.f90 test_deflate.f90 sourcefile~test_deflate.f90->sourcefile~interface.f90 sourcefile~writer_nd.f90 writer_nd.f90 sourcefile~writer_nd.f90->sourcefile~write.f90 sourcefile~reader_nd.f90 reader_nd.f90 sourcefile~reader_nd.f90->sourcefile~read.f90 sourcefile~reader_lt.f90 reader_lt.f90 sourcefile~reader_lt.f90->sourcefile~read.f90 sourcefile~writer_lt.f90 writer_lt.f90 sourcefile~writer_lt.f90->sourcefile~write.f90 sourcefile~writer.f90 writer.f90 sourcefile~writer.f90->sourcefile~write.f90 sourcefile~reader.f90 reader.f90 sourcefile~reader.f90->sourcefile~read.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules string_utils Source Code string_utils.f90 Source Code !! This module is for string manipulation module string_utils use , intrinsic :: iso_c_binding , only : c_null_char implicit none contains pure function toLower ( str ) !! convert uppercase characters to lowercase !! !! can be trivially extended to non-ASCII !! Not elemental to support strict Fortran 2018 compliance character ( * ), intent ( in ) :: str character ( len ( str )) :: toLower character ( * ), parameter :: lower = \"abcdefghijklmnopqrstuvwxyz\" , & upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" integer :: i , j toLower = str do i = 1 , len ( str ) j = index ( upper , str ( i : i )) if ( j > 0 ) toLower ( i : i ) = lower ( j : j ) end do end function toLower pure function strip_trailing_null ( str ) result ( stripped ) !! strip trailing C null from strings character ( * ), intent ( in ) :: str character (:), allocatable :: stripped integer :: i i = len_trim ( str ) if ( str ( i : i ) == c_null_char ) then stripped = trim ( str (: i - 1 )) else stripped = trim ( str ) endif end function strip_trailing_null pure function truncate_string_null ( str ) result ( trunc ) !! truncate string to C_null_char character ( * ), intent ( in ) :: str character (:), allocatable :: trunc integer :: i i = index ( str , c_null_char ) if ( i > 0 ) then trunc = trim ( str (: i - 1 )) else !< didn't find any c_null trunc = trim ( str ) endif end function truncate_string_null end module string_utils","tags":"","loc":"sourcefile/string_utils.f90.html"},{"title":"write.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~write.f90~~EfferentGraph sourcefile~write.f90 write.f90 sourcefile~interface.f90 interface.f90 sourcefile~write.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~write.f90~~AfferentGraph sourcefile~write.f90 write.f90 sourcefile~writer_lt.f90 writer_lt.f90 sourcefile~writer_lt.f90->sourcefile~write.f90 sourcefile~writer.f90 writer.f90 sourcefile~writer.f90->sourcefile~write.f90 sourcefile~writer_nd.f90 writer_nd.f90 sourcefile~writer_nd.f90->sourcefile~write.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules write Source Code write.f90 Source Code submodule ( h5fortran ) write !! This submodule is for writing HDF5 data via child submodules use hdf5 , only : & h5screate_f , H5S_SCALAR_F , & h5dcreate_f , & h5pset_chunk_f , h5pset_deflate_f , h5pset_shuffle_f , h5pset_fletcher32_f , h5pcreate_f , H5P_DATASET_CREATE_F , h5pclose_f , & h5gopen_f use H5LT , only : h5ltpath_valid_f , h5ltset_attribute_string_f , h5ltmake_dataset_string_f implicit none contains module procedure writeattr integer :: ier !call self%write(dname, ier) ! if (ier == 0) call h5ltpath_valid_f(self%lid, dname, .true., exists, ier) ! if (.not.exists) then !   write(stderr,*) 'ERROR: variable ' // dname // ' must be created before writing ' // attr !   ier = -1 ! endif call h5ltset_attribute_string_f ( self % lid , dname , attr , attrval , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR:writeattr ' // dname // ' ' // self % filename )) then if ( present ( ierr )) return error stop endif end procedure writeattr subroutine hdf_setup_write ( self , dname , dtype , dims , sid , did , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname integer ( HID_T ), intent ( in ) :: dtype integer ( HSIZE_T ), intent ( in ) :: dims (:) integer ( HID_T ), intent ( out ) :: sid , did integer , intent ( in ), optional :: chunk_size (:) integer , intent ( out ) :: ierr logical :: exists integer ( HID_T ) :: pid !! sentinel values pid = 0 sid = 0 call h5ltpath_valid_f ( self % lid , dname , . true ., exists , ierr ) if ( check ( ierr , 'ERROR: setup_write: ' // dname // ' check exist ' // self % filename )) return if ( exists ) then call hdf_shape_check ( self , dname , dims , ierr ) if ( ierr /= 0 ) return !> open dataset call h5dopen_f ( self % lid , dname , did , ierr ) if ( check ( ierr , 'ERROR:setup_write: open ' // dname // ' ' // self % filename )) return return else call self % write_group ( dname , ierr ) if ( check ( ierr , 'ERROR:setup_write: create ' // dname // ' ' // self % filename )) return endif if ( size ( dims ) >= 2 ) then if ( self % debug ) print * , 'DEBUG:setup_write: deflate: ' // dname call hdf_set_deflate ( self , dims , pid , ierr , chunk_size ) endif if ( size ( dims ) == 0 ) then call h5screate_f ( H5S_SCALAR_F , sid , ierr ) else call h5screate_simple_f ( size ( dims ), dims , sid , ierr ) endif if ( check ( ierr , 'ERROR:setup_write: dataspace ' // dname // ' create ' // self % filename )) return if ( pid == 0 ) then call h5dcreate_f ( self % lid , dname , dtype , sid , did , ierr ) else call h5dcreate_f ( self % lid , dname , dtype , sid , did , ierr , pid ) if ( check ( ierr , 'ERROR:setup_write: create ' // dname // ' property: ' // self % filename )) return call h5pclose_f ( pid , ierr ) if ( check ( ierr , 'ERROR:setup_write: close property: ' // self % filename )) return endif if ( check ( ierr , 'ERROR:setup_write: dataset ' // dname // ' create ' // self % filename )) return end subroutine hdf_setup_write subroutine hdf_set_deflate ( self , dims , pid , ierr , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self integer ( HSIZE_T ), intent ( in ) :: dims (:) integer ( HID_T ), intent ( out ) :: pid integer , intent ( out ) :: ierr integer , intent ( in ), optional :: chunk_size (:) integer ( HSIZE_T ) :: cs ( size ( dims )) pid = 0 if ( self % comp_lvl < 1 . or . self % comp_lvl > 9 ) return if ( present ( chunk_size )) then cs = chunk_size where ( cs > dims ) cs = dims if ( self % debug ) print * , 'TRACE: user request chunk_size ' , cs else !! guess chunk size, keeping in mind 1 Megabyte recommended maximum chunk size call guess_chunk_size ( dims , cs ) endif if ( any ( cs < 1 )) return if ( self % debug ) print * , 'DEBUG:set_deflate: dims: ' , dims , 'chunk size: ' , cs call h5pcreate_f ( H5P_DATASET_CREATE_F , pid , ierr ) if ( check ( ierr , 'ERROR: create property ' // self % filename )) return call h5pset_chunk_f ( pid , size ( dims ), cs , ierr ) if ( check ( ierr , 'ERROR: set chunk ' // self % filename )) return call h5pset_shuffle_f ( pid , ierr ) if ( check ( ierr , 'ERROR: enable Shuffle ' // self % filename )) return call h5pset_fletcher32_f ( pid , ierr ) if ( check ( ierr , 'ERROR: enable Fletcher32 checksum ' // self % filename )) return call h5pset_deflate_f ( pid , self % comp_lvl , ierr ) if ( check ( ierr , 'ERROR: enable Deflate compression ' // self % filename )) return if ( self % debug ) print * , 'TRACE: set_deflate done' end subroutine hdf_set_deflate subroutine guess_chunk_size ( dims , chunk_size ) !! based on https://github.com/h5py/h5py/blob/master/h5py/_hl/filters.py !! refer to https://support.hdfgroup.org/HDF5/Tutor/layout.html integer ( HSIZE_T ), intent ( in ) :: dims (:) integer ( HSIZE_T ), intent ( out ) :: chunk_size (:) integer ( hsize_t ), parameter :: & CHUNK_BASE = 16000 , & !< Multiplier by which chunks are adjusted CHUNK_MIN = 8000 , & !< lower limit: 8 kbyte CHUNK_MAX = 1000000 , & !< upper limit: 1 Mbyte TYPESIZE = 8 !< bytes, assume real64 for simplicity integer ( hsize_t ) :: dset_size , target_size , chunk_bytes , i , j , ndims if ( product ( dims ) * TYPESIZE < CHUNK_MIN ) then chunk_size = 0 return endif ndims = size ( chunk_size ) chunk_size = dims dset_size = product ( chunk_size ) * TYPESIZE target_size = int ( CHUNK_BASE * ( 2 ** log10 ( real ( dset_size ) / 1e6 )), hsize_t ) if ( target_size > CHUNK_MAX ) target_size = CHUNK_MAX ! print *,'target_size [bytes]: ',target_size i = 0 do !! Repeatedly loop over the axes, dividing them by 2. !! Stop when: !!   1a. We're smaller than the target chunk size, OR !!   1b. We're within 50% of the target chunk size, AND !!    2. The chunk is smaller than the maximum chunk size chunk_bytes = product ( chunk_size ) * TYPESIZE if (( chunk_bytes < target_size . or . 2 * ( abs ( chunk_bytes - target_size ) / target_size ) < 1 ) . and . & chunk_bytes < CHUNK_MAX ) exit if ( product ( chunk_size ) == 1 ) exit !! Element size larger than CHUNK_MAX j = int ( modulo ( i , ndims ), hsize_t ) + 1 if ( j < 1 . or . j > ndims ) error stop 'auto index bounds error' chunk_size ( j ) = ceiling ( real ( chunk_size ( j )) / 2.0 ) i = i + 1 end do end subroutine guess_chunk_size module procedure hdf_open_group integer :: ier call h5gopen_f ( self % lid , gname , self % gid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: opening group ' // gname // ' in ' // self % filename )) then if ( present ( ierr )) return error stop endif self % glid = self % lid self % lid = self % gid end procedure hdf_open_group module procedure hdf_close_group integer :: ier call h5gclose_f ( self % gid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: closing group ' // self % filename )) then if ( present ( ierr )) return error stop endif self % lid = self % glid end procedure hdf_close_group end submodule write","tags":"","loc":"sourcefile/write.f90.html"},{"title":"writer.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~writer.f90~~EfferentGraph sourcefile~writer.f90 writer.f90 sourcefile~write.f90 write.f90 sourcefile~writer.f90->sourcefile~write.f90 sourcefile~interface.f90 interface.f90 sourcefile~write.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules writer Source Code writer.f90 Source Code submodule ( h5fortran : write ) writer !! This submodule is for writing 0-D..7-D data use hdf5 , only : h5dwrite_f implicit none contains module procedure hdf_write_scalar integer ( HID_T ) :: sid , did integer ( HSIZE_T ), allocatable :: dims (:) integer :: ier allocate ( dims ( 0 )) select type ( value ) type is ( character ( * )) call h5ltmake_dataset_string_f ( self % lid , dname , value , ier ) if ( present ( ierr )) ierr = ier if ( ier /= 0 ) then write ( stderr , * ) 'ERROR: ' // dname // ' write ' // self % filename if ( present ( ierr )) return error stop endif return type is ( real ( real64 )) !! NOTE: 0d does not use chunk_size call hdf_setup_write ( self , dname , H5T_NATIVE_DOUBLE , dims , sid , did , ier ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier ) type is ( real ( real32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_REAL , dims , sid , did , ier ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_REAL , value , dims , ier ) type is ( integer ( int32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_INTEGER , dims , sid , did , ier ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_INTEGER , value , dims , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write ' // self % filename )) then if ( present ( ierr )) return error stop endif end procedure hdf_write_scalar module procedure hdf_write_1d integer ( HID_T ) :: sid , did integer ( HSIZE_T ) :: dims ( rank ( value )) integer :: ier dims = shape ( value ) select type ( value ) type is ( real ( real64 )) !! NOTE: 1d does not use chunk_size call hdf_setup_write ( self , dname , H5T_NATIVE_DOUBLE , dims , sid , did , ier ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier ) type is ( real ( real32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_REAL , dims , sid , did , ier ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_REAL , value , dims , ier ) type is ( integer ( int32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_INTEGER , dims , sid , did , ier ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_INTEGER , value , dims , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write ' // self % filename )) then if ( present ( ierr )) return error stop endif end procedure hdf_write_1d module procedure hdf_write_2d integer ( HID_T ) :: sid , did integer ( HSIZE_T ) :: dims ( rank ( value )) integer :: ier dims = shape ( value ) select type ( value ) type is ( real ( real64 )) call hdf_setup_write ( self , dname , H5T_NATIVE_DOUBLE , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier ) type is ( real ( real32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_REAL , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_REAL , value , dims , ier ) type is ( integer ( int32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_INTEGER , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_INTEGER , value , dims , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write ' // self % filename )) then if ( present ( ierr )) return error stop endif end procedure hdf_write_2d module procedure hdf_write_3d integer ( HID_T ) :: sid , did integer ( HSIZE_T ) :: dims ( rank ( value )) integer :: ier dims = shape ( value ) select type ( value ) type is ( real ( real64 )) call hdf_setup_write ( self , dname , H5T_NATIVE_DOUBLE , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier ) type is ( real ( real32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_REAL , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_REAL , value , dims , ier ) type is ( integer ( int32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_INTEGER , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_INTEGER , value , dims , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write ' // self % filename )) then if ( present ( ierr )) return error stop endif end procedure hdf_write_3d module procedure hdf_write_4d integer ( HID_T ) :: sid , did integer ( HSIZE_T ) :: dims ( rank ( value )) integer :: ier dims = shape ( value ) select type ( value ) type is ( real ( real64 )) call hdf_setup_write ( self , dname , H5T_NATIVE_DOUBLE , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier ) type is ( real ( real32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_REAL , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_REAL , value , dims , ier ) type is ( integer ( int32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_INTEGER , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_INTEGER , value , dims , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write ' // self % filename )) then if ( present ( ierr )) return error stop endif end procedure hdf_write_4d module procedure hdf_write_5d integer ( HID_T ) :: sid , did integer ( HSIZE_T ) :: dims ( rank ( value )) integer :: ier dims = shape ( value ) select type ( value ) type is ( real ( real64 )) call hdf_setup_write ( self , dname , H5T_NATIVE_DOUBLE , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier ) type is ( real ( real32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_REAL , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_REAL , value , dims , ier ) type is ( integer ( int32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_INTEGER , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_INTEGER , value , dims , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write ' // self % filename )) then if ( present ( ierr )) return error stop endif end procedure hdf_write_5d module procedure hdf_write_6d integer ( HID_T ) :: sid , did integer ( HSIZE_T ) :: dims ( rank ( value )) integer :: ier dims = shape ( value ) select type ( value ) type is ( real ( real64 )) call hdf_setup_write ( self , dname , H5T_NATIVE_DOUBLE , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier ) type is ( real ( real32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_REAL , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_REAL , value , dims , ier ) type is ( integer ( int32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_INTEGER , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_INTEGER , value , dims , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write ' // self % filename )) then if ( present ( ierr )) return error stop endif end procedure hdf_write_6d module procedure hdf_write_7d integer ( HID_T ) :: sid , did integer ( HSIZE_T ) :: dims ( rank ( value )) integer :: ier dims = shape ( value ) select type ( value ) type is ( real ( real64 )) call hdf_setup_write ( self , dname , H5T_NATIVE_DOUBLE , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_DOUBLE , value , dims , ier ) type is ( real ( real32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_REAL , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_REAL , value , dims , ier ) type is ( integer ( int32 )) call hdf_setup_write ( self , dname , H5T_NATIVE_INTEGER , dims , sid , did , ier , chunk_size ) if ( ier == 0 ) call h5dwrite_f ( did , H5T_NATIVE_INTEGER , value , dims , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call hdf_wrapup ( did , sid , ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write ' // self % filename )) then if ( present ( ierr )) return error stop endif end procedure hdf_write_7d end submodule writer","tags":"","loc":"sourcefile/writer.f90.html"},{"title":"writer_lt.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~writer_lt.f90~~EfferentGraph sourcefile~writer_lt.f90 writer_lt.f90 sourcefile~write.f90 write.f90 sourcefile~writer_lt.f90->sourcefile~write.f90 sourcefile~interface.f90 interface.f90 sourcefile~write.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules writer_lt Source Code writer_lt.f90 Source Code submodule ( h5fortran : write ) writer_lt implicit none contains module procedure lt0write type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'unknown' ) select type ( value ) type is ( character ( * )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( real ( real64 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( real ( real32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( integer ( int32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt0write module procedure lt1write type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'unknown' ) select type ( value ) type is ( real ( real64 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( real ( real32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( integer ( int32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt1write module procedure lt2write type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'unknown' ) select type ( value ) type is ( real ( real64 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( real ( real32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( integer ( int32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt2write module procedure lt3write type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'unknown' ) select type ( value ) type is ( real ( real64 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( real ( real32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( integer ( int32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt3write module procedure lt4write type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'unknown' ) select type ( value ) type is ( real ( real64 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( real ( real32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( integer ( int32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt4write module procedure lt5write type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'unknown' ) select type ( value ) type is ( real ( real64 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( real ( real32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( integer ( int32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt5write module procedure lt6write type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'unknown' ) select type ( value ) type is ( real ( real64 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( real ( real32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( integer ( int32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt6write module procedure lt7write type ( hdf5_file ) :: h integer :: ier call h % initialize ( filename , ier , status = 'unknown' ) select type ( value ) type is ( real ( real64 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( real ( real32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) type is ( integer ( int32 )) if ( ier == 0 ) call h % write ( dname , value , ier ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ier = - 1 end select if ( ier == 0 ) call h % finalize ( ier ) if ( present ( ierr )) ierr = ier if ( check ( ier , 'ERROR: ' // dname // ' write_lt ' // filename )) then if ( present ( ierr )) return error stop endif end procedure lt7write end submodule writer_lt","tags":"","loc":"sourcefile/writer_lt.f90.html"},{"title":"writer_nd.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"conceptual--not tested This file depends on sourcefile~~writer_nd.f90~~EfferentGraph sourcefile~writer_nd.f90 writer_nd.f90 sourcefile~write.f90 write.f90 sourcefile~writer_nd.f90->sourcefile~write.f90 sourcefile~interface.f90 interface.f90 sourcefile~write.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules writer_ND Source Code writer_nd.f90 Source Code !! conceptual--not tested submodule ( h5fortran : write ) writer_ND implicit none contains module procedure hdf_write_8d integer ( HID_T ) :: dtype , sid , did integer ( HSIZE_T ) :: dims ( rank ( value )) integer :: i ( rank ( value )) TYPE ( C_PTR ) :: f_ptr select type ( value ) type is ( real ( real64 )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , sid , did , ierr ) if ( ierr /= 0 ) return i = lbound ( value ) f_ptr = c_loc ( value ( i ( 1 ), i ( 2 ), i ( 3 ), i ( 4 ), i ( 5 ), i ( 6 ), i ( 7 ), i ( 8 ))) call h5dwrite_f ( did , dtype , f_ptr , ierr ) type is ( real ( real32 )) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , sid , did , ierr ) if ( ierr /= 0 ) return i = lbound ( value ) f_ptr = c_loc ( value ( i ( 1 ), i ( 2 ), i ( 3 ), i ( 4 ), i ( 5 ), i ( 6 ), i ( 7 ), i ( 8 ))) call h5dwrite_f ( did , dtype , f_ptr , ierr ) type is ( integer ( int32 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , sid , did , ierr ) if ( ierr /= 0 ) return i = lbound ( value ) f_ptr = c_loc ( value ( i ( 1 ), i ( 2 ), i ( 3 ), i ( 4 ), i ( 5 ), i ( 6 ), i ( 7 ), i ( 8 ))) call h5dwrite_f ( did , dtype , f_ptr , ierr ) type is ( integer ( int64 )) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) dims = shape ( value ) call hdf_setup_write ( self , dname , dtype , dims , sid , did , ierr ) if ( ierr /= 0 ) return i = lbound ( value ) f_ptr = c_loc ( value ( i ( 1 ), i ( 2 ), i ( 3 ), i ( 4 ), i ( 5 ), i ( 6 ), i ( 7 ), i ( 8 ))) call h5dwrite_f ( did , dtype , f_ptr , ierr ) class default write ( stderr , * ) 'ERROR: ' // dname // ' datatype is not handled yet by h5fortran.' ierr = - 1 end select call hdf_wrapup ( did , sid , ierr ) if ( check ( ierr , 'ERROR: ' // dname // ' write ' // self % filename )) return end procedure hdf_write_8d end submodule writer_ND","tags":"","loc":"sourcefile/writer_nd.f90.html"},{"title":"read_slice.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"Contents Programs read_slice Source Code read_slice.f90 Source Code program read_slice !! example of Fortran reading smaller array into slice of larger array via subroutine implicit none type :: foo integer :: i44 ( 4 , 4 ) end type foo integer :: i , bigA ( 4 , 4 ) type ( foo ) :: B bigA = - 1 call getter ( bigA ( 2 : 3 , 3 : 4 )) do i = 1 , size ( bigA , 1 ) print '(4I3)' , bigA ( i ,:) enddo ! ---- B % i44 = - 1 call getter ( B % i44 ( 2 : 3 , 3 : 4 )) print * , '' do i = 1 , size ( B % i44 , 1 ) print '(4I3)' , B % i44 ( i ,:) enddo !! should print !! -1 -1 -1 -1 !! -1 -1  1  2 !! -1 -1  3  4 !! -1 -1 -1 -1 contains subroutine getter ( A ) integer , intent ( out ) :: A ( 2 , 2 ) A = reshape ([ 1 , 2 , 3 , 4 ], shape ( A ), order = [ 2 , 1 ]) end subroutine getter end program","tags":"","loc":"sourcefile/read_slice.f90.html"},{"title":"test_array.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~test_array.f90~~EfferentGraph sourcefile~test_array.f90 test_array.f90 sourcefile~interface.f90 interface.f90 sourcefile~test_array.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~test_array.f90~~AfferentGraph sourcefile~test_array.f90 test_array.f90 sourcefile~test_hdf5_ifc.f90 test_hdf5_ifc.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_array.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules test_array Source Code test_array.f90 Source Code module test_array use , intrinsic :: ieee_arithmetic , only : ieee_value , ieee_quiet_nan , ieee_is_nan use , intrinsic :: iso_fortran_env , only : real32 , real64 , int32 , stderr => error_unit use h5fortran , only : hdf5_file , hsize_t implicit none real ( real32 ) :: nan contains subroutine test_write_array ( path ) !! tests that compression doesn't fail for very small datasets, where it really shouldn't be used (makes file bigger) type ( hdf5_file ) :: h5f character ( * ), intent ( in ) :: path integer ( int32 ), dimension ( 4 ) :: i1 , i1t integer ( int32 ), dimension ( 4 , 4 ) :: i2 , i2t real ( real32 ), allocatable :: rr2 (:,:) real ( real32 ) :: nant , r1 ( 4 ), r2 ( 4 , 4 ) integer :: i , ierr integer ( int32 ) :: i2_8 ( 8 , 8 ) nan = ieee_value ( 1.0 , ieee_quiet_nan ) do i = 1 , size ( i1 ) i1 ( i ) = i enddo i2 ( 1 ,:) = i1 do i = 1 , size ( i2 , 2 ) i2 ( i ,:) = i2 ( 1 ,:) * i enddo r1 = i1 r2 = i2 !! write test data call h5f % initialize ( path // '/test.h5' , status = 'old' , action = 'rw' , comp_lvl = 1 , verbose = . False .) call h5f % write ( '/int32-1d' , i1 ) call h5f % write ( '/test/group2/int32-2d' , i2 ) call h5f % write ( '/test/real2' , r2 ) call h5f % write ( '/nan' , nan ) !> test writing wrong size call h5f % write ( '/int32-1d' , [ - 1 ], ierr ) if ( ierr == 0 ) error stop 'test_write_array: did not error for write array shape mismatch' !> test writing wrong rank call h5f % write ( '/int32-1d' , i2 , ierr ) if ( ierr == 0 ) error stop 'test_write_array: did not error for write array rank mismatch' call h5f % finalize () !! Read tests call h5f % initialize ( path // '/test.h5' , status = 'old' , action = 'r' , verbose = . false .) !> int32 call h5f % read ( '/int32-1d' , i1t ) if (. not . all ( i1 == i1t )) error stop 'read 1-d int32: does not match write' print * , 'test_write_array: read slice 1d, stride=1' i1t = 0 call h5f % read ( '/int32-1d' , i1t (: 2 ), istart = [ 2 ], iend = [ 3 ], stride = [ 1 ]) if (. not . all ( i1t (: 2 ) == [ 2 , 3 ])) then write ( stderr , * ) 'read 1D slice does not match. expected [2,3] but got ' , i1t (: 2 ) error stop endif print * , 'test_write_array: read slice 1d, no stride' i1t = 0 call h5f % read ( '/int32-1d' , i1t (: 2 ), istart = [ 2 ], iend = [ 3 ]) if (. not . all ( i1t (: 2 ) == [ 2 , 3 ])) then write ( stderr , * ) 'read 1D slice does not match. expected [2,3] but got ' , i1t (: 2 ) error stop endif call h5f % read ( '/test/group2/int32-2d' , i2t ) if (. not . all ( i2 == i2t )) error stop 'read 2-D: int32 does not match write' print * , 'test_write_array: read slice 2d, stride=1' i2t = 0 call h5f % read ( '/test/group2/int32-2d' , i2t (: 2 ,: 3 ), istart = [ 2 , 1 ], iend = [ 3 , 3 ], stride = [ 1 , 1 ]) if (. not . all ( i2t (: 2 ,: 3 ) == i2 ( 2 : 3 , 1 : 3 ))) then write ( stderr , * ) 'read 2D slice does not match. expected:' , i2 ( 2 : 3 , 1 : 3 ), ' but got ' , i2t (: 2 ,: 3 ) error stop endif !> verify reading into larger array i2_8 = 0 call h5f % read ( '/test/group2/int32-2d' , i2_8 ( 2 : 5 , 3 : 6 )) if (. not . all ( i2_8 ( 2 : 5 , 3 : 6 ) == i2 )) error stop 'read into larger array fail' !> check error for reading array dimension mismatch !> check that 1D disk into 2D raises error call h5f % read ( '/int32-1d' , i2 , ierr ) if ( ierr == 0 ) error stop 'failed to error on read rank mismatch' ! --- real block integer ( HSIZE_T ), allocatable :: dims (:) call h5f % shape ( '/test/real2' , dims , ierr ) if ( ierr /= 0 ) error stop allocate ( rr2 ( dims ( 1 ), dims ( 2 ))) call h5f % read ( '/test/real2' , rr2 , ierr ) if ( ierr /= 0 ) error stop if (. not . all ( r2 == rr2 )) error stop 'real 2-D: read does not match write' end block call h5f % read ( '/nan' , nant , ierr ) if ( ierr /= 0 ) error stop if (. not . ieee_is_nan ( nant )) error stop 'failed storing or reading NaN' call h5f % finalize ( ierr ) if ( ierr /= 0 ) error stop end subroutine test_write_array subroutine test_readwrite_array ( path , ng , nn , pn ) !! more group type ( hdf5_file ) :: h5f character ( * ), intent ( in ) :: path integer , intent ( in ) :: ng , nn , pn real ( real32 ), allocatable :: flux (:,:), fo (:) character ( 2 ) :: pnc , ic integer :: i , ierr allocate ( flux ( nn , ng ), fo ( nn )) flux = 1.0 write ( pnc , '(I2)' ) pn call h5f % initialize ( path // '/p' // trim ( adjustl ( pnc )) // '.h5' , ierr , status = 'new' , action = 'w' ) if ( ierr /= 0 ) error stop do i = 1 , ng write ( ic , '(I2)' ) i call h5f % write ( '/group' // trim ( adjustl ( ic )) // '/flux_node' , flux (:, i ), ierr ) if ( ierr /= 0 ) error stop enddo call h5f % read ( '/group1/flux_node' , fo , ierr ) if ( ierr /= 0 ) error stop if (. not . all ( fo == flux (:, 1 ))) error stop 'test_read_write: read does not match write' call h5f % finalize ( ierr ) if ( ierr /= 0 ) error stop end subroutine test_readwrite_array end module test_array","tags":"","loc":"sourcefile/test_array.f90.html"},{"title":"test_deflate.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~test_deflate.f90~~EfferentGraph sourcefile~test_deflate.f90 test_deflate.f90 sourcefile~interface.f90 interface.f90 sourcefile~test_deflate.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs test_deflate Source Code test_deflate.f90 Source Code program test_deflate !! unit tests and registration tests of HDF5 deflate compression write use , intrinsic :: iso_fortran_env , only : int32 , real32 , real64 , stderr => error_unit use , intrinsic :: iso_c_binding , only : c_null_char use h5fortran , only : hdf5_file , toLower , strip_trailing_null , truncate_string_null use hdf5 , only : H5D_CHUNKED_F , H5D_CONTIGUOUS_F , hsize_t implicit none character (:), allocatable :: path character ( 256 ) :: argv integer :: i , l call get_command_argument ( 1 , argv , length = l , status = i ) if ( i /= 0 . or . l == 0 ) then write ( stderr , * ) 'please specify test directory e.g. /tmp' error stop 77 endif path = trim ( argv ) print * , 'test path: ' , path call test_hdf5_deflate ( path ) print * , 'PASSED: HDF5 compression' contains subroutine test_hdf5_deflate ( path ) type ( hdf5_file ) :: h5f character ( * ), intent ( in ) :: path integer ( hsize_t ), parameter :: N = 1000 integer ( hsize_t ) :: crat , chunks ( 3 ) integer :: fsize , layout integer :: ibig2 ( N , N ) = 0 , ibig3 ( N , N , 4 ) = 0 real ( real32 ) :: big2 ( N , N ) = 0. , big3 ( N , N , 4 ) = 0. character (:), allocatable :: fn fn = path // '/deflate1.h5' call h5f % initialize ( fn , status = 'new' , action = 'rw' , comp_lvl = 1 , debug = . true .) call h5f % write ( '/big2' , big2 , chunk_size = [ 100 , 100 ]) call h5f % write ( '/small_contig' , big2 (: 5 ,: 5 )) call h5f % finalize () inquire ( file = fn , size = fsize ) crat = ( N * N * storage_size ( big2 ) / 8 ) / fsize print '(A,F6.2,A,I6)' , 'filesize (Mbytes): ' , fsize / 1e6 , '   2D compression ratio:' , crat if ( h5f % comp_lvl > 0 . and . crat < 10 ) error stop '2D low compression' call h5f % initialize ( fn , status = 'old' , action = 'r' , debug = . false .) layout = h5f % layout ( '/big2' ) if ( layout /= H5D_CHUNKED_F ) error stop '#1 not chunked layout' if (. not . h5f % is_chunked ( '/big2' )) error stop '#1 not chunked layout' call h5f % chunks ( '/big2' , chunks (: 2 )) if ( any ( chunks (: 2 ) /= [ 100 , 100 ])) error stop '#1 get_chunk mismatch' layout = h5f % layout ( '/small_contig' ) if ( layout /= H5D_CONTIGUOUS_F ) error stop '#1 not contiguous layout' if (. not . h5f % is_contig ( '/small_contig' )) error stop '#1 not contig layout' call h5f % chunks ( '/small_contig' , chunks (: 2 )) if ( any ( chunks (: 2 ) /= - 1 )) error stop '#1 get_chunk mismatch' call h5f % finalize () !====================================== fn = path // '/deflate2.h5' call h5f % initialize ( fn , status = 'new' , action = 'rw' , comp_lvl = 1 , debug = . true .) call h5f % write ( '/big3' , big3 , chunk_size = [ 100 , 100 , 1 ]) call h5f % write ( '/big3_autochunk' , big3 ) call h5f % chunks ( '/big3_autochunk' , chunks ) if ( any ( chunks /= [ 63 , 125 , 1 ])) error stop '#3 auto chunk unexpected chunk size' call h5f % finalize () inquire ( file = fn , size = fsize ) crat = ( 2 * N * N * storage_size ( big3 ) / 8 ) / fsize print '(A,F6.2,A,I6)' , '#2 filesize (Mbytes): ' , fsize / 1e6 , '   3D compression ratio:' , crat if ( h5f % comp_lvl > 0 . and . crat < 10 ) error stop '#2 3D low compression' !====================================== fn = path // '/deflate3.h5' call h5f % initialize ( fn , status = 'new' , action = 'rw' , comp_lvl = 1 , debug = . true .) call h5f % write ( '/ibig3' , ibig3 (: N - 10 ,: N - 20 ,:)) call h5f % chunks ( '/ibig3' , chunks ) if ( any ( chunks /= [ 62 , 123 , 1 ])) error stop '#3 auto chunk unexpected chunk size' call h5f % finalize () inquire ( file = fn , size = fsize ) crat = ( N * N * storage_size ( ibig3 ) / 8 ) / fsize print '(A,F6.2,A,I6)' , '#3 filesize (Mbytes): ' , fsize / 1e6 , '   3D compression ratio:' , crat if ( h5f % comp_lvl > 0 . and . crat < 10 ) error stop '#3 3D low compression' !====================================== fn = path // '/deflate4.h5' call h5f % initialize ( fn , status = 'new' , action = 'rw' , comp_lvl = 1 , debug = . true .) call h5f % write ( '/ibig2' , ibig2 , chunk_size = [ 100 , 100 ]) call h5f % finalize () inquire ( file = fn , size = fsize ) crat = ( N * N * storage_size ( ibig2 ) / 8 ) / fsize print '(A,F6.2,A,I6)' , '#4 filesize (Mbytes): ' , fsize / 1e6 , '   3D compression ratio:' , crat if ( h5f % comp_lvl > 0 . and . crat < 10 ) error stop '#4 3D low compression' end subroutine test_hdf5_deflate end program","tags":"","loc":"sourcefile/test_deflate.f90.html"},{"title":"test_error.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~test_error.f90~~EfferentGraph sourcefile~test_error.f90 test_error.f90 sourcefile~interface.f90 interface.f90 sourcefile~test_error.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs test_error Source Code test_error.f90 Source Code program test_error use , intrinsic :: iso_fortran_env , only : int32 , real32 , real64 , stderr => error_unit use h5fortran , only : hdf5_file implicit none type ( hdf5_file ) :: h5f character (:), allocatable :: path character ( 256 ) :: argv integer :: i , l call get_command_argument ( 1 , argv , length = l , status = i ) if ( i /= 0 . or . l == 0 ) then write ( stderr , * ) 'please specify test directory e.g. /tmp' error stop 77 endif path = trim ( argv ) print * , 'test path: ' , path call test_nonexist_old_file ( path ) print * , 'OK: non-existing old file' call test_nonexist_unknown_file ( path ) print * , 'OK: non-existing unknown file' call test_nonhdf5_file ( path ) print * , 'OK: non-HDF5 file' call test_nonexist_variable ( path ) print * , 'OK: non-existing variable' call test_wrong_type ( path ) print * , \"OK: wrong type read\" call test_unknown_write ( path ) print * , 'OK: unknown write' call test_unknown_read ( path ) print * , 'OK: unknown read' contains subroutine test_nonexist_old_file ( path ) character ( * ), intent ( in ) :: path integer :: ierr call h5f % initialize ( path // '/not-exist' , ierr , status = 'old' , action = 'read' , verbose = . false .) if ( ierr == 0 ) error stop 'should have had ierr/=0 on non-existing old file' end subroutine test_nonexist_old_file subroutine test_nonexist_unknown_file ( path ) character ( * ), intent ( in ) :: path integer :: ierr call h5f % initialize ( path // '/not-exist' , ierr , status = 'unknown' , action = 'read' , verbose = . false .) if ( ierr == 0 ) error stop 'should have had ierr/=0 on non-existing unknown read file' end subroutine test_nonexist_unknown_file subroutine test_nonhdf5_file ( path ) character ( * ), intent ( in ) :: path integer :: u , ierr character (:), allocatable :: filename filename = path // '/junk.dat' ! create or replace zero-length file, could be any size, just not a valid HDF5 file open ( newunit = u , file = filename , status = 'replace' , iostat = ierr , action = 'write' ) close ( u ) call h5f % initialize ( filename , ierr , status = 'old' , action = 'read' ) if ( ierr == 0 ) error stop 'should have had ierr/=0 on invalid HDF5 file' end subroutine test_nonhdf5_file subroutine test_nonexist_variable ( path ) character ( * ), intent ( in ) :: path integer :: u , ierr character (:), allocatable :: filename filename = path // '/junk.h5' call h5f % initialize ( filename , status = 'replace' , action = 'readwrite' , verbose = . false .) call h5f % read ( '/not-exist' , u , ierr ) if ( ierr == 0 ) error stop 'test_nonexist_variable: should have ierr/=0 on non-exist variable' call h5f % finalize () end subroutine test_nonexist_variable subroutine test_wrong_type ( path ) character ( * ), intent ( in ) :: path integer :: u character (:), allocatable :: filename print * , 'test_wrong_type: write' filename = path // '/junk.h5' call h5f % initialize ( filename , status = 'replace' , action = 'write' , verbose = . false .) call h5f % write ( '/real32' , 4 2. ) call h5f % finalize () print * , 'test_wrong_type: read' call h5f % initialize ( filename , status = 'old' , action = 'read' , verbose = . false .) call h5f % read ( '/real32' , u ) if ( u /= 42 ) error stop 'test_wrong_type: did not coerce real to integer' call h5f % finalize () end subroutine test_wrong_type subroutine test_unknown_write ( path ) character ( * ), intent ( in ) :: path integer :: ierr character (:), allocatable :: filename complex :: x x = ( 1 , - 1 ) filename = path // '/junk.h5' call h5f % initialize ( filename , ierr , status = 'replace' , action = 'write' , verbose = . false .) if ( ierr /= 0 ) error stop 'test_unknown_write: creating file' call h5f % write ( '/complex' , x , ierr ) if ( ierr == 0 ) error stop 'test_unknown_write: writing unknown type variable' end subroutine test_unknown_write subroutine test_unknown_read ( path ) character ( * ), intent ( in ) :: path integer :: ierr character (:), allocatable :: filename complex :: x x = ( 1 , - 1 ) filename = path // '/junk.h5' call h5f % initialize ( filename , status = 'unknown' , action = 'readwrite' , verbose = . false .) call h5f % read ( '/complex' , x , ierr ) if ( ierr == 0 ) error stop 'test_unknown_read: reading unknown type variable' end subroutine test_unknown_read end program","tags":"","loc":"sourcefile/test_error.f90.html"},{"title":"test_exist.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~test_exist.f90~~EfferentGraph sourcefile~test_exist.f90 test_exist.f90 sourcefile~interface.f90 interface.f90 sourcefile~test_exist.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs test_exist Source Code test_exist.f90 Source Code program test_exist !! test \"exist\" variable use , intrinsic :: iso_fortran_env , only : stderr => error_unit use h5fortran , only : hdf5_file , h5write type ( hdf5_file ) :: h character (:), allocatable :: path character ( 256 ) :: argv integer :: i , l call get_command_argument ( 1 , argv , length = l , status = i ) if ( i /= 0 . or . l == 0 ) then write ( stderr , * ) 'please specify test directory e.g. /tmp' error stop 77 endif path = trim ( argv ) // '/foo.h5' call h5write ( path , '/x' , 42 ) call h % initialize ( path , i ) if ( i /= 0 ) error stop if (. not . h % exist ( '/x' )) error stop 'x exists' if ( h % exist ( '/foo' )) error stop 'foo not exist' end program","tags":"","loc":"sourcefile/test_exist.f90.html"},{"title":"test_hdf5_ifc.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~test_hdf5_ifc.f90~~EfferentGraph sourcefile~test_hdf5_ifc.f90 test_hdf5_ifc.f90 sourcefile~interface.f90 interface.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~interface.f90 sourcefile~test_scalar.f90 test_scalar.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_scalar.f90 sourcefile~test_array.f90 test_array.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_array.f90 sourcefile~test_lt.f90 test_lt.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_lt.f90 sourcefile~test_string.f90 test_string.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_string.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 sourcefile~test_scalar.f90->sourcefile~interface.f90 sourcefile~test_array.f90->sourcefile~interface.f90 sourcefile~test_lt.f90->sourcefile~interface.f90 sourcefile~test_string.f90->sourcefile~interface.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs test_hdf5 Source Code test_hdf5_ifc.f90 Source Code program test_hdf5 !! unit tests and registration tests of HDF5 OO interface use , intrinsic :: iso_fortran_env , only : int32 , real32 , real64 , stderr => error_unit use h5fortran , only : hdf5_file , h5write , h5read use test_lt , only : test_readwrite_lt use test_array , only : test_write_array , test_readwrite_array use test_scalar , only : test_scalar_rw use test_string , only : test_string_rw , test_lowercase , test_strip_null implicit none character (:), allocatable :: path character ( 256 ) :: argv integer :: i , l call get_command_argument ( 1 , argv , length = l , status = i ) if ( i /= 0 . or . l == 0 ) then write ( stderr , * ) 'please specify test directory e.g. /tmp' error stop 77 endif path = trim ( argv ) print * , 'test path: ' , path call test_string_rw ( path ) print * , 'PASSED: HDF5 string write/read' call test_lowercase () print * , 'PASSED: HDF5 character' call test_strip_null () print * , 'PASSED: null strip' call test_scalar_rw ( path ) print * , 'PASSED: HDF5 scalar real and integer' call testGroup ( path ) print * , 'PASSED: HDF5 group' call test_write_array ( path ) print * , 'PASSED: HDF5 array write' call test_readwrite_array ( path , ng = 69 , nn = 100 , pn = 5 ) print * , 'PASSED: HDF5 array write / read' call test_readwrite_lt ( path ) print * , 'PASSED: easy read / write' call test_write_attributes ( path ) print * , 'PASSED: HDF5 attributes' call test_writeExistingVariable ( path ) print * , 'PASSED: write existing variable' print * , 'OK: HDF5 h5fortran library' contains subroutine testGroup ( path ) type ( hdf5_file ) :: h5f character ( * ), intent ( in ) :: path call h5f % initialize ( path // '/test_groups.h5' , status = 'new' , action = 'rw' ) call h5f % write_group ( '/test/' ) call h5f % open ( '/test' ) call h5f % write ( 'group3/scalar' , 1_int32 ) call h5f % write ( 'group3/scalar_real' , 1._real32 ) call h5f % close () call h5f % finalize () end subroutine testGroup subroutine test_write_attributes ( path ) type ( hdf5_file ) :: h5f character ( * ), intent ( in ) :: path integer :: ierr call h5f % initialize ( path // '/test_attr.h5' ) call h5f % write ( '/x' , 1 ) call h5f % writeattr ( '/x' , 'note' , 'this is just a little number' , ierr ) if ( ierr /= 0 ) error stop call h5f % writeattr ( '/x' , 'foo' , 'hi' ) call h5f % finalize () end subroutine test_write_attributes subroutine test_writeExistingVariable ( path ) type ( hdf5_file ) :: h5f character ( * ), intent ( in ) :: path character (:), allocatable :: fn fn = path // '/overwrite.h5' call h5f % initialize ( fn , status = 'new' , action = 'w' ) call h5f % write ( '/scalar_int' , 42_int32 ) call h5f % write ( '/int1d' , [ 42_int32 , 1_int32 ]) call h5f % finalize () call h5f % initialize ( fn , status = 'old' , action = 'rw' ) call h5f % write ( '/scalar_int' , 100_int32 ) call h5f % write ( '/int1d' , [ 100_int32 , 10_int32 ]) call h5f % finalize () end subroutine test_writeExistingVariable end program","tags":"","loc":"sourcefile/test_hdf5_ifc.f90.html"},{"title":"test_lt.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~test_lt.f90~~EfferentGraph sourcefile~test_lt.f90 test_lt.f90 sourcefile~interface.f90 interface.f90 sourcefile~test_lt.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~test_lt.f90~~AfferentGraph sourcefile~test_lt.f90 test_lt.f90 sourcefile~test_hdf5_ifc.f90 test_hdf5_ifc.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_lt.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules test_lt Source Code test_lt.f90 Source Code module test_lt use h5fortran , only : h5write , h5read implicit none contains subroutine test_readwrite_lt ( path ) character ( * ), intent ( in ) :: path integer :: ierr , L , L1 ( 8 ), L2 ( 2 , 1 ), L3 ( 1 , 1 , 1 ), L4 ( 1 , 1 , 1 , 1 ), L5 ( 1 , 1 , 1 , 1 , 1 ), L6 ( 1 , 1 , 1 , 1 , 1 , 1 ), L7 ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) L = 123 L2 = L ; L3 = L ; L4 = L ; L5 = L ; L6 = L ; L7 = L call h5write ( path // '/scalar_int.h5' , '/int' , 42 ) call h5write ( path // '/golt.h5' , '/int32_0d' , 121242 , ierr ) if ( ierr /= 0 ) error stop 'lt file write' call h5read ( path // '/golt.h5' , '/int32_0d' , L ) if ( L /= 121242 ) error stop 'incorrect read value' ! --- 1d call h5write ( path // '/golt.h5' , '/int32_1d' , [ 1 , 2 , 3 , 4 , 5 , 6 ], ierr ) if ( ierr /= 0 ) error stop 'write 1d error' L1 = 0 call h5read ( path // '/golt.h5' , '/int32_1d' , L1 ( 2 : 7 ), ierr ) if ( ierr /= 0 ) error stop 'read 1d error' if (. not . all ( L1 ( 2 : 7 ) == [ 1 , 2 , 3 , 4 , 5 , 6 ])) error stop '1d slice read error' ! --- 2d call h5write ( path // '/golt.h5' , '/int32_2d' , L2 , ierr ) if ( ierr /= 0 ) error stop 'write 2d error' call h5read ( path // '/golt.h5' , '/int32_2d' , L2 , ierr ) if ( ierr /= 0 ) error stop 'read 2d error' ! --- 3d call h5write ( path // '/golt.h5' , '/int32_3d' , L3 , ierr ) if ( ierr /= 0 ) error stop 'write 3d error' call h5read ( path // '/golt.h5' , '/int32_3d' , L3 , ierr ) if ( ierr /= 0 ) error stop 'read 3d error' call h5write ( path // '/golt.h5' , '/int32_4d' , L4 , ierr ) if ( ierr /= 0 ) error stop 'write 4d error' call h5read ( path // '/golt.h5' , '/int32_4d' , L4 , ierr ) if ( ierr /= 0 ) error stop 'read 4d error' call h5write ( path // '/golt.h5' , '/int32_5d' , L5 , ierr ) if ( ierr /= 0 ) error stop 'write 5d error' call h5read ( path // '/golt.h5' , '/int32_5d' , L5 , ierr ) if ( ierr /= 0 ) error stop 'read 5d error' call h5write ( path // '/golt.h5' , '/int32_6d' , L6 , ierr ) if ( ierr /= 0 ) error stop 'write 6d error' call h5read ( path // '/golt.h5' , '/int32_6d' , L6 , ierr ) if ( ierr /= 0 ) error stop 'read 6d error' call h5write ( path // '/golt.h5' , '/int32_7d' , L7 , ierr ) if ( ierr /= 0 ) error stop 'write 7d error' call h5read ( path // '/golt.h5' , '/int32_7d' , L7 , ierr ) if ( ierr /= 0 ) error stop 'read 7d error' end subroutine test_readwrite_lt end module test_lt","tags":"","loc":"sourcefile/test_lt.f90.html"},{"title":"test_minimal.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"Contents Programs test_minimal Source Code test_minimal.f90 Source Code program test_minimal use hdf5 , only : HID_T , HSIZE_T , H5_INTEGER_KIND , h5kind_to_type , h5open_f , h5close_f , h5fclose_f , h5fcreate_f , H5F_ACC_TRUNC_F use h5lt , only : h5ltmake_dataset_f implicit none integer :: ierr , p integer ( HID_T ) :: lid character (:), allocatable :: filename character ( 256 ) :: argv integer :: i , l call get_command_argument ( 1 , argv , length = l , status = i ) if ( i /= 0 . or . l == 0 ) argv = './' filename = trim ( argv ) // '/junk_minimal.h5' print * , 'test path: ' , filename p = 42 call h5open_f ( ierr ) if ( ierr /= 0 ) error stop 'minimal: could not open hdf5 library' call h5fcreate_f ( filename , H5F_ACC_TRUNC_F , lid , ierr ) if ( ierr /= 0 ) error stop 'minimal: could not create file' print * , 'minimal: created ' // filename call h5ltmake_dataset_f ( lid , \"foo\" , rank ( p ), shape ( p , kind = HSIZE_T ), h5kind_to_type ( kind ( p ), H5_INTEGER_KIND ), p , ierr ) if ( ierr /= 0 ) error stop 'minimal: could not create dataset foo' print * , 'minimal: created variable' call h5fclose_f ( lid , ierr ) if ( ierr /= 0 ) error stop 'minimal: could not close file' print * , 'minimal: closed ' // filename call h5close_f ( ierr ) if ( ierr /= 0 ) error stop 'could not close hdf5 library' end program","tags":"","loc":"sourcefile/test_minimal.f90.html"},{"title":"test_scalar.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~test_scalar.f90~~EfferentGraph sourcefile~test_scalar.f90 test_scalar.f90 sourcefile~interface.f90 interface.f90 sourcefile~test_scalar.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~test_scalar.f90~~AfferentGraph sourcefile~test_scalar.f90 test_scalar.f90 sourcefile~test_hdf5_ifc.f90 test_hdf5_ifc.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_scalar.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules test_scalar Source Code test_scalar.f90 Source Code module test_scalar use , intrinsic :: iso_fortran_env , only : real32 , real64 , int32 , stderr => error_unit use hdf5 , only : HSIZE_T use h5fortran , only : hdf5_file implicit none contains subroutine test_scalar_rw ( path ) !! create a new HDF5 file type ( hdf5_file ) :: h5f character ( * ), intent ( in ) :: path real ( real32 ), allocatable :: rr1 (:) real ( real32 ) :: rt , r1 ( 4 ) integer ( int32 ) :: it , i1 ( 4 ) integer ( int32 ), allocatable :: i1t (:) integer ( HSIZE_T ), allocatable :: dims (:) integer :: i , ierr do i = 1 , size ( i1 ) i1 ( i ) = i enddo r1 = i1 call h5f % initialize ( path // '/test.h5' , ierr , status = 'new' , action = 'w' ) if ( ierr /= 0 ) error stop !! scalar tests call h5f % write ( '/scalar_int' , 42_int32 , ierr ) if ( ierr /= 0 ) error stop call h5f % write ( '/scalar_real' , 4 2._real32 , ierr ) if ( ierr /= 0 ) error stop call h5f % write ( '/real1' , r1 , ierr ) if ( ierr /= 0 ) error stop call h5f % write ( '/ai1' , i1 , ierr ) if ( ierr /= 0 ) error stop call h5f % finalize ( ierr ) if ( ierr /= 0 ) error stop call h5f % initialize ( path // '/test.h5' , ierr , status = 'old' , action = 'r' ) if ( ierr /= 0 ) error stop call h5f % read ( '/scalar_int' , it , ierr ) if ( ierr /= 0 ) error stop call h5f % read ( '/scalar_real' , rt , ierr ) if ( ierr /= 0 ) error stop if (. not .( rt == it . and . it == 42 )) then write ( stderr , * ) it , '/=' , rt error stop 'scalar real / int: not equal 42' endif call h5f % shape ( '/real1' , dims , ierr ) if ( ierr /= 0 ) error stop allocate ( rr1 ( dims ( 1 ))) call h5f % read ( '/real1' , rr1 , ierr ) if ( ierr /= 0 ) error stop if (. not . all ( r1 == rr1 )) error stop 'real 1-D: read does not match write' call h5f % shape ( '/ai1' , dims , ierr ) if ( ierr /= 0 ) error stop allocate ( i1t ( dims ( 1 ))) call h5f % read ( '/ai1' , i1t , ierr ) if ( ierr /= 0 ) error stop if (. not . all ( i1 == i1t )) error stop 'integer 1-D: read does not match write' if (. not . h5f % filename == path // '/test.h5' ) then write ( stderr , * ) h5f % filename // ' mismatch filename' error stop endif call h5f % finalize ( ierr ) if ( ierr /= 0 ) error stop end subroutine test_scalar_rw end module test_scalar","tags":"","loc":"sourcefile/test_scalar.f90.html"},{"title":"test_shape.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~test_shape.f90~~EfferentGraph sourcefile~test_shape.f90 test_shape.f90 sourcefile~interface.f90 interface.f90 sourcefile~test_shape.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs test_shape Source Code test_shape.f90 Source Code program test_shape !! This program shows how HDF5 dimension orders are distinct in different langauges use h5fortran , only : hdf5_file , hsize_t use , intrinsic :: iso_fortran_env , only : real64 , stdout => output_unit , stderr => error_unit implicit none type ( hdf5_file ) :: h5f character ( 1024 ) :: argv character (:), allocatable :: fn , dname integer ( HSIZE_T ), allocatable :: dims (:) integer :: ierr logical :: exists if ( command_argument_count () /= 2 ) error stop \"filename dset_name\" call get_command_argument ( 1 , argv ) fn = trim ( argv ) call get_command_argument ( 2 , argv ) dname = trim ( argv ) inquire ( file = fn , exist = exists ) if (. not . exists ) then write ( stderr , * ) fn // ' is not a file.' error stop 77 endif call h5f % initialize ( fn , ierr , status = 'old' , action = 'r' ) call h5f % shape ( dname , dims , ierr ) print '(/,A,100I8)' , 'Fortran dims: ' , dims call h5F % finalize ( ierr ) if ( ierr /= 0 ) error stop 'finalize' end program","tags":"","loc":"sourcefile/test_shape.f90.html"},{"title":"test_string.f90 – Object-oriented Fortran 2008 HDF5 interface","text":"This file depends on sourcefile~~test_string.f90~~EfferentGraph sourcefile~test_string.f90 test_string.f90 sourcefile~interface.f90 interface.f90 sourcefile~test_string.f90->sourcefile~interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~test_string.f90~~AfferentGraph sourcefile~test_string.f90 test_string.f90 sourcefile~test_hdf5_ifc.f90 test_hdf5_ifc.f90 sourcefile~test_hdf5_ifc.f90->sourcefile~test_string.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules test_string Source Code test_string.f90 Source Code module test_string use , intrinsic :: iso_fortran_env , only : stderr => error_unit use , intrinsic :: iso_c_binding , only : c_null_char use h5fortran , only : toLower , hdf5_file , strip_trailing_null , truncate_string_null implicit none contains subroutine test_lowercase () character ( * ), parameter :: hello = 'HeLl0 Th3rE !>? ' !! Fortran 2003 allocatable string if (. not .( toLower ( hello ) == 'hell0 th3re !>? ' )) error stop 'error: lowercase conversion' if (. not .( trim ( toLower ( hello )) == 'hell0 th3re !>?' )) error stop 'Allocatable lowercase conversion error' end subroutine test_lowercase subroutine test_strip_null () character ( * ), parameter :: hello = 'HeLl0 Th3rE !>? ' if (. not . strip_trailing_null ( hello // c_null_char ) == hello ) error stop 'problem stripping trailing null' end subroutine test_strip_null subroutine test_string_rw ( path ) type ( hdf5_file ) :: h5f character ( * ), intent ( in ) :: path character ( 2 ) :: value character ( 1024 ) :: val1k character (:), allocatable :: final call h5f % initialize ( path // '/test_string.h5' , status = 'replace' , action = 'w' ) print * , 'test_string_rw: write' call h5f % write ( '/little' , '42' ) call h5f % finalize () print * , 'test_string_rw: read' call h5f % initialize ( path // '/test_string.h5' , status = 'old' , action = 'r' ) call h5f % read ( '/little' , value ) if ( value /= '42' ) then write ( stderr , * ) 'test_string:  read/write verification failure. Value: ' // value error stop endif print * , 'test_string_rw: reading too much data' !! try reading too much data, then truncating to first C_NULL call h5f % read ( '/little' , val1k ) final = truncate_string_null ( val1k ) if ( len ( final ) /= 2 ) then write ( stderr , * ) 'trimming str to c_null did not work, got len() = ' , len ( final ) write ( stderr , * ) iachar ( final ( 3 : 3 )) error stop endif call h5f % finalize () end subroutine test_string_rw end module test_string","tags":"","loc":"sourcefile/test_string.f90.html"},{"title":"hdf5_file – Object-oriented Fortran 2008 HDF5 interface ","text":"type, public :: hdf5_file main type Contents Variables filename lid gid glid comp_lvl verbose debug libversion Type-Bound Procedures is_chunked is_contig exists exist chunks layout shape close open writeattr write_group finalize initialize write read hdf_read_7d hdf_read_6d hdf_read_5d hdf_read_4d hdf_read_3d hdf_read_2d hdf_read_1d hdf_read_scalar hdf_write_7d hdf_write_6d hdf_write_5d hdf_write_4d hdf_write_3d hdf_write_2d hdf_write_1d hdf_write_scalar Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: filename integer(kind=HID_T), public :: lid = 0 integer(kind=HID_T), public :: gid integer(kind=HID_T), public :: glid integer, public :: comp_lvl = 0 logical, public :: verbose = .true. logical, public :: debug = .false. integer, public :: libversion (3) Type-Bound Procedures procedure, public :: is_chunked => hdf_is_chunked initialize HDF5 file interface Submodules private module function hdf_is_chunked(self, dname) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical procedure, public :: is_contig => hdf_is_contig interface Submodules private module function hdf_is_contig(self, dname) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical procedure, public :: exists => hdf_check_exist interface Submodules private module function hdf_check_exist(self, dname) result(exists) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical procedure, public :: exist => hdf_check_exist interface Submodules private module function hdf_check_exist(self, dname) result(exists) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical procedure, public :: chunks => hdf_get_chunk interface Submodules private module subroutine hdf_get_chunk(self, dname, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=hsize_t), intent(out) :: chunk_size (:) procedure, public :: layout => hdf_get_layout interface Submodules private module function hdf_get_layout(self, dname) result(layout) Implementation → H5D_CONTIGUOUS_F, H5D_CHUNKED_F, H5D_VIRTUAL_F, H5D_COMPACT_F Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value integer procedure, public :: shape => hdf_get_shape interface Submodules private module subroutine hdf_get_shape(self, dname, dims, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) integer, intent(out), optional :: ierr procedure, public :: close => hdf_close_group interface Submodules private module subroutine hdf_close_group(self, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out), optional :: ierr procedure, public :: open => hdf_open_group interface Submodules private module subroutine hdf_open_group(self, gname, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname integer, intent(out), optional :: ierr procedure, public :: writeattr interface Submodules private module subroutine writeattr(self, dname, attr, attrval, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval integer, intent(out), optional :: ierr procedure, public :: write_group private subroutine write_group (self, gname, ierr) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname integer, intent(out), optional :: ierr procedure, public :: finalize => hdf_finalize private subroutine hdf_finalize (self, ierr) close hdf5 file\n  Close Fortran interface.\n sentinel lid Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out), optional :: ierr procedure, public :: initialize => hdf_initialize private subroutine hdf_initialize (self, filename, ierr, status, action, comp_lvl, verbose, debug) Opens hdf5 file Read more… Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: filename integer, intent(out), optional :: ierr character(len=*), intent(in), optional :: status character(len=*), intent(in), optional :: action integer, intent(in), optional :: comp_lvl logical, intent(in), optional :: verbose logical, intent(in), optional :: debug generic, public :: write => hdf_write_scalar , hdf_write_1d , hdf_write_2d , hdf_write_3d , hdf_write_4d , hdf_write_5d , hdf_write_6d , hdf_write_7d write group or dataset integer/real private interface hdf_write_scalar () Submodules Arguments None private interface hdf_write_1d () Submodules Arguments None private interface hdf_write_2d () Submodules Arguments None private interface hdf_write_3d () Submodules Arguments None private interface hdf_write_4d () Submodules Arguments None private interface hdf_write_5d () Submodules Arguments None private interface hdf_write_6d () Submodules Arguments None private interface hdf_write_7d () Submodules Arguments None generic, public :: read => hdf_read_scalar , hdf_read_1d , hdf_read_2d , hdf_read_3d , hdf_read_4d , hdf_read_5d , hdf_read_6d , hdf_read_7d read dataset integer/real private interface hdf_read_scalar () Submodules Arguments None private interface hdf_read_1d () Submodules Arguments None private interface hdf_read_2d () Submodules Arguments None private interface hdf_read_3d () Submodules Arguments None private interface hdf_read_4d () Submodules Arguments None private interface hdf_read_5d () Submodules Arguments None private interface hdf_read_6d () Submodules Arguments None private interface hdf_read_7d () Submodules Arguments None procedure, private :: hdf_read_7d private methods interface Submodules private module subroutine hdf_read_7d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride procedure, private :: hdf_read_6d interface Submodules private module subroutine hdf_read_6d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride procedure, private :: hdf_read_5d interface Submodules private module subroutine hdf_read_5d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride procedure, private :: hdf_read_4d interface Submodules private module subroutine hdf_read_4d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride procedure, private :: hdf_read_3d interface Submodules private module subroutine hdf_read_3d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride procedure, private :: hdf_read_2d interface Submodules private module subroutine hdf_read_2d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride procedure, private :: hdf_read_1d interface Submodules private module subroutine hdf_read_1d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride procedure, private :: hdf_read_scalar interface Submodules private module subroutine hdf_read_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(inout) :: value integer, intent(out), optional :: ierr procedure, private :: hdf_write_7d interface Submodules private module subroutine hdf_write_7d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) procedure, private :: hdf_write_6d interface Submodules private module subroutine hdf_write_6d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) procedure, private :: hdf_write_5d interface Submodules private module subroutine hdf_write_5d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) procedure, private :: hdf_write_4d interface Submodules private module subroutine hdf_write_4d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) procedure, private :: hdf_write_3d interface Submodules private module subroutine hdf_write_3d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) procedure, private :: hdf_write_2d interface Submodules private module subroutine hdf_write_2d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) procedure, private :: hdf_write_1d interface Submodules private module subroutine hdf_write_1d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out), optional :: ierr procedure, private :: hdf_write_scalar interface Submodules private module subroutine hdf_write_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out), optional :: ierr","tags":"","loc":"type/hdf5_file.html"},{"title":"foo – Object-oriented Fortran 2008 HDF5 interface ","text":"type :: foo Contents Variables i44 Components Type Visibility Attributes Name Initial integer, public :: i44 (4,4)","tags":"","loc":"type/foo.html"},{"title":"check – Object-oriented Fortran 2008 HDF5 interface","text":"public function check(ierr, msg) Arguments Type Intent Optional Attributes Name integer, intent(in) :: ierr character(len=*), intent(in) :: msg Return Value logical Called by proc~~check~~CalledByGraph proc~check check proc~lt3write lt3write proc~lt3write->proc~check proc~lt6write lt6write proc~lt6write->proc~check proc~hdf_close_group hdf_close_group proc~hdf_close_group->proc~check proc~lt1read lt1read proc~lt1read->proc~check proc~hdf_open_group hdf_open_group proc~hdf_open_group->proc~check proc~hdf_get_chunk hdf_get_chunk proc~hdf_get_chunk->proc~check proc~lt2write lt2write proc~lt2write->proc~check proc~lt4write lt4write proc~lt4write->proc~check proc~hdf_get_layout hdf_get_layout proc~hdf_get_layout->proc~check proc~write_group write_group proc~write_group->proc~check proc~lt7write lt7write proc~lt7write->proc~check proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->proc~check proc~hdf_setup_write hdf_setup_write proc~hdf_write_1d->proc~hdf_setup_write proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->proc~check proc~hdf_write_2d->proc~hdf_setup_write proc~writeattr writeattr proc~writeattr->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->proc~check proc~hdf_write_5d->proc~hdf_setup_write proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->proc~check proc~hdf_write_scalar->proc~hdf_setup_write proc~lt7read lt7read proc~lt7read->proc~check proc~lt5read lt5read proc~lt5read->proc~check proc~lt6read lt6read proc~lt6read->proc~check proc~lt0write lt0write proc~lt0write->proc~check proc~hdf_set_deflate->proc~check proc~lt0read lt0read proc~lt0read->proc~check proc~lt1write lt1write proc~lt1write->proc~check proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->proc~check proc~hdf_write_4d->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup proc~hdf_wrapup->proc~check proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->proc~check proc~hdf_write_7d->proc~hdf_setup_write proc~hdf_initialize hdf_initialize proc~hdf_initialize->proc~check proc~lt3read lt3read proc~lt3read->proc~check proc~hdf_shape_check->proc~check proc~hdf_write_8d hdf_write_8d proc~hdf_write_8d->proc~check proc~hdf_write_8d->proc~hdf_setup_write proc~hdf_write_8d->proc~hdf_wrapup proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->proc~check proc~hdf_write_3d->proc~hdf_setup_write proc~hdf_finalize hdf_finalize proc~hdf_finalize->proc~check proc~lt4read lt4read proc~lt4read->proc~check proc~lt2read lt2read proc~lt2read->proc~check proc~lt5write lt5write proc~lt5write->proc~check proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->proc~check proc~hdf_write_6d->proc~hdf_setup_write interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d interface~lt7write lt7write interface~lt7write->proc~lt7write interface~hdf_get_chunk hdf_get_chunk interface~hdf_get_chunk->proc~hdf_get_chunk interface~hdf_get_layout hdf_get_layout interface~hdf_get_layout->proc~hdf_get_layout proc~hdf_read_7d hdf_read_7d proc~hdf_read_7d->proc~hdf_shape_check interface~lt3write lt3write interface~lt3write->proc~lt3write proc~hdf_read_4d hdf_read_4d proc~hdf_read_4d->proc~hdf_shape_check interface~hdf_close_group hdf_close_group interface~hdf_close_group->proc~hdf_close_group interface~lt2write lt2write interface~lt2write->proc~lt2write interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~lt1write lt1write interface~lt1write->proc~lt1write interface~lt4write lt4write interface~lt4write->proc~lt4write interface~writeattr writeattr interface~writeattr->proc~writeattr interface~lt3read lt3read interface~lt3read->proc~lt3read interface~lt6read lt6read interface~lt6read->proc~lt6read proc~hdf_read_6d hdf_read_6d proc~hdf_read_6d->proc~hdf_shape_check proc~hdf_read_2d hdf_read_2d proc~hdf_read_2d->proc~hdf_shape_check interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d interface~lt2read lt2read interface~lt2read->proc~lt2read interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~lt0read lt0read interface~lt0read->proc~lt0read interface~lt6write lt6write interface~lt6write->proc~lt6write proc~hdf_read_5d hdf_read_5d proc~hdf_read_5d->proc~hdf_shape_check interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d proc~hdf_read_3d hdf_read_3d proc~hdf_read_3d->proc~hdf_shape_check interface~lt0write lt0write interface~lt0write->proc~lt0write proc~hdf_read_1d hdf_read_1d proc~hdf_read_1d->proc~hdf_shape_check interface~lt4read lt4read interface~lt4read->proc~lt4read interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_open_group hdf_open_group interface~hdf_open_group->proc~hdf_open_group interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~lt5write lt5write interface~lt5write->proc~lt5write interface~lt5read lt5read interface~lt5read->proc~lt5read proc~hdf_read_scalar hdf_read_scalar proc~hdf_read_scalar->proc~hdf_wrapup interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~lt1read lt1read interface~lt1read->proc~lt1read interface~lt7read lt7read interface~lt7read->proc~lt7read interface~hdf_read_2d hdf_read_2d interface~hdf_read_2d->proc~hdf_read_2d interface~hdf_read_3d hdf_read_3d interface~hdf_read_3d->proc~hdf_read_3d interface~h5write h5write interface~h5write->interface~lt7write interface~h5write->interface~lt3write interface~h5write->interface~lt2write interface~h5write->interface~lt1write interface~h5write->interface~lt4write interface~h5write->interface~lt6write interface~h5write->interface~lt0write interface~h5write->interface~lt5write interface~h5read h5read interface~h5read->interface~lt3read interface~h5read->interface~lt6read interface~h5read->interface~lt2read interface~h5read->interface~lt0read interface~h5read->interface~lt4read interface~h5read->interface~lt5read interface~h5read->interface~lt1read interface~h5read->interface~lt7read interface~hdf_read_4d hdf_read_4d interface~hdf_read_4d->proc~hdf_read_4d interface~hdf_read_5d hdf_read_5d interface~hdf_read_5d->proc~hdf_read_5d interface~hdf_read_1d hdf_read_1d interface~hdf_read_1d->proc~hdf_read_1d interface~hdf_read_scalar hdf_read_scalar interface~hdf_read_scalar->proc~hdf_read_scalar interface~hdf_read_6d hdf_read_6d interface~hdf_read_6d->proc~hdf_read_6d interface~hdf_read_7d hdf_read_7d interface~hdf_read_7d->proc~hdf_read_7d program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt var panproccheckCalledByGraph = svgPanZoom('#proccheckCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/check.html"},{"title":"hdf_initialize – Object-oriented Fortran 2008 HDF5 interface","text":"private subroutine hdf_initialize(self, filename, ierr, status, action, comp_lvl, verbose, debug) Opens hdf5 file Initialize FORTRAN interface.\n get library version Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: filename integer, intent(out), optional :: ierr character(len=*), intent(in), optional :: status character(len=*), intent(in), optional :: action integer, intent(in), optional :: comp_lvl logical, intent(in), optional :: verbose logical, intent(in), optional :: debug Calls proc~~hdf_initialize~~CallsGraph proc~hdf_initialize hdf_initialize proc~tolower toLower proc~hdf_initialize->proc~tolower h5get_libversion_f h5get_libversion_f proc~hdf_initialize->h5get_libversion_f h5eset_auto_f h5eset_auto_f proc~hdf_initialize->h5eset_auto_f h5open_f h5open_f proc~hdf_initialize->h5open_f h5fopen_f h5fopen_f proc~hdf_initialize->h5fopen_f proc~check check proc~hdf_initialize->proc~check h5fcreate_f h5fcreate_f proc~hdf_initialize->h5fcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_initialize.html"},{"title":"hdf_finalize – Object-oriented Fortran 2008 HDF5 interface","text":"private subroutine hdf_finalize(self, ierr) close hdf5 file\n  Close Fortran interface.\n sentinel lid Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out), optional :: ierr Calls proc~~hdf_finalize~~CallsGraph proc~hdf_finalize hdf_finalize h5fclose_f h5fclose_f proc~hdf_finalize->h5fclose_f proc~check check proc~hdf_finalize->proc~check h5close_f h5close_f proc~hdf_finalize->h5close_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_finalize.html"},{"title":"write_group – Object-oriented Fortran 2008 HDF5 interface","text":"private subroutine write_group(self, gname, ierr) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname integer, intent(out), optional :: ierr Calls proc~~write_group~~CallsGraph proc~write_group write_group h5gclose_f h5gclose_f proc~write_group->h5gclose_f proc~check check proc~write_group->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/write_group.html"},{"title":"hdf_wrapup – Object-oriented Fortran 2008 HDF5 interface","text":"public subroutine hdf_wrapup(did, sid, ierr) Arguments Type Intent Optional Attributes Name integer(kind=HID_T), intent(in) :: did integer(kind=HID_T), intent(in) :: sid integer, intent(out) :: ierr Calls proc~~hdf_wrapup~~CallsGraph proc~hdf_wrapup hdf_wrapup proc~check check proc~hdf_wrapup->proc~check h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_wrapup~~CalledByGraph proc~hdf_wrapup hdf_wrapup proc~hdf_write_8d hdf_write_8d proc~hdf_write_8d->proc~hdf_wrapup proc~hdf_read_scalar hdf_read_scalar proc~hdf_read_scalar->proc~hdf_wrapup interface~hdf_read_scalar hdf_read_scalar interface~hdf_read_scalar->proc~hdf_read_scalar Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_wrapup.html"},{"title":"hdf_get_slice – Object-oriented Fortran 2008 HDF5 interface","text":"public subroutine hdf_get_slice(self, dname, did, sid, mem_sid, ierr, i0, i1, i2) setup array slices for read and write\n iend stride compensate for 0-based hyperslab vs. 1-based Fortran Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=hid_t), intent(out) :: did integer(kind=hid_t), intent(out) :: sid integer(kind=hid_t), intent(out) :: mem_sid integer, intent(out) :: ierr class(*), intent(in), dimension(:) :: i0 class(*), intent(in), dimension(:) :: i1 class(*), intent(in), optional dimension(:) :: i2 Calls proc~~hdf_get_slice~~CallsGraph proc~hdf_get_slice hdf_get_slice h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_slice~~CalledByGraph proc~hdf_get_slice hdf_get_slice proc~hdf_read_4d hdf_read_4d proc~hdf_read_4d->proc~hdf_get_slice proc~hdf_read_5d hdf_read_5d proc~hdf_read_5d->proc~hdf_get_slice proc~hdf_read_3d hdf_read_3d proc~hdf_read_3d->proc~hdf_get_slice proc~hdf_read_6d hdf_read_6d proc~hdf_read_6d->proc~hdf_get_slice proc~hdf_read_1d hdf_read_1d proc~hdf_read_1d->proc~hdf_get_slice proc~hdf_read_7d hdf_read_7d proc~hdf_read_7d->proc~hdf_get_slice proc~hdf_read_2d hdf_read_2d proc~hdf_read_2d->proc~hdf_get_slice interface~hdf_read_2d hdf_read_2d interface~hdf_read_2d->proc~hdf_read_2d interface~hdf_read_3d hdf_read_3d interface~hdf_read_3d->proc~hdf_read_3d interface~hdf_read_4d hdf_read_4d interface~hdf_read_4d->proc~hdf_read_4d interface~hdf_read_5d hdf_read_5d interface~hdf_read_5d->proc~hdf_read_5d interface~hdf_read_1d hdf_read_1d interface~hdf_read_1d->proc~hdf_read_1d interface~hdf_read_6d hdf_read_6d interface~hdf_read_6d->proc~hdf_read_6d interface~hdf_read_7d hdf_read_7d interface~hdf_read_7d->proc~hdf_read_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_slice.html"},{"title":"hdf_shape_check – Object-oriented Fortran 2008 HDF5 interface","text":"public subroutine hdf_shape_check(self, dname, dims, ierr) check for matching rank, else bad reads can occur--doesn't always crash without this check\n check for matching size, else bad reads can occur. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(out) :: ierr Calls proc~~hdf_shape_check~~CallsGraph proc~hdf_shape_check hdf_shape_check proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_shape_check~~CalledByGraph proc~hdf_shape_check hdf_shape_check proc~hdf_read_4d hdf_read_4d proc~hdf_read_4d->proc~hdf_shape_check proc~hdf_read_5d hdf_read_5d proc~hdf_read_5d->proc~hdf_shape_check proc~hdf_setup_write hdf_setup_write proc~hdf_setup_write->proc~hdf_shape_check proc~hdf_read_3d hdf_read_3d proc~hdf_read_3d->proc~hdf_shape_check proc~hdf_read_6d hdf_read_6d proc~hdf_read_6d->proc~hdf_shape_check proc~hdf_read_1d hdf_read_1d proc~hdf_read_1d->proc~hdf_shape_check proc~hdf_read_7d hdf_read_7d proc~hdf_read_7d->proc~hdf_shape_check proc~hdf_read_2d hdf_read_2d proc~hdf_read_2d->proc~hdf_shape_check proc~hdf_write_8d hdf_write_8d proc~hdf_write_8d->proc~hdf_setup_write interface~hdf_read_2d hdf_read_2d interface~hdf_read_2d->proc~hdf_read_2d proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->proc~hdf_setup_write proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->proc~hdf_setup_write proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->proc~hdf_setup_write interface~hdf_read_3d hdf_read_3d interface~hdf_read_3d->proc~hdf_read_3d proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->proc~hdf_setup_write proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->proc~hdf_setup_write interface~hdf_read_4d hdf_read_4d interface~hdf_read_4d->proc~hdf_read_4d proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->proc~hdf_setup_write interface~hdf_read_1d hdf_read_1d interface~hdf_read_1d->proc~hdf_read_1d interface~hdf_read_5d hdf_read_5d interface~hdf_read_5d->proc~hdf_read_5d proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->proc~hdf_setup_write interface~hdf_read_6d hdf_read_6d interface~hdf_read_6d->proc~hdf_read_6d interface~hdf_read_7d hdf_read_7d interface~hdf_read_7d->proc~hdf_read_7d proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->proc~hdf_setup_write interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_shape_check.html"},{"title":"h5write – Object-oriented Fortran 2008 HDF5 interface","text":"public interface h5write Calls interface~~h5write~~CallsGraph interface~h5write h5write interface~lt3write lt3write interface~h5write->interface~lt3write interface~lt7write lt7write interface~h5write->interface~lt7write interface~lt1write lt1write interface~h5write->interface~lt1write interface~lt2write lt2write interface~h5write->interface~lt2write interface~lt4write lt4write interface~h5write->interface~lt4write interface~lt5write lt5write interface~h5write->interface~lt5write interface~lt0write lt0write interface~h5write->interface~lt0write interface~lt6write lt6write interface~h5write->interface~lt6write proc~lt3write lt3write interface~lt3write->proc~lt3write proc~lt7write lt7write interface~lt7write->proc~lt7write proc~lt1write lt1write interface~lt1write->proc~lt1write proc~lt2write lt2write interface~lt2write->proc~lt2write proc~lt4write lt4write interface~lt4write->proc~lt4write proc~lt5write lt5write interface~lt5write->proc~lt5write proc~lt0write lt0write interface~lt0write->proc~lt0write proc~lt6write lt6write interface~lt6write->proc~lt6write proc~check check proc~lt3write->proc~check proc~lt0write->proc~check proc~lt6write->proc~check proc~lt4write->proc~check proc~lt7write->proc~check proc~lt1write->proc~check proc~lt5write->proc~check proc~lt2write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~h5write~~CalledByGraph interface~h5write h5write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Module Procedures lt0write lt1write lt2write lt3write lt4write lt5write lt6write lt7write Module Procedures private interface lt0write () Submodules Arguments None private interface lt1write () Submodules Arguments None private interface lt2write () Submodules Arguments None private interface lt3write () Submodules Arguments None private interface lt4write () Submodules Arguments None private interface lt5write () Submodules Arguments None private interface lt6write () Submodules Arguments None private interface lt7write () Submodules Arguments None","tags":"","loc":"interface/h5write.html"},{"title":"h5read – Object-oriented Fortran 2008 HDF5 interface","text":"public interface h5read Calls interface~~h5read~~CallsGraph interface~h5read h5read interface~lt4read lt4read interface~h5read->interface~lt4read interface~lt2read lt2read interface~h5read->interface~lt2read interface~lt0read lt0read interface~h5read->interface~lt0read interface~lt3read lt3read interface~h5read->interface~lt3read interface~lt6read lt6read interface~h5read->interface~lt6read interface~lt5read lt5read interface~h5read->interface~lt5read interface~lt1read lt1read interface~h5read->interface~lt1read interface~lt7read lt7read interface~h5read->interface~lt7read proc~lt4read lt4read interface~lt4read->proc~lt4read proc~lt2read lt2read interface~lt2read->proc~lt2read proc~lt0read lt0read interface~lt0read->proc~lt0read proc~lt3read lt3read interface~lt3read->proc~lt3read proc~lt6read lt6read interface~lt6read->proc~lt6read proc~lt5read lt5read interface~lt5read->proc~lt5read proc~lt1read lt1read interface~lt1read->proc~lt1read proc~lt7read lt7read interface~lt7read->proc~lt7read proc~check check proc~lt0read->proc~check proc~lt3read->proc~check proc~lt1read->proc~check proc~lt4read->proc~check proc~lt2read->proc~check proc~lt7read->proc~check proc~lt5read->proc~check proc~lt6read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~h5read~~CalledByGraph interface~h5read h5read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Module Procedures lt0read lt1read lt2read lt3read lt4read lt5read lt6read lt7read Module Procedures private interface lt0read () Submodules Arguments None private interface lt1read () Submodules Arguments None private interface lt2read () Submodules Arguments None private interface lt3read () Submodules Arguments None private interface lt4read () Submodules Arguments None private interface lt5read () Submodules Arguments None private interface lt6read () Submodules Arguments None private interface lt7read () Submodules Arguments None","tags":"","loc":"interface/h5read.html"},{"title":"hdf_get_layout – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_layout~~CallsGraph interface~hdf_get_layout hdf_get_layout proc~hdf_get_layout hdf_get_layout interface~hdf_get_layout->proc~hdf_get_layout h5pget_layout_f h5pget_layout_f proc~hdf_get_layout->h5pget_layout_f h5dget_create_plist_f h5dget_create_plist_f proc~hdf_get_layout->h5dget_create_plist_f h5dopen_f h5dopen_f proc~hdf_get_layout->h5dopen_f h5dclose_f h5dclose_f proc~hdf_get_layout->h5dclose_f proc~check check proc~hdf_get_layout->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module function hdf_get_layout(self, dname) result(layout) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value integer Description H5D_CONTIGUOUS_F, H5D_CHUNKED_F, H5D_VIRTUAL_F, H5D_COMPACT_F","tags":"","loc":"interface/hdf_get_layout.html"},{"title":"hdf_check_exist – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_check_exist~~CallsGraph interface~hdf_check_exist hdf_check_exist proc~hdf_check_exist hdf_check_exist interface~hdf_check_exist->proc~hdf_check_exist h5ltpath_valid_f h5ltpath_valid_f proc~hdf_check_exist->h5ltpath_valid_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module function hdf_check_exist(self, dname) result(exists) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical","tags":"","loc":"interface/hdf_check_exist.html"},{"title":"hdf_is_contig – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_is_contig~~CallsGraph interface~hdf_is_contig hdf_is_contig proc~hdf_is_contig hdf_is_contig interface~hdf_is_contig->proc~hdf_is_contig Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module function hdf_is_contig(self, dname) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical","tags":"","loc":"interface/hdf_is_contig.html"},{"title":"hdf_is_chunked – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_is_chunked~~CallsGraph interface~hdf_is_chunked hdf_is_chunked proc~hdf_is_chunked hdf_is_chunked interface~hdf_is_chunked->proc~hdf_is_chunked Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module function hdf_is_chunked(self, dname) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical","tags":"","loc":"interface/hdf_is_chunked.html"},{"title":"lt0write – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt0write~~CallsGraph interface~lt0write lt0write proc~lt0write lt0write interface~lt0write->proc~lt0write proc~check check proc~lt0write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt0write~~CalledByGraph interface~lt0write lt0write interface~h5write h5write interface~h5write->interface~lt0write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt0write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt0write.html"},{"title":"lt1write – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt1write~~CallsGraph interface~lt1write lt1write proc~lt1write lt1write interface~lt1write->proc~lt1write proc~check check proc~lt1write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt1write~~CalledByGraph interface~lt1write lt1write interface~h5write h5write interface~h5write->interface~lt1write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt1write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt1write.html"},{"title":"lt2write – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt2write~~CallsGraph interface~lt2write lt2write proc~lt2write lt2write interface~lt2write->proc~lt2write proc~check check proc~lt2write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt2write~~CalledByGraph interface~lt2write lt2write interface~h5write h5write interface~h5write->interface~lt2write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt2write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt2write.html"},{"title":"lt3write – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt3write~~CallsGraph interface~lt3write lt3write proc~lt3write lt3write interface~lt3write->proc~lt3write proc~check check proc~lt3write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt3write~~CalledByGraph interface~lt3write lt3write interface~h5write h5write interface~h5write->interface~lt3write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt3write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt3write.html"},{"title":"lt4write – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt4write~~CallsGraph interface~lt4write lt4write proc~lt4write lt4write interface~lt4write->proc~lt4write proc~check check proc~lt4write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt4write~~CalledByGraph interface~lt4write lt4write interface~h5write h5write interface~h5write->interface~lt4write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt4write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt4write.html"},{"title":"lt5write – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt5write~~CallsGraph interface~lt5write lt5write proc~lt5write lt5write interface~lt5write->proc~lt5write proc~check check proc~lt5write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt5write~~CalledByGraph interface~lt5write lt5write interface~h5write h5write interface~h5write->interface~lt5write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt5write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt5write.html"},{"title":"lt6write – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt6write~~CallsGraph interface~lt6write lt6write proc~lt6write lt6write interface~lt6write->proc~lt6write proc~check check proc~lt6write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt6write~~CalledByGraph interface~lt6write lt6write interface~h5write h5write interface~h5write->interface~lt6write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt6write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt6write.html"},{"title":"lt7write – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt7write~~CallsGraph interface~lt7write lt7write proc~lt7write lt7write interface~lt7write->proc~lt7write proc~check check proc~lt7write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt7write~~CalledByGraph interface~lt7write lt7write interface~h5write h5write interface~h5write->interface~lt7write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt7write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt7write.html"},{"title":"lt0read – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt0read~~CallsGraph interface~lt0read lt0read proc~lt0read lt0read interface~lt0read->proc~lt0read proc~check check proc~lt0read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt0read~~CalledByGraph interface~lt0read lt0read interface~h5read h5read interface~h5read->interface~lt0read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt0read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt0read.html"},{"title":"lt1read – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt1read~~CallsGraph interface~lt1read lt1read proc~lt1read lt1read interface~lt1read->proc~lt1read proc~check check proc~lt1read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt1read~~CalledByGraph interface~lt1read lt1read interface~h5read h5read interface~h5read->interface~lt1read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt1read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt1read.html"},{"title":"lt2read – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt2read~~CallsGraph interface~lt2read lt2read proc~lt2read lt2read interface~lt2read->proc~lt2read proc~check check proc~lt2read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt2read~~CalledByGraph interface~lt2read lt2read interface~h5read h5read interface~h5read->interface~lt2read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt2read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt2read.html"},{"title":"lt3read – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt3read~~CallsGraph interface~lt3read lt3read proc~lt3read lt3read interface~lt3read->proc~lt3read proc~check check proc~lt3read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt3read~~CalledByGraph interface~lt3read lt3read interface~h5read h5read interface~h5read->interface~lt3read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt3read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt3read.html"},{"title":"lt4read – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt4read~~CallsGraph interface~lt4read lt4read proc~lt4read lt4read interface~lt4read->proc~lt4read proc~check check proc~lt4read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt4read~~CalledByGraph interface~lt4read lt4read interface~h5read h5read interface~h5read->interface~lt4read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt4read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt4read.html"},{"title":"lt5read – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt5read~~CallsGraph interface~lt5read lt5read proc~lt5read lt5read interface~lt5read->proc~lt5read proc~check check proc~lt5read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt5read~~CalledByGraph interface~lt5read lt5read interface~h5read h5read interface~h5read->interface~lt5read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt5read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt5read.html"},{"title":"lt6read – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt6read~~CallsGraph interface~lt6read lt6read proc~lt6read lt6read interface~lt6read->proc~lt6read proc~check check proc~lt6read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt6read~~CalledByGraph interface~lt6read lt6read interface~h5read h5read interface~h5read->interface~lt6read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt6read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt6read.html"},{"title":"lt7read – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~lt7read~~CallsGraph interface~lt7read lt7read proc~lt7read lt7read interface~lt7read->proc~lt7read proc~check check proc~lt7read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~lt7read~~CalledByGraph interface~lt7read lt7read interface~h5read h5read interface~h5read->interface~lt7read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine lt7read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/lt7read.html"},{"title":"hdf_write_scalar – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_scalar~~CallsGraph interface~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar proc~hdf_setup_write hdf_setup_write proc~hdf_write_scalar->proc~hdf_setup_write proc~check check proc~hdf_write_scalar->proc~check h5ltmake_dataset_string_f h5ltmake_dataset_string_f proc~hdf_write_scalar->h5ltmake_dataset_string_f proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f var paninterfacehdf_write_scalarCallsGraph = svgPanZoom('#interfacehdf_write_scalarCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_write_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out), optional :: ierr","tags":"","loc":"interface/hdf_write_scalar.html"},{"title":"hdf_write_1d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_1d~~CallsGraph interface~hdf_write_1d hdf_write_1d proc~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d proc~hdf_setup_write hdf_setup_write proc~hdf_write_1d->proc~hdf_setup_write proc~check check proc~hdf_write_1d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_write_1d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/hdf_write_1d.html"},{"title":"hdf_write_2d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_2d~~CallsGraph interface~hdf_write_2d hdf_write_2d proc~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d proc~hdf_setup_write hdf_setup_write proc~hdf_write_2d->proc~hdf_setup_write proc~check check proc~hdf_write_2d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_write_2d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value))","tags":"","loc":"interface/hdf_write_2d.html"},{"title":"hdf_write_3d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_3d~~CallsGraph interface~hdf_write_3d hdf_write_3d proc~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d proc~hdf_setup_write hdf_setup_write proc~hdf_write_3d->proc~hdf_setup_write proc~check check proc~hdf_write_3d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_write_3d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value))","tags":"","loc":"interface/hdf_write_3d.html"},{"title":"hdf_write_4d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_4d~~CallsGraph interface~hdf_write_4d hdf_write_4d proc~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d proc~hdf_setup_write hdf_setup_write proc~hdf_write_4d->proc~hdf_setup_write proc~check check proc~hdf_write_4d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_write_4d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value))","tags":"","loc":"interface/hdf_write_4d.html"},{"title":"hdf_write_5d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_5d~~CallsGraph interface~hdf_write_5d hdf_write_5d proc~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d proc~hdf_setup_write hdf_setup_write proc~hdf_write_5d->proc~hdf_setup_write proc~check check proc~hdf_write_5d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_write_5d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value))","tags":"","loc":"interface/hdf_write_5d.html"},{"title":"hdf_write_6d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_6d~~CallsGraph interface~hdf_write_6d hdf_write_6d proc~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d proc~hdf_setup_write hdf_setup_write proc~hdf_write_6d->proc~hdf_setup_write proc~check check proc~hdf_write_6d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_write_6d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value))","tags":"","loc":"interface/hdf_write_6d.html"},{"title":"hdf_write_7d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_write_7d~~CallsGraph interface~hdf_write_7d hdf_write_7d proc~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d proc~hdf_setup_write hdf_setup_write proc~hdf_write_7d->proc~hdf_setup_write proc~check check proc~hdf_write_7d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_write_7d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value))","tags":"","loc":"interface/hdf_write_7d.html"},{"title":"hdf_get_shape – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_shape~~CallsGraph interface~hdf_get_shape hdf_get_shape proc~hdf_get_shape hdf_get_shape interface~hdf_get_shape->proc~hdf_get_shape h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_shape->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_get_shape(self, dname, dims, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) integer, intent(out), optional :: ierr","tags":"","loc":"interface/hdf_get_shape.html"},{"title":"hdf_get_chunk – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_chunk~~CallsGraph interface~hdf_get_chunk hdf_get_chunk proc~hdf_get_chunk hdf_get_chunk interface~hdf_get_chunk->proc~hdf_get_chunk h5dget_create_plist_f h5dget_create_plist_f proc~hdf_get_chunk->h5dget_create_plist_f h5dopen_f h5dopen_f proc~hdf_get_chunk->h5dopen_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_get_chunk->h5ltget_dataset_ndims_f h5pget_chunk_f h5pget_chunk_f proc~hdf_get_chunk->h5pget_chunk_f h5dclose_f h5dclose_f proc~hdf_get_chunk->h5dclose_f proc~check check proc~hdf_get_chunk->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_get_chunk(self, dname, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=hsize_t), intent(out) :: chunk_size (:)","tags":"","loc":"interface/hdf_get_chunk.html"},{"title":"hdf_read_scalar – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_scalar~~CallsGraph interface~hdf_read_scalar hdf_read_scalar proc~hdf_read_scalar hdf_read_scalar interface~hdf_read_scalar->proc~hdf_read_scalar proc~hdf_wrapup hdf_wrapup proc~hdf_read_scalar->proc~hdf_wrapup h5ltread_dataset_string_f h5ltread_dataset_string_f proc~hdf_read_scalar->h5ltread_dataset_string_f h5dopen_f h5dopen_f proc~hdf_read_scalar->h5dopen_f h5dread_f h5dread_f proc~hdf_read_scalar->h5dread_f proc~check check proc~hdf_wrapup->proc~check h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_read_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(inout) :: value integer, intent(out), optional :: ierr","tags":"","loc":"interface/hdf_read_scalar.html"},{"title":"hdf_read_1d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_1d~~CallsGraph interface~hdf_read_1d hdf_read_1d proc~hdf_read_1d hdf_read_1d interface~hdf_read_1d->proc~hdf_read_1d proc~hdf_get_slice hdf_get_slice proc~hdf_read_1d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_1d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_1d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_read_1d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride","tags":"","loc":"interface/hdf_read_1d.html"},{"title":"hdf_read_2d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_2d~~CallsGraph interface~hdf_read_2d hdf_read_2d proc~hdf_read_2d hdf_read_2d interface~hdf_read_2d->proc~hdf_read_2d proc~hdf_get_slice hdf_get_slice proc~hdf_read_2d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_2d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_2d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_read_2d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride","tags":"","loc":"interface/hdf_read_2d.html"},{"title":"hdf_read_3d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_3d~~CallsGraph interface~hdf_read_3d hdf_read_3d proc~hdf_read_3d hdf_read_3d interface~hdf_read_3d->proc~hdf_read_3d proc~hdf_get_slice hdf_get_slice proc~hdf_read_3d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_3d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_3d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_read_3d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride","tags":"","loc":"interface/hdf_read_3d.html"},{"title":"hdf_read_4d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_4d~~CallsGraph interface~hdf_read_4d hdf_read_4d proc~hdf_read_4d hdf_read_4d interface~hdf_read_4d->proc~hdf_read_4d proc~hdf_get_slice hdf_get_slice proc~hdf_read_4d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_4d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_4d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_read_4d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride","tags":"","loc":"interface/hdf_read_4d.html"},{"title":"hdf_read_5d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_5d~~CallsGraph interface~hdf_read_5d hdf_read_5d proc~hdf_read_5d hdf_read_5d interface~hdf_read_5d->proc~hdf_read_5d proc~hdf_get_slice hdf_get_slice proc~hdf_read_5d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_5d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_5d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_read_5d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride","tags":"","loc":"interface/hdf_read_5d.html"},{"title":"hdf_read_6d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_6d~~CallsGraph interface~hdf_read_6d hdf_read_6d proc~hdf_read_6d hdf_read_6d interface~hdf_read_6d->proc~hdf_read_6d proc~hdf_get_slice hdf_get_slice proc~hdf_read_6d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_6d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_6d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_read_6d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride","tags":"","loc":"interface/hdf_read_6d.html"},{"title":"hdf_read_7d – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_read_7d~~CallsGraph interface~hdf_read_7d hdf_read_7d proc~hdf_read_7d hdf_read_7d interface~hdf_read_7d->proc~hdf_read_7d proc~hdf_get_slice hdf_get_slice proc~hdf_read_7d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_7d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_7d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_read_7d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride","tags":"","loc":"interface/hdf_read_7d.html"},{"title":"hdf_open_group – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_open_group~~CallsGraph interface~hdf_open_group hdf_open_group proc~hdf_open_group hdf_open_group interface~hdf_open_group->proc~hdf_open_group proc~check check proc~hdf_open_group->proc~check h5gopen_f h5gopen_f proc~hdf_open_group->h5gopen_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_open_group(self, gname, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname integer, intent(out), optional :: ierr","tags":"","loc":"interface/hdf_open_group.html"},{"title":"hdf_close_group – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~hdf_close_group~~CallsGraph interface~hdf_close_group hdf_close_group proc~hdf_close_group hdf_close_group interface~hdf_close_group->proc~hdf_close_group h5gclose_f h5gclose_f proc~hdf_close_group->h5gclose_f proc~check check proc~hdf_close_group->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine hdf_close_group(self, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out), optional :: ierr","tags":"","loc":"interface/hdf_close_group.html"},{"title":"writeattr – Object-oriented Fortran 2008 HDF5 interface","text":"interface Submodules Calls interface~~writeattr~~CallsGraph interface~writeattr writeattr proc~writeattr writeattr interface~writeattr->proc~writeattr h5ltset_attribute_string_f h5ltset_attribute_string_f proc~writeattr->h5ltset_attribute_string_f proc~check check proc~writeattr->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module subroutine writeattr(self, dname, attr, attrval, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval integer, intent(out), optional :: ierr","tags":"","loc":"interface/writeattr.html"},{"title":"toLower – Object-oriented Fortran 2008 HDF5 interface","text":"public pure function toLower(str) convert uppercase characters to lowercase can be trivially extended to non-ASCII\n Not elemental to support strict Fortran 2018 compliance Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=len(str)) Called by proc~~tolower~~CalledByGraph proc~tolower toLower proc~test_lowercase test_lowercase proc~test_lowercase->proc~tolower proc~hdf_initialize hdf_initialize proc~hdf_initialize->proc~tolower program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_lowercase Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/tolower.html"},{"title":"strip_trailing_null – Object-oriented Fortran 2008 HDF5 interface","text":"public pure function strip_trailing_null(str) result(stripped) strip trailing C null from strings Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=:),\n  allocatable Called by proc~~strip_trailing_null~~CalledByGraph proc~strip_trailing_null strip_trailing_null proc~test_strip_null test_strip_null proc~test_strip_null->proc~strip_trailing_null program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_strip_null Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/strip_trailing_null.html"},{"title":"truncate_string_null – Object-oriented Fortran 2008 HDF5 interface","text":"public pure function truncate_string_null(str) result(trunc) truncate string to C_null_char Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=:),\n  allocatable Called by proc~~truncate_string_null~~CalledByGraph proc~truncate_string_null truncate_string_null proc~test_string_rw test_string_rw proc~test_string_rw->proc~truncate_string_null program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_string_rw Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/truncate_string_null.html"},{"title":"hdf_setup_write – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine hdf_setup_write(self, dname, dtype, dims, sid, did, ierr, chunk_size) open dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=HID_T), intent(in) :: dtype integer(kind=HSIZE_T), intent(in) :: dims (:) integer(kind=HID_T), intent(out) :: sid integer(kind=HID_T), intent(out) :: did integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_setup_write~~CallsGraph proc~hdf_setup_write hdf_setup_write proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f proc~check check proc~hdf_setup_write->proc~check h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_setup_write~~CalledByGraph proc~hdf_setup_write hdf_setup_write proc~hdf_write_8d hdf_write_8d proc~hdf_write_8d->proc~hdf_setup_write proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->proc~hdf_setup_write proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->proc~hdf_setup_write proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->proc~hdf_setup_write proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->proc~hdf_setup_write proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->proc~hdf_setup_write proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->proc~hdf_setup_write proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->proc~hdf_setup_write proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->proc~hdf_setup_write interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_setup_write.html"},{"title":"hdf_set_deflate – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine hdf_set_deflate(self, dims, pid, ierr, chunk_size) guess chunk size, keeping in mind 1 Megabyte recommended maximum chunk size Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer(kind=HSIZE_T), intent(in) :: dims (:) integer(kind=HID_T), intent(out) :: pid integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_set_deflate~~CallsGraph proc~hdf_set_deflate hdf_set_deflate h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size proc~check check proc~hdf_set_deflate->proc~check h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_set_deflate~~CalledByGraph proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write hdf_setup_write proc~hdf_setup_write->proc~hdf_set_deflate proc~hdf_write_8d hdf_write_8d proc~hdf_write_8d->proc~hdf_setup_write proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->proc~hdf_setup_write proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->proc~hdf_setup_write proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->proc~hdf_setup_write proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->proc~hdf_setup_write proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->proc~hdf_setup_write proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->proc~hdf_setup_write proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->proc~hdf_setup_write proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->proc~hdf_setup_write interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_set_deflate.html"},{"title":"guess_chunk_size – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine guess_chunk_size(dims, chunk_size) based on https://github.com/h5py/h5py/blob/master/h5py/_hl/filters.py\n refer to https://support.hdfgroup.org/HDF5/Tutor/layout.html\n Repeatedly loop over the axes, dividing them by 2.\n Stop when:\n   1a. We're smaller than the target chunk size, OR\n   1b. We're within 50% of the target chunk size, AND\n    2. The chunk is smaller than the maximum chunk size Element size larger than CHUNK_MAX Arguments Type Intent Optional Attributes Name integer(kind=HSIZE_T), intent(in) :: dims (:) integer(kind=HSIZE_T), intent(out) :: chunk_size (:) Called by proc~~guess_chunk_size~~CalledByGraph proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate hdf_set_deflate proc~hdf_set_deflate->proc~guess_chunk_size proc~hdf_setup_write hdf_setup_write proc~hdf_setup_write->proc~hdf_set_deflate proc~hdf_write_8d hdf_write_8d proc~hdf_write_8d->proc~hdf_setup_write proc~hdf_write_1d hdf_write_1d proc~hdf_write_1d->proc~hdf_setup_write proc~hdf_write_4d hdf_write_4d proc~hdf_write_4d->proc~hdf_setup_write proc~hdf_write_2d hdf_write_2d proc~hdf_write_2d->proc~hdf_setup_write proc~hdf_write_3d hdf_write_3d proc~hdf_write_3d->proc~hdf_setup_write proc~hdf_write_7d hdf_write_7d proc~hdf_write_7d->proc~hdf_setup_write proc~hdf_write_5d hdf_write_5d proc~hdf_write_5d->proc~hdf_setup_write proc~hdf_write_scalar hdf_write_scalar proc~hdf_write_scalar->proc~hdf_setup_write proc~hdf_write_6d hdf_write_6d proc~hdf_write_6d->proc~hdf_setup_write interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/guess_chunk_size.html"},{"title":"getter – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine getter(A) Arguments Type Intent Optional Attributes Name integer, intent(out) :: A (2,2) Called by proc~~getter~~CalledByGraph proc~getter getter program~read_slice read_slice program~read_slice->proc~getter Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/getter.html"},{"title":"test_write_array – Object-oriented Fortran 2008 HDF5 interface","text":"public subroutine test_write_array(path) tests that compression doesn't fail for very small datasets, where it really shouldn't be used (makes file bigger)\n write test data\n test writing wrong size\n test writing wrong rank\n Read tests\n int32\n verify reading into larger array\n check error for reading array dimension mismatch\n check that 1D disk into 2D raises error Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Calls proc~~test_write_array~~CallsGraph proc~test_write_array test_write_array dims dims proc~test_write_array->dims Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~test_write_array~~CalledByGraph proc~test_write_array test_write_array program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_write_array Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_write_array.html"},{"title":"test_readwrite_array – Object-oriented Fortran 2008 HDF5 interface","text":"public subroutine test_readwrite_array(path, ng, nn, pn) more group Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path integer, intent(in) :: ng integer, intent(in) :: nn integer, intent(in) :: pn Called by proc~~test_readwrite_array~~CalledByGraph proc~test_readwrite_array test_readwrite_array program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_array Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_readwrite_array.html"},{"title":"test_hdf5_deflate – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine test_hdf5_deflate(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_hdf5_deflate~~CalledByGraph proc~test_hdf5_deflate test_hdf5_deflate program~test_deflate test_deflate program~test_deflate->proc~test_hdf5_deflate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_hdf5_deflate.html"},{"title":"test_nonexist_old_file – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine test_nonexist_old_file(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_nonexist_old_file~~CalledByGraph proc~test_nonexist_old_file test_nonexist_old_file program~test_error test_error program~test_error->proc~test_nonexist_old_file Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_nonexist_old_file.html"},{"title":"test_nonexist_unknown_file – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine test_nonexist_unknown_file(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_nonexist_unknown_file~~CalledByGraph proc~test_nonexist_unknown_file test_nonexist_unknown_file program~test_error test_error program~test_error->proc~test_nonexist_unknown_file Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_nonexist_unknown_file.html"},{"title":"test_nonhdf5_file – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine test_nonhdf5_file(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_nonhdf5_file~~CalledByGraph proc~test_nonhdf5_file test_nonhdf5_file program~test_error test_error program~test_error->proc~test_nonhdf5_file Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_nonhdf5_file.html"},{"title":"test_nonexist_variable – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine test_nonexist_variable(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_nonexist_variable~~CalledByGraph proc~test_nonexist_variable test_nonexist_variable program~test_error test_error program~test_error->proc~test_nonexist_variable Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_nonexist_variable.html"},{"title":"test_wrong_type – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine test_wrong_type(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_wrong_type~~CalledByGraph proc~test_wrong_type test_wrong_type program~test_error test_error program~test_error->proc~test_wrong_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_wrong_type.html"},{"title":"test_unknown_write – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine test_unknown_write(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_unknown_write~~CalledByGraph proc~test_unknown_write test_unknown_write program~test_error test_error program~test_error->proc~test_unknown_write Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_unknown_write.html"},{"title":"test_unknown_read – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine test_unknown_read(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_unknown_read~~CalledByGraph proc~test_unknown_read test_unknown_read program~test_error test_error program~test_error->proc~test_unknown_read Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_unknown_read.html"},{"title":"testGroup – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine testGroup(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~testgroup~~CalledByGraph proc~testgroup testGroup program~test_hdf5 test_hdf5 program~test_hdf5->proc~testgroup Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/testgroup.html"},{"title":"test_write_attributes – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine test_write_attributes(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_write_attributes~~CalledByGraph proc~test_write_attributes test_write_attributes program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_write_attributes Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_write_attributes.html"},{"title":"test_writeExistingVariable – Object-oriented Fortran 2008 HDF5 interface","text":"subroutine test_writeExistingVariable(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_writeexistingvariable~~CalledByGraph proc~test_writeexistingvariable test_writeExistingVariable program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_writeexistingvariable Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_writeexistingvariable.html"},{"title":"test_readwrite_lt – Object-oriented Fortran 2008 HDF5 interface","text":"public subroutine test_readwrite_lt(path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Calls proc~~test_readwrite_lt~~CallsGraph proc~test_readwrite_lt test_readwrite_lt interface~h5write h5write proc~test_readwrite_lt->interface~h5write interface~h5read h5read proc~test_readwrite_lt->interface~h5read interface~lt3write lt3write interface~h5write->interface~lt3write interface~lt7write lt7write interface~h5write->interface~lt7write interface~lt1write lt1write interface~h5write->interface~lt1write interface~lt2write lt2write interface~h5write->interface~lt2write interface~lt4write lt4write interface~h5write->interface~lt4write interface~lt5write lt5write interface~h5write->interface~lt5write interface~lt0write lt0write interface~h5write->interface~lt0write interface~lt6write lt6write interface~h5write->interface~lt6write interface~lt4read lt4read interface~h5read->interface~lt4read interface~lt2read lt2read interface~h5read->interface~lt2read interface~lt7read lt7read interface~h5read->interface~lt7read interface~lt0read lt0read interface~h5read->interface~lt0read interface~lt6read lt6read interface~h5read->interface~lt6read interface~lt3read lt3read interface~h5read->interface~lt3read interface~lt5read lt5read interface~h5read->interface~lt5read interface~lt1read lt1read interface~h5read->interface~lt1read proc~lt3write lt3write interface~lt3write->proc~lt3write proc~lt7write lt7write interface~lt7write->proc~lt7write proc~lt4read lt4read interface~lt4read->proc~lt4read proc~lt2read lt2read interface~lt2read->proc~lt2read proc~lt1write lt1write interface~lt1write->proc~lt1write proc~lt2write lt2write interface~lt2write->proc~lt2write proc~lt7read lt7read interface~lt7read->proc~lt7read proc~lt0read lt0read interface~lt0read->proc~lt0read proc~lt4write lt4write interface~lt4write->proc~lt4write proc~lt5write lt5write interface~lt5write->proc~lt5write proc~lt6read lt6read interface~lt6read->proc~lt6read proc~lt0write lt0write interface~lt0write->proc~lt0write proc~lt3read lt3read interface~lt3read->proc~lt3read proc~lt5read lt5read interface~lt5read->proc~lt5read proc~lt1read lt1read interface~lt1read->proc~lt1read proc~lt6write lt6write interface~lt6write->proc~lt6write proc~check check proc~lt3write->proc~check proc~lt0write->proc~check proc~lt6write->proc~check proc~lt4write->proc~check proc~lt7write->proc~check proc~lt1write->proc~check proc~lt0read->proc~check proc~lt3read->proc~check proc~lt1read->proc~check proc~lt4read->proc~check proc~lt2read->proc~check proc~lt6read->proc~check proc~lt7read->proc~check proc~lt5read->proc~check proc~lt5write->proc~check proc~lt2write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~test_readwrite_lt~~CalledByGraph proc~test_readwrite_lt test_readwrite_lt program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_readwrite_lt.html"},{"title":"test_scalar_rw – Object-oriented Fortran 2008 HDF5 interface","text":"public subroutine test_scalar_rw(path) create a new HDF5 file\n scalar tests Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Called by proc~~test_scalar_rw~~CalledByGraph proc~test_scalar_rw test_scalar_rw program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_scalar_rw Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_scalar_rw.html"},{"title":"test_lowercase – Object-oriented Fortran 2008 HDF5 interface","text":"public subroutine test_lowercase() Arguments None Calls proc~~test_lowercase~~CallsGraph proc~test_lowercase test_lowercase proc~tolower toLower proc~test_lowercase->proc~tolower Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~test_lowercase~~CalledByGraph proc~test_lowercase test_lowercase program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_lowercase Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_lowercase.html"},{"title":"test_strip_null – Object-oriented Fortran 2008 HDF5 interface","text":"public subroutine test_strip_null() Arguments None Calls proc~~test_strip_null~~CallsGraph proc~test_strip_null test_strip_null proc~strip_trailing_null strip_trailing_null proc~test_strip_null->proc~strip_trailing_null Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~test_strip_null~~CalledByGraph proc~test_strip_null test_strip_null program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_strip_null Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_strip_null.html"},{"title":"test_string_rw – Object-oriented Fortran 2008 HDF5 interface","text":"public subroutine test_string_rw(path) try reading too much data, then truncating to first C_NULL Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path Calls proc~~test_string_rw~~CallsGraph proc~test_string_rw test_string_rw proc~truncate_string_null truncate_string_null proc~test_string_rw->proc~truncate_string_null Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~test_string_rw~~CalledByGraph proc~test_string_rw test_string_rw program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_string_rw Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/test_string_rw.html"},{"title":"hdf_get_shape – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_get_shape module subroutine hdf_get_shape(self, dname, dims, ierr) Interface → must get dims before info, as \"dims\" must be allocated or segfault occurs. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) integer, intent(out), optional :: ierr Calls proc~~hdf_get_shape~~CallsGraph proc~hdf_get_shape hdf_get_shape h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_shape->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_shape~~CalledByGraph proc~hdf_get_shape hdf_get_shape interface~hdf_get_shape hdf_get_shape interface~hdf_get_shape->proc~hdf_get_shape Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_shape.html"},{"title":"hdf_get_chunk – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_get_chunk module subroutine hdf_get_chunk(self, dname, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=hsize_t), intent(out) :: chunk_size (:) Calls proc~~hdf_get_chunk~~CallsGraph proc~hdf_get_chunk hdf_get_chunk h5dget_create_plist_f h5dget_create_plist_f proc~hdf_get_chunk->h5dget_create_plist_f h5dopen_f h5dopen_f proc~hdf_get_chunk->h5dopen_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_get_chunk->h5ltget_dataset_ndims_f h5pget_chunk_f h5pget_chunk_f proc~hdf_get_chunk->h5pget_chunk_f h5dclose_f h5dclose_f proc~hdf_get_chunk->h5dclose_f proc~check check proc~hdf_get_chunk->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_chunk~~CalledByGraph proc~hdf_get_chunk hdf_get_chunk interface~hdf_get_chunk hdf_get_chunk interface~hdf_get_chunk->proc~hdf_get_chunk Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_chunk.html"},{"title":"hdf_get_layout – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_get_layout module function hdf_get_layout(self, dname) result(layout) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value integer Calls proc~~hdf_get_layout~~CallsGraph proc~hdf_get_layout hdf_get_layout h5pget_layout_f h5pget_layout_f proc~hdf_get_layout->h5pget_layout_f h5dget_create_plist_f h5dget_create_plist_f proc~hdf_get_layout->h5dget_create_plist_f h5dopen_f h5dopen_f proc~hdf_get_layout->h5dopen_f h5dclose_f h5dclose_f proc~hdf_get_layout->h5dclose_f proc~check check proc~hdf_get_layout->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_layout~~CalledByGraph proc~hdf_get_layout hdf_get_layout interface~hdf_get_layout hdf_get_layout interface~hdf_get_layout->proc~hdf_get_layout Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_layout.html"},{"title":"hdf_is_contig – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_is_contig module function hdf_is_contig(self, dname) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical Called by proc~~hdf_is_contig~~CalledByGraph proc~hdf_is_contig hdf_is_contig interface~hdf_is_contig hdf_is_contig interface~hdf_is_contig->proc~hdf_is_contig Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_is_contig.html"},{"title":"hdf_is_chunked – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_is_chunked module function hdf_is_chunked(self, dname) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical Called by proc~~hdf_is_chunked~~CalledByGraph proc~hdf_is_chunked hdf_is_chunked interface~hdf_is_chunked hdf_is_chunked interface~hdf_is_chunked->proc~hdf_is_chunked Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_is_chunked.html"},{"title":"hdf_check_exist – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_check_exist module function hdf_check_exist(self, dname) result(exists) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical Calls proc~~hdf_check_exist~~CallsGraph proc~hdf_check_exist hdf_check_exist h5ltpath_valid_f h5ltpath_valid_f proc~hdf_check_exist->h5ltpath_valid_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_check_exist~~CalledByGraph proc~hdf_check_exist hdf_check_exist interface~hdf_check_exist hdf_check_exist interface~hdf_check_exist->proc~hdf_check_exist Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_check_exist.html"},{"title":"hdf_read_scalar – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_read_scalar module subroutine hdf_read_scalar(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(inout) :: value integer, intent(out), optional :: ierr Calls proc~~hdf_read_scalar~~CallsGraph proc~hdf_read_scalar hdf_read_scalar proc~hdf_wrapup hdf_wrapup proc~hdf_read_scalar->proc~hdf_wrapup h5ltread_dataset_string_f h5ltread_dataset_string_f proc~hdf_read_scalar->h5ltread_dataset_string_f h5dopen_f h5dopen_f proc~hdf_read_scalar->h5dopen_f h5dread_f h5dread_f proc~hdf_read_scalar->h5dread_f proc~check check proc~hdf_wrapup->proc~check h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_scalar~~CalledByGraph proc~hdf_read_scalar hdf_read_scalar interface~hdf_read_scalar hdf_read_scalar interface~hdf_read_scalar->proc~hdf_read_scalar Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_scalar.html"},{"title":"hdf_read_1d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_read_1d module subroutine hdf_read_1d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride Calls proc~~hdf_read_1d~~CallsGraph proc~hdf_read_1d hdf_read_1d proc~hdf_get_slice hdf_get_slice proc~hdf_read_1d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_1d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_1d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_1d~~CalledByGraph proc~hdf_read_1d hdf_read_1d interface~hdf_read_1d hdf_read_1d interface~hdf_read_1d->proc~hdf_read_1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_1d.html"},{"title":"hdf_read_2d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_read_2d module subroutine hdf_read_2d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride Calls proc~~hdf_read_2d~~CallsGraph proc~hdf_read_2d hdf_read_2d proc~hdf_get_slice hdf_get_slice proc~hdf_read_2d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_2d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_2d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_2d~~CalledByGraph proc~hdf_read_2d hdf_read_2d interface~hdf_read_2d hdf_read_2d interface~hdf_read_2d->proc~hdf_read_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_2d.html"},{"title":"hdf_read_3d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_read_3d module subroutine hdf_read_3d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride Calls proc~~hdf_read_3d~~CallsGraph proc~hdf_read_3d hdf_read_3d proc~hdf_get_slice hdf_get_slice proc~hdf_read_3d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_3d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_3d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_3d~~CalledByGraph proc~hdf_read_3d hdf_read_3d interface~hdf_read_3d hdf_read_3d interface~hdf_read_3d->proc~hdf_read_3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_3d.html"},{"title":"hdf_read_4d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_read_4d module subroutine hdf_read_4d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride Calls proc~~hdf_read_4d~~CallsGraph proc~hdf_read_4d hdf_read_4d proc~hdf_get_slice hdf_get_slice proc~hdf_read_4d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_4d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_4d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_4d~~CalledByGraph proc~hdf_read_4d hdf_read_4d interface~hdf_read_4d hdf_read_4d interface~hdf_read_4d->proc~hdf_read_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_4d.html"},{"title":"hdf_read_5d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_read_5d module subroutine hdf_read_5d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride Calls proc~~hdf_read_5d~~CallsGraph proc~hdf_read_5d hdf_read_5d proc~hdf_get_slice hdf_get_slice proc~hdf_read_5d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_5d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_5d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_5d~~CalledByGraph proc~hdf_read_5d hdf_read_5d interface~hdf_read_5d hdf_read_5d interface~hdf_read_5d->proc~hdf_read_5d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_5d.html"},{"title":"hdf_read_6d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_read_6d module subroutine hdf_read_6d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride Calls proc~~hdf_read_6d~~CallsGraph proc~hdf_read_6d hdf_read_6d proc~hdf_get_slice hdf_get_slice proc~hdf_read_6d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_6d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_6d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_6d~~CalledByGraph proc~hdf_read_6d hdf_read_6d interface~hdf_read_6d hdf_read_6d interface~hdf_read_6d->proc~hdf_read_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_6d.html"},{"title":"hdf_read_7d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_read_7d module subroutine hdf_read_7d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride Calls proc~~hdf_read_7d~~CallsGraph proc~hdf_read_7d hdf_read_7d proc~hdf_get_slice hdf_get_slice proc~hdf_read_7d->proc~hdf_get_slice proc~hdf_shape_check hdf_shape_check proc~hdf_read_7d->proc~hdf_shape_check h5dread_f h5dread_f proc~hdf_read_7d->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_slice->h5dopen_f proc~check check proc~hdf_shape_check->proc~check h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_read_7d~~CalledByGraph proc~hdf_read_7d hdf_read_7d interface~hdf_read_7d hdf_read_7d interface~hdf_read_7d->proc~hdf_read_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_7d.html"},{"title":"lt0read – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt0read module subroutine lt0read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value integer, intent(out), optional :: ierr Calls proc~~lt0read~~CallsGraph proc~lt0read lt0read proc~check check proc~lt0read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt0read~~CalledByGraph proc~lt0read lt0read interface~lt0read lt0read interface~lt0read->proc~lt0read interface~h5read h5read interface~h5read->interface~lt0read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt0read.html"},{"title":"lt1read – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt1read module subroutine lt1read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out), optional :: ierr Calls proc~~lt1read~~CallsGraph proc~lt1read lt1read proc~check check proc~lt1read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt1read~~CalledByGraph proc~lt1read lt1read interface~lt1read lt1read interface~lt1read->proc~lt1read interface~h5read h5read interface~h5read->interface~lt1read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt1read.html"},{"title":"lt2read – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt2read module subroutine lt2read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out), optional :: ierr Calls proc~~lt2read~~CallsGraph proc~lt2read lt2read proc~check check proc~lt2read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt2read~~CalledByGraph proc~lt2read lt2read interface~lt2read lt2read interface~lt2read->proc~lt2read interface~h5read h5read interface~h5read->interface~lt2read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt2read.html"},{"title":"lt3read – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt3read module subroutine lt3read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out), optional :: ierr Calls proc~~lt3read~~CallsGraph proc~lt3read lt3read proc~check check proc~lt3read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt3read~~CalledByGraph proc~lt3read lt3read interface~lt3read lt3read interface~lt3read->proc~lt3read interface~h5read h5read interface~h5read->interface~lt3read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt3read.html"},{"title":"lt4read – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt4read module subroutine lt4read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out), optional :: ierr Calls proc~~lt4read~~CallsGraph proc~lt4read lt4read proc~check check proc~lt4read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt4read~~CalledByGraph proc~lt4read lt4read interface~lt4read lt4read interface~lt4read->proc~lt4read interface~h5read h5read interface~h5read->interface~lt4read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt4read.html"},{"title":"lt5read – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt5read module subroutine lt5read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr Calls proc~~lt5read~~CallsGraph proc~lt5read lt5read proc~check check proc~lt5read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt5read~~CalledByGraph proc~lt5read lt5read interface~lt5read lt5read interface~lt5read->proc~lt5read interface~h5read h5read interface~h5read->interface~lt5read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt5read.html"},{"title":"lt6read – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt6read module subroutine lt6read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr Calls proc~~lt6read~~CallsGraph proc~lt6read lt6read proc~check check proc~lt6read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt6read~~CalledByGraph proc~lt6read lt6read interface~lt6read lt6read interface~lt6read->proc~lt6read interface~h5read h5read interface~h5read->interface~lt6read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt6read.html"},{"title":"lt7read – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt7read module subroutine lt7read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr Calls proc~~lt7read~~CallsGraph proc~lt7read lt7read proc~check check proc~lt7read->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt7read~~CalledByGraph proc~lt7read lt7read interface~lt7read lt7read interface~lt7read->proc~lt7read interface~h5read h5read interface~h5read->interface~lt7read proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5read program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt7read.html"},{"title":"hdf_read_8d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_read_8d module procedure hdf_read_8d() Arguments None Calls proc~~hdf_read_8d~~CallsGraph proc~hdf_read_8d hdf_read_8d hdf_setup_read hdf_setup_read proc~hdf_read_8d->hdf_setup_read h5kind_to_type h5kind_to_type proc~hdf_read_8d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_read_8d.html"},{"title":"writeattr – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure writeattr module subroutine writeattr(self, dname, attr, attrval, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval integer, intent(out), optional :: ierr Calls proc~~writeattr~~CallsGraph proc~writeattr writeattr h5ltset_attribute_string_f h5ltset_attribute_string_f proc~writeattr->h5ltset_attribute_string_f proc~check check proc~writeattr->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~writeattr~~CalledByGraph proc~writeattr writeattr interface~writeattr writeattr interface~writeattr->proc~writeattr Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/writeattr.html"},{"title":"hdf_open_group – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_open_group module subroutine hdf_open_group(self, gname, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname integer, intent(out), optional :: ierr Calls proc~~hdf_open_group~~CallsGraph proc~hdf_open_group hdf_open_group proc~check check proc~hdf_open_group->proc~check h5gopen_f h5gopen_f proc~hdf_open_group->h5gopen_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_open_group~~CalledByGraph proc~hdf_open_group hdf_open_group interface~hdf_open_group hdf_open_group interface~hdf_open_group->proc~hdf_open_group Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_open_group.html"},{"title":"hdf_close_group – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_close_group module subroutine hdf_close_group(self, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out), optional :: ierr Calls proc~~hdf_close_group~~CallsGraph proc~hdf_close_group hdf_close_group h5gclose_f h5gclose_f proc~hdf_close_group->h5gclose_f proc~check check proc~hdf_close_group->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_close_group~~CalledByGraph proc~hdf_close_group hdf_close_group interface~hdf_close_group hdf_close_group interface~hdf_close_group->proc~hdf_close_group Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_close_group.html"},{"title":"hdf_write_scalar – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_write_scalar module subroutine hdf_write_scalar(self, dname, value, ierr) Interface → NOTE: 0d does not use chunk_size Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out), optional :: ierr Calls proc~~hdf_write_scalar~~CallsGraph proc~hdf_write_scalar hdf_write_scalar proc~hdf_setup_write hdf_setup_write proc~hdf_write_scalar->proc~hdf_setup_write proc~check check proc~hdf_write_scalar->proc~check h5ltmake_dataset_string_f h5ltmake_dataset_string_f proc~hdf_write_scalar->h5ltmake_dataset_string_f proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_scalar~~CalledByGraph proc~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar hdf_write_scalar interface~hdf_write_scalar->proc~hdf_write_scalar Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_scalar.html"},{"title":"hdf_write_1d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_write_1d module subroutine hdf_write_1d(self, dname, value, ierr) Interface → NOTE: 1d does not use chunk_size Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out), optional :: ierr Calls proc~~hdf_write_1d~~CallsGraph proc~hdf_write_1d hdf_write_1d proc~hdf_setup_write hdf_setup_write proc~hdf_write_1d->proc~hdf_setup_write proc~check check proc~hdf_write_1d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_1d~~CalledByGraph proc~hdf_write_1d hdf_write_1d interface~hdf_write_1d hdf_write_1d interface~hdf_write_1d->proc~hdf_write_1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_1d.html"},{"title":"hdf_write_2d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_write_2d module subroutine hdf_write_2d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) Calls proc~~hdf_write_2d~~CallsGraph proc~hdf_write_2d hdf_write_2d proc~hdf_setup_write hdf_setup_write proc~hdf_write_2d->proc~hdf_setup_write proc~check check proc~hdf_write_2d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_2d~~CalledByGraph proc~hdf_write_2d hdf_write_2d interface~hdf_write_2d hdf_write_2d interface~hdf_write_2d->proc~hdf_write_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_2d.html"},{"title":"hdf_write_3d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_write_3d module subroutine hdf_write_3d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) Calls proc~~hdf_write_3d~~CallsGraph proc~hdf_write_3d hdf_write_3d proc~hdf_setup_write hdf_setup_write proc~hdf_write_3d->proc~hdf_setup_write proc~check check proc~hdf_write_3d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_3d~~CalledByGraph proc~hdf_write_3d hdf_write_3d interface~hdf_write_3d hdf_write_3d interface~hdf_write_3d->proc~hdf_write_3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_3d.html"},{"title":"hdf_write_4d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_write_4d module subroutine hdf_write_4d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) Calls proc~~hdf_write_4d~~CallsGraph proc~hdf_write_4d hdf_write_4d proc~hdf_setup_write hdf_setup_write proc~hdf_write_4d->proc~hdf_setup_write proc~check check proc~hdf_write_4d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_4d~~CalledByGraph proc~hdf_write_4d hdf_write_4d interface~hdf_write_4d hdf_write_4d interface~hdf_write_4d->proc~hdf_write_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_4d.html"},{"title":"hdf_write_5d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_write_5d module subroutine hdf_write_5d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) Calls proc~~hdf_write_5d~~CallsGraph proc~hdf_write_5d hdf_write_5d proc~hdf_setup_write hdf_setup_write proc~hdf_write_5d->proc~hdf_setup_write proc~check check proc~hdf_write_5d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_5d~~CalledByGraph proc~hdf_write_5d hdf_write_5d interface~hdf_write_5d hdf_write_5d interface~hdf_write_5d->proc~hdf_write_5d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_5d.html"},{"title":"hdf_write_6d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_write_6d module subroutine hdf_write_6d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) Calls proc~~hdf_write_6d~~CallsGraph proc~hdf_write_6d hdf_write_6d proc~hdf_setup_write hdf_setup_write proc~hdf_write_6d->proc~hdf_setup_write proc~check check proc~hdf_write_6d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_6d~~CalledByGraph proc~hdf_write_6d hdf_write_6d interface~hdf_write_6d hdf_write_6d interface~hdf_write_6d->proc~hdf_write_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_6d.html"},{"title":"hdf_write_7d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_write_7d module subroutine hdf_write_7d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) Calls proc~~hdf_write_7d~~CallsGraph proc~hdf_write_7d hdf_write_7d proc~hdf_setup_write hdf_setup_write proc~hdf_write_7d->proc~hdf_setup_write proc~check check proc~hdf_write_7d->proc~check proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_write_7d~~CalledByGraph proc~hdf_write_7d hdf_write_7d interface~hdf_write_7d hdf_write_7d interface~hdf_write_7d->proc~hdf_write_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_7d.html"},{"title":"lt0write – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt0write module subroutine lt0write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out), optional :: ierr Calls proc~~lt0write~~CallsGraph proc~lt0write lt0write proc~check check proc~lt0write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt0write~~CalledByGraph proc~lt0write lt0write interface~lt0write lt0write interface~lt0write->proc~lt0write interface~h5write h5write interface~h5write->interface~lt0write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt0write.html"},{"title":"lt1write – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt1write module subroutine lt1write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out), optional :: ierr Calls proc~~lt1write~~CallsGraph proc~lt1write lt1write proc~check check proc~lt1write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt1write~~CalledByGraph proc~lt1write lt1write interface~lt1write lt1write interface~lt1write->proc~lt1write interface~h5write h5write interface~h5write->interface~lt1write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt1write.html"},{"title":"lt2write – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt2write module subroutine lt2write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out), optional :: ierr Calls proc~~lt2write~~CallsGraph proc~lt2write lt2write proc~check check proc~lt2write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt2write~~CalledByGraph proc~lt2write lt2write interface~lt2write lt2write interface~lt2write->proc~lt2write interface~h5write h5write interface~h5write->interface~lt2write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt2write.html"},{"title":"lt3write – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt3write module subroutine lt3write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out), optional :: ierr Calls proc~~lt3write~~CallsGraph proc~lt3write lt3write proc~check check proc~lt3write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt3write~~CalledByGraph proc~lt3write lt3write interface~lt3write lt3write interface~lt3write->proc~lt3write interface~h5write h5write interface~h5write->interface~lt3write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt3write.html"},{"title":"lt4write – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt4write module subroutine lt4write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out), optional :: ierr Calls proc~~lt4write~~CallsGraph proc~lt4write lt4write proc~check check proc~lt4write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt4write~~CalledByGraph proc~lt4write lt4write interface~lt4write lt4write interface~lt4write->proc~lt4write interface~h5write h5write interface~h5write->interface~lt4write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt4write.html"},{"title":"lt5write – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt5write module subroutine lt5write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr Calls proc~~lt5write~~CallsGraph proc~lt5write lt5write proc~check check proc~lt5write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt5write~~CalledByGraph proc~lt5write lt5write interface~lt5write lt5write interface~lt5write->proc~lt5write interface~h5write h5write interface~h5write->interface~lt5write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt5write.html"},{"title":"lt6write – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt6write module subroutine lt6write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr Calls proc~~lt6write~~CallsGraph proc~lt6write lt6write proc~check check proc~lt6write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt6write~~CalledByGraph proc~lt6write lt6write interface~lt6write lt6write interface~lt6write->proc~lt6write interface~h5write h5write interface~h5write->interface~lt6write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt6write.html"},{"title":"lt7write – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure lt7write module subroutine lt7write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr Calls proc~~lt7write~~CallsGraph proc~lt7write lt7write proc~check check proc~lt7write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~lt7write~~CalledByGraph proc~lt7write lt7write interface~lt7write lt7write interface~lt7write->proc~lt7write interface~h5write h5write interface~h5write->interface~lt7write program~test_exist test_exist program~test_exist->interface~h5write proc~test_readwrite_lt test_readwrite_lt proc~test_readwrite_lt->interface~h5write program~test_hdf5 test_hdf5 program~test_hdf5->proc~test_readwrite_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/lt7write.html"},{"title":"hdf_write_8d – Object-oriented Fortran 2008 HDF5 interface","text":"module procedure hdf_write_8d module procedure hdf_write_8d() Arguments None Calls proc~~hdf_write_8d~~CallsGraph proc~hdf_write_8d hdf_write_8d proc~hdf_wrapup hdf_wrapup proc~hdf_write_8d->proc~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_write_8d->h5kind_to_type proc~hdf_setup_write hdf_setup_write proc~hdf_write_8d->proc~hdf_setup_write h5dwrite_f h5dwrite_f proc~hdf_write_8d->h5dwrite_f proc~check check proc~hdf_write_8d->proc~check proc~hdf_wrapup->proc~check h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f proc~hdf_setup_write->proc~check proc~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->proc~hdf_set_deflate h5dopen_f h5dopen_f proc~hdf_setup_write->h5dopen_f h5ltpath_valid_f h5ltpath_valid_f proc~hdf_setup_write->h5ltpath_valid_f proc~hdf_shape_check hdf_shape_check proc~hdf_setup_write->proc~hdf_shape_check h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5pclose_f h5pclose_f proc~hdf_setup_write->h5pclose_f h5screate_f h5screate_f proc~hdf_setup_write->h5screate_f proc~hdf_set_deflate->proc~check h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f proc~guess_chunk_size guess_chunk_size proc~hdf_set_deflate->proc~guess_chunk_size h5pset_fletcher32_f h5pset_fletcher32_f proc~hdf_set_deflate->h5pset_fletcher32_f proc~hdf_shape_check->proc~check h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_shape_check->h5ltget_dataset_ndims_f h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_shape_check->h5ltget_dataset_info_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_write_8d.html"},{"title":"h5fortran – Object-oriented Fortran 2008 HDF5 interface","text":"HDF5 object-oriented polymorphic interface\n Workaround for Intel 19.1 / 2020 bug with /stand:f18\n error #6410: This name has not been declared as an array or a function.   [RANK] Uses iso_c_binding iso_fortran_env hdf5 h5lt string_utils module~~h5fortran~~UsesGraph module~h5fortran h5fortran iso_c_binding iso_c_binding module~h5fortran->iso_c_binding module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt iso_fortran_env iso_fortran_env module~h5fortran->iso_fortran_env hdf5 hdf5 module~h5fortran->hdf5 module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: read write module~~h5fortran~~UsedByGraph module~h5fortran h5fortran program~test_shape test_shape program~test_shape->module~h5fortran program~test_deflate test_deflate program~test_deflate->module~h5fortran program~test_hdf5 test_hdf5 program~test_hdf5->module~h5fortran module~test_lt test_lt program~test_hdf5->module~test_lt module~test_array test_array program~test_hdf5->module~test_array module~test_scalar test_scalar program~test_hdf5->module~test_scalar module~test_string test_string program~test_hdf5->module~test_string module~read read module~read->module~h5fortran program~test_error test_error program~test_error->module~h5fortran module~test_lt->module~h5fortran module~test_array->module~h5fortran module~write write module~write->module~h5fortran module~test_scalar->module~h5fortran program~test_exist test_exist program~test_exist->module~h5fortran module~test_string->module~h5fortran module~reader_lt reader_lt module~reader_lt->module~read module~writer writer module~writer->module~write module~writer_nd writer_ND module~writer_nd->module~write module~reader_nd reader_ND module~reader_nd->module~read module~writer_lt writer_lt module~writer_lt->module~write module~reader reader module~reader->module~read Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Interfaces h5write h5read hdf_get_layout hdf_check_exist hdf_is_contig hdf_is_chunked lt0write lt1write lt2write lt3write lt4write lt5write lt6write lt7write lt0read lt1read lt2read lt3read lt4read lt5read lt6read lt7read hdf_write_scalar hdf_write_1d hdf_write_2d hdf_write_3d hdf_write_4d hdf_write_5d hdf_write_6d hdf_write_7d hdf_get_shape hdf_get_chunk hdf_read_scalar hdf_read_1d hdf_read_2d hdf_read_3d hdf_read_4d hdf_read_5d hdf_read_6d hdf_read_7d hdf_open_group hdf_close_group writeattr Derived Types hdf5_file Functions check Subroutines hdf_initialize hdf_finalize write_group hdf_wrapup hdf_get_slice hdf_shape_check Interfaces public interface h5write private interface lt0write () Submodules Arguments None private interface lt1write () Submodules Arguments None private interface lt2write () Submodules Arguments None private interface lt3write () Submodules Arguments None private interface lt4write () Submodules Arguments None private interface lt5write () Submodules Arguments None private interface lt6write () Submodules Arguments None private interface lt7write () Submodules Arguments None public interface h5read private interface lt0read () Submodules Arguments None private interface lt1read () Submodules Arguments None private interface lt2read () Submodules Arguments None private interface lt3read () Submodules Arguments None private interface lt4read () Submodules Arguments None private interface lt5read () Submodules Arguments None private interface lt6read () Submodules Arguments None private interface lt7read () Submodules Arguments None interface Submodules private module function hdf_get_layout(self, dname) result(layout) Implementation → H5D_CONTIGUOUS_F, H5D_CHUNKED_F, H5D_VIRTUAL_F, H5D_COMPACT_F Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value integer interface Submodules private module function hdf_check_exist(self, dname) result(exists) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical interface Submodules private module function hdf_is_contig(self, dname) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical interface Submodules private module function hdf_is_chunked(self, dname) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical interface Submodules private module subroutine lt0write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out), optional :: ierr interface Submodules private module subroutine lt1write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt2write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt3write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt4write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt5write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt6write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt7write(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt0read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value integer, intent(out), optional :: ierr interface Submodules private module subroutine lt1read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt2read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt3read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt4read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt5read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt6read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine lt7read(filename, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr interface Submodules private module subroutine hdf_write_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out), optional :: ierr interface Submodules private module subroutine hdf_write_1d(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out), optional :: ierr interface Submodules private module subroutine hdf_write_2d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) interface Submodules private module subroutine hdf_write_3d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) interface Submodules private module subroutine hdf_write_4d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) interface Submodules private module subroutine hdf_write_5d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) interface Submodules private module subroutine hdf_write_6d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) interface Submodules private module subroutine hdf_write_7d(self, dname, value, ierr, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) interface Submodules private module subroutine hdf_get_shape(self, dname, dims, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) integer, intent(out), optional :: ierr interface Submodules private module subroutine hdf_get_chunk(self, dname, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=hsize_t), intent(out) :: chunk_size (:) interface Submodules private module subroutine hdf_read_scalar(self, dname, value, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(inout) :: value integer, intent(out), optional :: ierr interface Submodules private module subroutine hdf_read_1d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride interface Submodules private module subroutine hdf_read_2d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride interface Submodules private module subroutine hdf_read_3d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride interface Submodules private module subroutine hdf_read_4d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride interface Submodules private module subroutine hdf_read_5d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride interface Submodules private module subroutine hdf_read_6d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride interface Submodules private module subroutine hdf_read_7d(self, dname, value, ierr, istart, iend, stride) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride interface Submodules private module subroutine hdf_open_group(self, gname, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname integer, intent(out), optional :: ierr interface Submodules private module subroutine hdf_close_group(self, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out), optional :: ierr interface Submodules private module subroutine writeattr(self, dname, attr, attrval, ierr) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval integer, intent(out), optional :: ierr Derived Types type, public :: hdf5_file main type Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: filename integer(kind=HID_T), public :: lid = 0 integer(kind=HID_T), public :: gid integer(kind=HID_T), public :: glid integer, public :: comp_lvl = 0 logical, public :: verbose = .true. logical, public :: debug = .false. integer, public :: libversion (3) Type-Bound Procedures procedure, public :: is_chunked => hdf_is_chunked initialize HDF5 file procedure, public :: is_contig => hdf_is_contig procedure, public :: exists => hdf_check_exist procedure, public :: exist => hdf_check_exist procedure, public :: chunks => hdf_get_chunk procedure, public :: layout => hdf_get_layout procedure, public :: shape => hdf_get_shape procedure, public :: close => hdf_close_group procedure, public :: open => hdf_open_group procedure, public :: writeattr procedure, public :: write_group procedure, public :: finalize => hdf_finalize procedure, public :: initialize => hdf_initialize generic, public :: write => hdf_write_scalar, hdf_write_1d, hdf_write_2d, hdf_write_3d, hdf_write_4d, hdf_write_5d, hdf_write_6d, hdf_write_7d write group or dataset integer/real generic, public :: read => hdf_read_scalar, hdf_read_1d, hdf_read_2d, hdf_read_3d, hdf_read_4d, hdf_read_5d, hdf_read_6d, hdf_read_7d read dataset integer/real procedure, private :: hdf_read_7d private methods procedure, private :: hdf_read_6d procedure, private :: hdf_read_5d procedure, private :: hdf_read_4d procedure, private :: hdf_read_3d procedure, private :: hdf_read_2d procedure, private :: hdf_read_1d procedure, private :: hdf_read_scalar procedure, private :: hdf_write_7d procedure, private :: hdf_write_6d procedure, private :: hdf_write_5d procedure, private :: hdf_write_4d procedure, private :: hdf_write_3d procedure, private :: hdf_write_2d procedure, private :: hdf_write_1d procedure, private :: hdf_write_scalar Functions public function check (ierr, msg) Arguments Type Intent Optional Attributes Name integer, intent(in) :: ierr character(len=*), intent(in) :: msg Return Value logical Subroutines private subroutine hdf_initialize (self, filename, ierr, status, action, comp_lvl, verbose, debug) Opens hdf5 file Read more… Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: filename integer, intent(out), optional :: ierr character(len=*), intent(in), optional :: status character(len=*), intent(in), optional :: action integer, intent(in), optional :: comp_lvl logical, intent(in), optional :: verbose logical, intent(in), optional :: debug private subroutine hdf_finalize (self, ierr) close hdf5 file\n  Close Fortran interface.\n sentinel lid Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out), optional :: ierr private subroutine write_group (self, gname, ierr) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname integer, intent(out), optional :: ierr public subroutine hdf_wrapup (did, sid, ierr) Arguments Type Intent Optional Attributes Name integer(kind=HID_T), intent(in) :: did integer(kind=HID_T), intent(in) :: sid integer, intent(out) :: ierr public subroutine hdf_get_slice (self, dname, did, sid, mem_sid, ierr, i0, i1, i2) setup array slices for read and write\n iend Read more… Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=hid_t), intent(out) :: did integer(kind=hid_t), intent(out) :: sid integer(kind=hid_t), intent(out) :: mem_sid integer, intent(out) :: ierr class(*), intent(in), dimension(:) :: i0 class(*), intent(in), dimension(:) :: i1 class(*), intent(in), optional dimension(:) :: i2 public subroutine hdf_shape_check (self, dname, dims, ierr) check for matching rank, else bad reads can occur--doesn't always crash without this check\n check for matching size, else bad reads can occur. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(out) :: ierr","tags":"","loc":"module/h5fortran.html"},{"title":"string_utils – Object-oriented Fortran 2008 HDF5 interface","text":"Uses iso_c_binding module~~string_utils~~UsesGraph module~string_utils string_utils iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by module~~string_utils~~UsedByGraph module~string_utils string_utils module~h5fortran h5fortran module~h5fortran->module~string_utils program~test_shape test_shape program~test_shape->module~h5fortran program~test_deflate test_deflate program~test_deflate->module~h5fortran program~test_hdf5 test_hdf5 program~test_hdf5->module~h5fortran module~test_lt test_lt program~test_hdf5->module~test_lt module~test_array test_array program~test_hdf5->module~test_array module~test_scalar test_scalar program~test_hdf5->module~test_scalar module~test_string test_string program~test_hdf5->module~test_string module~read read module~read->module~h5fortran program~test_error test_error program~test_error->module~h5fortran module~test_lt->module~h5fortran module~test_array->module~h5fortran module~write write module~write->module~h5fortran module~test_scalar->module~h5fortran program~test_exist test_exist program~test_exist->module~h5fortran module~test_string->module~h5fortran module~reader_lt reader_lt module~reader_lt->module~read module~writer writer module~writer->module~write module~writer_nd writer_ND module~writer_nd->module~write module~reader_nd reader_ND module~reader_nd->module~read module~writer_lt writer_lt module~writer_lt->module~write module~reader reader module~reader->module~read Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Functions toLower strip_trailing_null truncate_string_null Functions public pure function toLower (str) convert uppercase characters to lowercase Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=len(str)) public pure function strip_trailing_null (str) result(stripped) strip trailing C null from strings Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=:),\n  allocatable public pure function truncate_string_null (str) result(trunc) truncate string to C_null_char Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=:),\n  allocatable","tags":"","loc":"module/string_utils.html"},{"title":"test_array – Object-oriented Fortran 2008 HDF5 interface","text":"Uses ieee_arithmetic iso_fortran_env h5fortran module~~test_array~~UsesGraph module~test_array test_array ieee_arithmetic ieee_arithmetic module~test_array->ieee_arithmetic iso_fortran_env iso_fortran_env module~test_array->iso_fortran_env module~h5fortran h5fortran module~test_array->module~h5fortran module~h5fortran->iso_fortran_env module~string_utils string_utils module~h5fortran->module~string_utils hdf5 hdf5 module~h5fortran->hdf5 h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by module~~test_array~~UsedByGraph module~test_array test_array program~test_hdf5 test_hdf5 program~test_hdf5->module~test_array Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Variables nan Subroutines test_write_array test_readwrite_array Variables Type Visibility Attributes Name Initial real(kind=real32), public :: nan Subroutines public subroutine test_write_array (path) tests that compression doesn't fail for very small datasets, where it really shouldn't be used (makes file bigger)\n write test data\n test writing wrong size\n test writing wrong rank\n Read tests\n int32\n verify reading into larger array\n check error for reading array dimension mismatch\n check that 1D disk into 2D raises error Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path public subroutine test_readwrite_array (path, ng, nn, pn) more group Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path integer, intent(in) :: ng integer, intent(in) :: nn integer, intent(in) :: pn","tags":"","loc":"module/test_array.html"},{"title":"test_lt – Object-oriented Fortran 2008 HDF5 interface","text":"Uses h5fortran module~~test_lt~~UsesGraph module~test_lt test_lt module~h5fortran h5fortran module~test_lt->module~h5fortran iso_c_binding iso_c_binding module~h5fortran->iso_c_binding module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt iso_fortran_env iso_fortran_env module~h5fortran->iso_fortran_env hdf5 hdf5 module~h5fortran->hdf5 module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by module~~test_lt~~UsedByGraph module~test_lt test_lt program~test_hdf5 test_hdf5 program~test_hdf5->module~test_lt Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Subroutines test_readwrite_lt Subroutines public subroutine test_readwrite_lt (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path","tags":"","loc":"module/test_lt.html"},{"title":"test_scalar – Object-oriented Fortran 2008 HDF5 interface","text":"Uses iso_fortran_env hdf5 h5fortran module~~test_scalar~~UsesGraph module~test_scalar test_scalar iso_fortran_env iso_fortran_env module~test_scalar->iso_fortran_env hdf5 hdf5 module~test_scalar->hdf5 module~h5fortran h5fortran module~test_scalar->module~h5fortran module~h5fortran->iso_fortran_env module~h5fortran->hdf5 module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by module~~test_scalar~~UsedByGraph module~test_scalar test_scalar program~test_hdf5 test_hdf5 program~test_hdf5->module~test_scalar Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Subroutines test_scalar_rw Subroutines public subroutine test_scalar_rw (path) create a new HDF5 file\n scalar tests Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path","tags":"","loc":"module/test_scalar.html"},{"title":"test_string – Object-oriented Fortran 2008 HDF5 interface","text":"Uses iso_fortran_env iso_c_binding h5fortran module~~test_string~~UsesGraph module~test_string test_string iso_fortran_env iso_fortran_env module~test_string->iso_fortran_env iso_c_binding iso_c_binding module~test_string->iso_c_binding module~h5fortran h5fortran module~test_string->module~h5fortran module~h5fortran->iso_fortran_env module~h5fortran->iso_c_binding module~string_utils string_utils module~h5fortran->module~string_utils hdf5 hdf5 module~h5fortran->hdf5 h5lt h5lt module~h5fortran->h5lt module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by module~~test_string~~UsedByGraph module~test_string test_string program~test_hdf5 test_hdf5 program~test_hdf5->module~test_string Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Subroutines test_lowercase test_strip_null test_string_rw Subroutines public subroutine test_lowercase () Arguments None public subroutine test_strip_null () Arguments None public subroutine test_string_rw (path) try reading too much data, then truncating to first C_NULL Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path","tags":"","loc":"module/test_string.html"},{"title":"read – Object-oriented Fortran 2008 HDF5 interface","text":"This submodule is for reading HDF5 via submodules Uses hdf5 H5LT Ancestors: h5fortran module~~read~~UsesGraph module~read read hdf5 hdf5 module~read->hdf5 H5LT H5LT module~read->H5LT module~h5fortran h5fortran module~read->module~h5fortran module~h5fortran->hdf5 module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding iso_fortran_env iso_fortran_env module~h5fortran->iso_fortran_env module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: reader reader_lt reader_ND module~~read~~UsedByGraph module~read read module~reader_lt reader_lt module~reader_lt->module~read module~reader_nd reader_ND module~reader_nd->module~read module~reader reader module~reader->module~read Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_get_shape hdf_get_chunk hdf_get_layout hdf_is_contig hdf_is_chunked hdf_check_exist Module Procedures module procedure hdf_get_shape module subroutine hdf_get_shape(self, dname, dims, ierr) Interface → must get dims before info, as \"dims\" must be allocated or segfault occurs. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) integer, intent(out), optional :: ierr module procedure hdf_get_chunk module subroutine hdf_get_chunk(self, dname, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=hsize_t), intent(out) :: chunk_size (:) module procedure hdf_get_layout module function hdf_get_layout(self, dname) result(layout) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value integer module procedure hdf_is_contig module function hdf_is_contig(self, dname) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical module procedure hdf_is_chunked module function hdf_is_chunked(self, dname) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical module procedure hdf_check_exist module function hdf_check_exist(self, dname) result(exists) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname Return Value logical","tags":"","loc":"module/read.html"},{"title":"reader – Object-oriented Fortran 2008 HDF5 interface","text":"This submodule is for reading 0-D..7-D data Uses hdf5 h5lt Ancestors: h5fortran : read module~~reader~~UsesGraph module~reader reader hdf5 hdf5 module~reader->hdf5 h5lt h5lt module~reader->h5lt module~read read module~reader->module~read module~read->hdf5 H5LT H5LT module~read->H5LT module~h5fortran h5fortran module~read->module~h5fortran module~h5fortran->hdf5 module~h5fortran->h5lt module~string_utils string_utils module~h5fortran->module~string_utils iso_c_binding iso_c_binding module~h5fortran->iso_c_binding iso_fortran_env iso_fortran_env module~h5fortran->iso_fortran_env module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_read_scalar hdf_read_1d hdf_read_2d hdf_read_3d hdf_read_4d hdf_read_5d hdf_read_6d hdf_read_7d Module Procedures module procedure hdf_read_scalar module subroutine hdf_read_scalar(self, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(inout) :: value integer, intent(out), optional :: ierr module procedure hdf_read_1d module subroutine hdf_read_1d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride module procedure hdf_read_2d module subroutine hdf_read_2d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride module procedure hdf_read_3d module subroutine hdf_read_3d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride module procedure hdf_read_4d module subroutine hdf_read_4d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride module procedure hdf_read_5d module subroutine hdf_read_5d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride module procedure hdf_read_6d module subroutine hdf_read_6d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride module procedure hdf_read_7d module subroutine hdf_read_7d(self, dname, value, ierr, istart, iend, stride) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional dimension(:) :: istart integer, intent(in), optional dimension(:) :: iend integer, intent(in), optional dimension(:) :: stride","tags":"","loc":"module/reader.html"},{"title":"reader_lt – Object-oriented Fortran 2008 HDF5 interface","text":"Uses Ancestors: h5fortran : read module~~reader_lt~~UsesGraph module~reader_lt reader_lt module~read read module~reader_lt->module~read hdf5 hdf5 module~read->hdf5 H5LT H5LT module~read->H5LT module~h5fortran h5fortran module~read->module~h5fortran module~h5fortran->hdf5 module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding iso_fortran_env iso_fortran_env module~h5fortran->iso_fortran_env module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures lt0read lt1read lt2read lt3read lt4read lt5read lt6read lt7read Module Procedures module procedure lt0read module subroutine lt0read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value integer, intent(out), optional :: ierr module procedure lt1read module subroutine lt1read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:) integer, intent(out), optional :: ierr module procedure lt2read module subroutine lt2read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:) integer, intent(out), optional :: ierr module procedure lt3read module subroutine lt3read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:) integer, intent(out), optional :: ierr module procedure lt4read module subroutine lt4read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:) integer, intent(out), optional :: ierr module procedure lt5read module subroutine lt5read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr module procedure lt6read module subroutine lt6read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr module procedure lt7read module subroutine lt7read(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(out) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"module/reader_lt.html"},{"title":"reader_ND – Object-oriented Fortran 2008 HDF5 interface","text":"Uses Ancestors: h5fortran : read module~~reader_nd~~UsesGraph module~reader_nd reader_ND module~read read module~reader_nd->module~read hdf5 hdf5 module~read->hdf5 H5LT H5LT module~read->H5LT module~h5fortran h5fortran module~read->module~h5fortran module~h5fortran->hdf5 module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding iso_fortran_env iso_fortran_env module~h5fortran->iso_fortran_env module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_read_8d Module Procedures module procedure hdf_read_8d module procedure hdf_read_8d() Arguments None","tags":"","loc":"module/reader_nd.html"},{"title":"write – Object-oriented Fortran 2008 HDF5 interface","text":"This submodule is for writing HDF5 data via child submodules Uses hdf5 H5LT Ancestors: h5fortran module~~write~~UsesGraph module~write write hdf5 hdf5 module~write->hdf5 H5LT H5LT module~write->H5LT module~h5fortran h5fortran module~write->module~h5fortran module~h5fortran->hdf5 module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding iso_fortran_env iso_fortran_env module~h5fortran->iso_fortran_env module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: writer writer_lt writer_ND module~~write~~UsedByGraph module~write write module~writer writer module~writer->module~write module~writer_lt writer_lt module~writer_lt->module~write module~writer_nd writer_ND module~writer_nd->module~write Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Subroutines hdf_setup_write hdf_set_deflate guess_chunk_size Module Procedures writeattr hdf_open_group hdf_close_group Subroutines subroutine hdf_setup_write (self, dname, dtype, dims, sid, did, ierr, chunk_size) open dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=HID_T), intent(in) :: dtype integer(kind=HSIZE_T), intent(in) :: dims (:) integer(kind=HID_T), intent(out) :: sid integer(kind=HID_T), intent(out) :: did integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) subroutine hdf_set_deflate (self, dims, pid, ierr, chunk_size) guess chunk size, keeping in mind 1 Megabyte recommended maximum chunk size Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer(kind=HSIZE_T), intent(in) :: dims (:) integer(kind=HID_T), intent(out) :: pid integer, intent(out) :: ierr integer, intent(in), optional :: chunk_size (:) subroutine guess_chunk_size (dims, chunk_size) based on https://github.com/h5py/h5py/blob/master/h5py/_hl/filters.py\n refer to https://support.hdfgroup.org/HDF5/Tutor/layout.html\n Repeatedly loop over the axes, dividing them by 2.\n Stop when:\n   1a. We're smaller than the target chunk size, OR\n   1b. We're within 50% of the target chunk size, AND\n    2. The chunk is smaller than the maximum chunk size Read more… Arguments Type Intent Optional Attributes Name integer(kind=HSIZE_T), intent(in) :: dims (:) integer(kind=HSIZE_T), intent(out) :: chunk_size (:) Module Procedures module procedure writeattr module subroutine writeattr(self, dname, attr, attrval, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval integer, intent(out), optional :: ierr module procedure hdf_open_group module subroutine hdf_open_group(self, gname, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname integer, intent(out), optional :: ierr module procedure hdf_close_group module subroutine hdf_close_group(self, ierr) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer, intent(out), optional :: ierr","tags":"","loc":"module/write.html"},{"title":"writer – Object-oriented Fortran 2008 HDF5 interface","text":"This submodule is for writing 0-D..7-D data Uses hdf5 Ancestors: h5fortran : write module~~writer~~UsesGraph module~writer writer hdf5 hdf5 module~writer->hdf5 module~write write module~writer->module~write module~write->hdf5 H5LT H5LT module~write->H5LT module~h5fortran h5fortran module~write->module~h5fortran module~h5fortran->hdf5 module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding iso_fortran_env iso_fortran_env module~h5fortran->iso_fortran_env module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_write_scalar hdf_write_1d hdf_write_2d hdf_write_3d hdf_write_4d hdf_write_5d hdf_write_6d hdf_write_7d Module Procedures module procedure hdf_write_scalar module subroutine hdf_write_scalar(self, dname, value, ierr) Interface → NOTE: 0d does not use chunk_size Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out), optional :: ierr module procedure hdf_write_1d module subroutine hdf_write_1d(self, dname, value, ierr) Interface → NOTE: 1d does not use chunk_size Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out), optional :: ierr module procedure hdf_write_2d module subroutine hdf_write_2d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) module procedure hdf_write_3d module subroutine hdf_write_3d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) module procedure hdf_write_4d module subroutine hdf_write_4d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) module procedure hdf_write_5d module subroutine hdf_write_5d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) module procedure hdf_write_6d module subroutine hdf_write_6d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value)) module procedure hdf_write_7d module subroutine hdf_write_7d(self, dname, value, ierr, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr integer, intent(in), optional :: chunk_size (rank(value))","tags":"","loc":"module/writer.html"},{"title":"writer_lt – Object-oriented Fortran 2008 HDF5 interface","text":"Uses Ancestors: h5fortran : write module~~writer_lt~~UsesGraph module~writer_lt writer_lt module~write write module~writer_lt->module~write hdf5 hdf5 module~write->hdf5 H5LT H5LT module~write->H5LT module~h5fortran h5fortran module~write->module~h5fortran module~h5fortran->hdf5 module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding iso_fortran_env iso_fortran_env module~h5fortran->iso_fortran_env module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures lt0write lt1write lt2write lt3write lt4write lt5write lt6write lt7write Module Procedures module procedure lt0write module subroutine lt0write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value integer, intent(out), optional :: ierr module procedure lt1write module subroutine lt1write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:) integer, intent(out), optional :: ierr module procedure lt2write module subroutine lt2write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:) integer, intent(out), optional :: ierr module procedure lt3write module subroutine lt3write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:) integer, intent(out), optional :: ierr module procedure lt4write module subroutine lt4write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:) integer, intent(out), optional :: ierr module procedure lt5write module subroutine lt5write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:) integer, intent(out), optional :: ierr module procedure lt6write module subroutine lt6write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:) integer, intent(out), optional :: ierr module procedure lt7write module subroutine lt7write(filename, dname, value, ierr) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: filename character(len=*), intent(in) :: dname class(*), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(out), optional :: ierr","tags":"","loc":"module/writer_lt.html"},{"title":"writer_ND – Object-oriented Fortran 2008 HDF5 interface","text":"Uses Ancestors: h5fortran : write module~~writer_nd~~UsesGraph module~writer_nd writer_ND module~write write module~writer_nd->module~write hdf5 hdf5 module~write->hdf5 H5LT H5LT module~write->H5LT module~h5fortran h5fortran module~write->module~h5fortran module~h5fortran->hdf5 module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding iso_fortran_env iso_fortran_env module~h5fortran->iso_fortran_env module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_write_8d Module Procedures module procedure hdf_write_8d module procedure hdf_write_8d() Arguments None","tags":"","loc":"module/writer_nd.html"},{"title":"read_slice – Object-oriented Fortran 2008 HDF5 interface","text":"example of Fortran reading smaller array into slice of larger array via subroutine\n should print\n -1 -1 -1 -1\n -1 -1  1  2\n -1 -1  3  4\n -1 -1 -1 -1 Calls program~~read_slice~~CallsGraph program~read_slice read_slice proc~getter getter program~read_slice->proc~getter Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i bigA B Derived Types foo Subroutines getter Variables Type Attributes Name Initial integer :: i integer :: bigA (4,4) type( foo ) :: B Derived Types type :: foo Components Type Visibility Attributes Name Initial integer, public :: i44 (4,4) Subroutines subroutine getter (A) Arguments Type Intent Optional Attributes Name integer, intent(out) :: A (2,2)","tags":"","loc":"program/read_slice.html"},{"title":"test_deflate – Object-oriented Fortran 2008 HDF5 interface","text":"Uses iso_fortran_env iso_c_binding h5fortran hdf5 program~~test_deflate~~UsesGraph program~test_deflate test_deflate iso_fortran_env iso_fortran_env program~test_deflate->iso_fortran_env hdf5 hdf5 program~test_deflate->hdf5 iso_c_binding iso_c_binding program~test_deflate->iso_c_binding module~h5fortran h5fortran program~test_deflate->module~h5fortran module~h5fortran->iso_fortran_env module~h5fortran->hdf5 module~h5fortran->iso_c_binding module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. unit tests and registration tests of HDF5 deflate compression write Calls program~~test_deflate~~CallsGraph program~test_deflate test_deflate proc~test_hdf5_deflate test_hdf5_deflate program~test_deflate->proc~test_hdf5_deflate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables path argv i l Subroutines test_hdf5_deflate Variables Type Attributes Name Initial character(len=:), allocatable :: path character(len=256) :: argv integer :: i integer :: l Subroutines subroutine test_hdf5_deflate (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path","tags":"","loc":"program/test_deflate.html"},{"title":"test_error – Object-oriented Fortran 2008 HDF5 interface","text":"Uses iso_fortran_env h5fortran program~~test_error~~UsesGraph program~test_error test_error iso_fortran_env iso_fortran_env program~test_error->iso_fortran_env module~h5fortran h5fortran program~test_error->module~h5fortran module~h5fortran->iso_fortran_env module~string_utils string_utils module~h5fortran->module~string_utils hdf5 hdf5 module~h5fortran->hdf5 h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Calls program~~test_error~~CallsGraph program~test_error test_error proc~test_nonexist_old_file test_nonexist_old_file program~test_error->proc~test_nonexist_old_file proc~test_nonexist_variable test_nonexist_variable program~test_error->proc~test_nonexist_variable proc~test_unknown_write test_unknown_write program~test_error->proc~test_unknown_write proc~test_nonexist_unknown_file test_nonexist_unknown_file program~test_error->proc~test_nonexist_unknown_file proc~test_nonhdf5_file test_nonhdf5_file program~test_error->proc~test_nonhdf5_file proc~test_wrong_type test_wrong_type program~test_error->proc~test_wrong_type proc~test_unknown_read test_unknown_read program~test_error->proc~test_unknown_read Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables h5f path argv i l Subroutines test_nonexist_old_file test_nonexist_unknown_file test_nonhdf5_file test_nonexist_variable test_wrong_type test_unknown_write test_unknown_read Variables Type Attributes Name Initial type( hdf5_file ) :: h5f character(len=:), allocatable :: path character(len=256) :: argv integer :: i integer :: l Subroutines subroutine test_nonexist_old_file (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path subroutine test_nonexist_unknown_file (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path subroutine test_nonhdf5_file (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path subroutine test_nonexist_variable (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path subroutine test_wrong_type (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path subroutine test_unknown_write (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path subroutine test_unknown_read (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path","tags":"","loc":"program/test_error.html"},{"title":"test_exist – Object-oriented Fortran 2008 HDF5 interface","text":"Uses iso_fortran_env h5fortran program~~test_exist~~UsesGraph program~test_exist test_exist iso_fortran_env iso_fortran_env program~test_exist->iso_fortran_env module~h5fortran h5fortran program~test_exist->module~h5fortran module~h5fortran->iso_fortran_env module~string_utils string_utils module~h5fortran->module~string_utils hdf5 hdf5 module~h5fortran->hdf5 h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. test \"exist\" variable Calls program~~test_exist~~CallsGraph program~test_exist test_exist interface~h5write h5write program~test_exist->interface~h5write interface~lt3write lt3write interface~h5write->interface~lt3write interface~lt7write lt7write interface~h5write->interface~lt7write interface~lt1write lt1write interface~h5write->interface~lt1write interface~lt2write lt2write interface~h5write->interface~lt2write interface~lt4write lt4write interface~h5write->interface~lt4write interface~lt5write lt5write interface~h5write->interface~lt5write interface~lt0write lt0write interface~h5write->interface~lt0write interface~lt6write lt6write interface~h5write->interface~lt6write proc~lt3write lt3write interface~lt3write->proc~lt3write proc~lt7write lt7write interface~lt7write->proc~lt7write proc~lt1write lt1write interface~lt1write->proc~lt1write proc~lt2write lt2write interface~lt2write->proc~lt2write proc~lt4write lt4write interface~lt4write->proc~lt4write proc~lt5write lt5write interface~lt5write->proc~lt5write proc~lt0write lt0write interface~lt0write->proc~lt0write proc~lt6write lt6write interface~lt6write->proc~lt6write proc~check check proc~lt3write->proc~check proc~lt0write->proc~check proc~lt6write->proc~check proc~lt4write->proc~check proc~lt7write->proc~check proc~lt1write->proc~check proc~lt5write->proc~check proc~lt2write->proc~check Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables h path argv i l Variables Type Attributes Name Initial type( hdf5_file ) :: h character(len=:), allocatable :: path character(len=256) :: argv integer :: i integer :: l","tags":"","loc":"program/test_exist.html"},{"title":"test_hdf5 – Object-oriented Fortran 2008 HDF5 interface","text":"Uses iso_fortran_env h5fortran test_lt test_array test_scalar test_string program~~test_hdf5~~UsesGraph program~test_hdf5 test_hdf5 iso_fortran_env iso_fortran_env program~test_hdf5->iso_fortran_env module~test_lt test_lt program~test_hdf5->module~test_lt module~test_array test_array program~test_hdf5->module~test_array module~test_scalar test_scalar program~test_hdf5->module~test_scalar module~test_string test_string program~test_hdf5->module~test_string module~h5fortran h5fortran program~test_hdf5->module~h5fortran module~test_lt->module~h5fortran module~test_array->iso_fortran_env module~test_array->module~h5fortran ieee_arithmetic ieee_arithmetic module~test_array->ieee_arithmetic module~test_scalar->iso_fortran_env module~test_scalar->module~h5fortran hdf5 hdf5 module~test_scalar->hdf5 module~test_string->iso_fortran_env module~test_string->module~h5fortran iso_c_binding iso_c_binding module~test_string->iso_c_binding module~h5fortran->iso_fortran_env module~h5fortran->iso_c_binding module~string_utils string_utils module~h5fortran->module~string_utils h5lt h5lt module~h5fortran->h5lt module~h5fortran->hdf5 module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. unit tests and registration tests of HDF5 OO interface Calls program~~test_hdf5~~CallsGraph program~test_hdf5 test_hdf5 proc~test_write_array test_write_array program~test_hdf5->proc~test_write_array proc~test_write_attributes test_write_attributes program~test_hdf5->proc~test_write_attributes proc~testgroup testGroup program~test_hdf5->proc~testgroup proc~test_writeexistingvariable test_writeExistingVariable program~test_hdf5->proc~test_writeexistingvariable proc~test_strip_null test_strip_null program~test_hdf5->proc~test_strip_null proc~test_lowercase test_lowercase program~test_hdf5->proc~test_lowercase proc~test_readwrite_lt test_readwrite_lt program~test_hdf5->proc~test_readwrite_lt proc~test_string_rw test_string_rw program~test_hdf5->proc~test_string_rw proc~test_scalar_rw test_scalar_rw program~test_hdf5->proc~test_scalar_rw proc~test_readwrite_array test_readwrite_array program~test_hdf5->proc~test_readwrite_array dims dims proc~test_write_array->dims proc~strip_trailing_null strip_trailing_null proc~test_strip_null->proc~strip_trailing_null proc~tolower toLower proc~test_lowercase->proc~tolower interface~h5write h5write proc~test_readwrite_lt->interface~h5write interface~h5read h5read proc~test_readwrite_lt->interface~h5read proc~truncate_string_null truncate_string_null proc~test_string_rw->proc~truncate_string_null interface~lt3write lt3write interface~h5write->interface~lt3write interface~lt7write lt7write interface~h5write->interface~lt7write interface~lt1write lt1write interface~h5write->interface~lt1write interface~lt2write lt2write interface~h5write->interface~lt2write interface~lt4write lt4write interface~h5write->interface~lt4write interface~lt5write lt5write interface~h5write->interface~lt5write interface~lt0write lt0write interface~h5write->interface~lt0write interface~lt6write lt6write interface~h5write->interface~lt6write interface~lt4read lt4read interface~h5read->interface~lt4read interface~lt2read lt2read interface~h5read->interface~lt2read interface~lt7read lt7read interface~h5read->interface~lt7read interface~lt0read lt0read interface~h5read->interface~lt0read interface~lt6read lt6read interface~h5read->interface~lt6read interface~lt3read lt3read interface~h5read->interface~lt3read interface~lt5read lt5read interface~h5read->interface~lt5read interface~lt1read lt1read interface~h5read->interface~lt1read proc~lt3write lt3write interface~lt3write->proc~lt3write proc~lt7write lt7write interface~lt7write->proc~lt7write proc~lt4read lt4read interface~lt4read->proc~lt4read proc~lt2read lt2read interface~lt2read->proc~lt2read proc~lt1write lt1write interface~lt1write->proc~lt1write proc~lt2write lt2write interface~lt2write->proc~lt2write proc~lt7read lt7read interface~lt7read->proc~lt7read proc~lt0read lt0read interface~lt0read->proc~lt0read proc~lt4write lt4write interface~lt4write->proc~lt4write proc~lt5write lt5write interface~lt5write->proc~lt5write proc~lt6read lt6read interface~lt6read->proc~lt6read proc~lt0write lt0write interface~lt0write->proc~lt0write proc~lt3read lt3read interface~lt3read->proc~lt3read proc~lt5read lt5read interface~lt5read->proc~lt5read proc~lt1read lt1read interface~lt1read->proc~lt1read proc~lt6write lt6write interface~lt6write->proc~lt6write proc~check check proc~lt3write->proc~check proc~lt0write->proc~check proc~lt6write->proc~check proc~lt4write->proc~check proc~lt7write->proc~check proc~lt1write->proc~check proc~lt0read->proc~check proc~lt3read->proc~check proc~lt1read->proc~check proc~lt4read->proc~check proc~lt2read->proc~check proc~lt6read->proc~check proc~lt7read->proc~check proc~lt5read->proc~check proc~lt5write->proc~check proc~lt2write->proc~check var panprogramtest_hdf5CallsGraph = svgPanZoom('#programtest_hdf5CallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables path argv i l Subroutines testGroup test_write_attributes test_writeExistingVariable Variables Type Attributes Name Initial character(len=:), allocatable :: path character(len=256) :: argv integer :: i integer :: l Subroutines subroutine testGroup (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path subroutine test_write_attributes (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path subroutine test_writeExistingVariable (path) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: path","tags":"","loc":"program/test_hdf5.html"},{"title":"test_minimal – Object-oriented Fortran 2008 HDF5 interface","text":"Uses hdf5 h5lt program~~test_minimal~~UsesGraph program~test_minimal test_minimal hdf5 hdf5 program~test_minimal->hdf5 h5lt h5lt program~test_minimal->h5lt Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Calls program~~test_minimal~~CallsGraph program~test_minimal test_minimal h5close_f h5close_f program~test_minimal->h5close_f h5kind_to_type h5kind_to_type program~test_minimal->h5kind_to_type h5open_f h5open_f program~test_minimal->h5open_f h5fclose_f h5fclose_f program~test_minimal->h5fclose_f h5fcreate_f h5fcreate_f program~test_minimal->h5fcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables ierr p lid filename argv i l Variables Type Attributes Name Initial integer :: ierr integer :: p integer(kind=HID_T) :: lid character(len=:), allocatable :: filename character(len=256) :: argv integer :: i integer :: l","tags":"","loc":"program/test_minimal.html"},{"title":"test_shape – Object-oriented Fortran 2008 HDF5 interface","text":"Uses h5fortran iso_fortran_env program~~test_shape~~UsesGraph program~test_shape test_shape module~h5fortran h5fortran program~test_shape->module~h5fortran iso_fortran_env iso_fortran_env program~test_shape->iso_fortran_env module~h5fortran->iso_fortran_env module~string_utils string_utils module~h5fortran->module~string_utils hdf5 hdf5 module~h5fortran->hdf5 h5lt h5lt module~h5fortran->h5lt iso_c_binding iso_c_binding module~h5fortran->iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. This program shows how HDF5 dimension orders are distinct in different langauges Contents Variables h5f argv fn dname dims ierr exists Variables Type Attributes Name Initial type( hdf5_file ) :: h5f character(len=1024) :: argv character(len=:), allocatable :: fn character(len=:), allocatable :: dname integer(kind=HSIZE_T), allocatable :: dims (:) integer :: ierr logical :: exists","tags":"","loc":"program/test_shape.html"}]}