var tipuesearch = {"pages":[{"title":" object-oriented Fortran 2018 HDF5 interface ","text":"object-oriented Fortran 2018 HDF5 interface Developer Info Michael Hirsch, Ph.D. SciVision, Inc.","tags":"home","loc":"index.html"},{"title":"hdf5_interface.f90 – object-oriented Fortran 2018 HDF5 interface","text":"This file depends on sourcefile~~hdf5_interface.f90~~EfferentGraph sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~hdf5_interface.f90~~AfferentGraph sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~read.f90 read.f90 sourcefile~read.f90->sourcefile~hdf5_interface.f90 sourcefile~write.f90 write.f90 sourcefile~write.f90->sourcefile~hdf5_interface.f90 sourcefile~read_int.f90 read_int.f90 sourcefile~read_int.f90->sourcefile~read.f90 sourcefile~write_int.f90 write_int.f90 sourcefile~write_int.f90->sourcefile~write.f90 sourcefile~write_real32.f90 write_real32.f90 sourcefile~write_real32.f90->sourcefile~write.f90 sourcefile~read_real32.f90 read_real32.f90 sourcefile~read_real32.f90->sourcefile~read.f90 sourcefile~read_real64.f90 read_real64.f90 sourcefile~read_real64.f90->sourcefile~read.f90 sourcefile~write_real64.f90 write_real64.f90 sourcefile~write_real64.f90->sourcefile~write.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules hdf5_interface Source Code hdf5_interface.f90 Source Code module hdf5_interface !! HDF5 object-oriented polymorphic interface use , intrinsic :: iso_fortran_env , only : real32 , real64 , int32 , stderr => error_unit use H5LT , only : HID_T , SIZE_T , HSIZE_T , H5F_ACC_RDONLY_F , H5F_ACC_RDWR_F , H5F_ACC_TRUNC_F , & h5open_f , h5close_f , h5gcreate_f , h5gclose_f , h5fopen_f , h5fcreate_f , h5fclose_f , h5lexists_f use string_utils , only : toLower , strip_trailing_null implicit none !> main type type :: hdf5_file character (:), allocatable :: filename integer ( HID_T ) :: lid , & !< location identifier gid , & !< group identifier glid , & !< group location identifier sid , did , pid integer :: comp_lvl = 0 !< compression level (1-9)  0: disable compression integer ( HSIZE_T ) :: chunk_size ( 7 ) = [ 64 , 64 , 1 , 1 , 1 , 1 , 1 ] !< chunk size per dimension (arbitrary) logical :: verbose = . false . contains !> initialize HDF5 file procedure , public :: initialize => hdf_initialize , finalize => hdf_finalize , writeattr , & open => hdf_open_group , close => hdf_close_group , shape => hdf_get_shape !> add group or dataset integer/real generic , public :: add => & hdf_add_group , hdf_add_int , hdf_add_int_1d , hdf_add_int_2d , hdf_add_int_3d , hdf_add_int_5d , hdf_add_int_6d , hdf_add_int_7d ,& hdf_add_real32 , hdf_add_real32_1d , hdf_add_real32_2d , hdf_add_real32_3d , & hdf_add_real32_4d , hdf_add_real32_5d , hdf_add_real32_6d , hdf_add_real32_7d , & hdf_add_real64 , hdf_add_real64_1d , hdf_add_real64_2d , hdf_add_real64_3d , & hdf_add_real64_4d , hdf_add_real64_5d , hdf_add_real64_6d , hdf_add_real64_7d , & hdf_add_string !> get dataset integer/real generic , public :: get => & hdf_get_int , hdf_get_int_1d , hdf_get_int_2d , hdf_get_int_3d , hdf_get_int_4d , hdf_get_int_5d , hdf_get_int_6d , hdf_get_int_7d ,& hdf_get_real32 , hdf_get_real32_1d , hdf_get_real32_2d , hdf_get_real32_3d , & hdf_get_real32_4d , hdf_get_real32_5d , hdf_get_real32_6d , hdf_get_real32_7d , & hdf_get_real64 , hdf_get_real64_1d , hdf_get_real64_2d , hdf_get_real64_3d , & hdf_get_real64_4d , hdf_get_real64_5d , hdf_get_real64_6d , hdf_get_real64_7d , & hdf_get_string !> private methods procedure , private :: hdf_add_group , & hdf_add_int , hdf_add_int_1d , hdf_add_int_2d , hdf_add_int_3d , hdf_add_int_4d , hdf_add_int_5d , hdf_add_int_6d , hdf_add_int_7d , & hdf_get_int , hdf_get_int_1d , hdf_get_int_2d , hdf_get_int_3d , hdf_get_int_4d , hdf_get_int_5d , hdf_get_int_6d , hdf_get_int_7d , & hdf_add_real32 , hdf_add_real32_1d , hdf_add_real32_2d , hdf_add_real32_3d , & hdf_add_real32_4d , hdf_add_real32_5d , hdf_add_real32_6d , hdf_add_real32_7d , & hdf_add_real64 , hdf_add_real64_1d , hdf_add_real64_2d , hdf_add_real64_3d , & hdf_add_real64_4d , hdf_add_real64_5d , hdf_add_real64_6d , hdf_add_real64_7d , & hdf_get_real32 , hdf_get_real32_1d , hdf_get_real32_2d , hdf_get_real32_3d , & hdf_get_real32_4d , hdf_get_real32_5d , hdf_get_real32_6d , hdf_get_real32_7d , & hdf_get_real64 , hdf_get_real64_1d , hdf_get_real64_2d , hdf_get_real64_3d , & hdf_get_real64_4d , hdf_get_real64_5d , hdf_get_real64_6d , hdf_get_real64_7d , & hdf_add_string , hdf_get_string end type hdf5_file !> Submodules interface module subroutine hdf_setup_write ( self , dname , dtype , dims , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname integer ( HID_T ), intent ( in ) :: dtype integer ( HSIZE_T ), intent ( in ) :: dims (:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_setup_write module subroutine hdf_wrapup ( self ) class ( hdf5_file ), intent ( in ) :: self end subroutine hdf_wrapup module subroutine hdf_set_deflate ( self , dims ) class ( hdf5_file ), intent ( inout ) :: self integer ( HSIZE_T ), intent ( in ) :: dims (:) end subroutine hdf_set_deflate module subroutine hdf_add_string ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname , value end subroutine hdf_add_string module subroutine hdf_add_int ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( in ) :: value end subroutine hdf_add_int module subroutine hdf_add_int_1d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( in ) :: value (:) end subroutine hdf_add_int_1d module subroutine hdf_add_int_2d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( in ) :: value (:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_int_2d module subroutine hdf_add_int_3d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( in ) :: value (:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_int_3d module subroutine hdf_add_int_4d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname integer , intent ( in ) :: value (:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_int_4d module subroutine hdf_add_int_5d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( in ) :: value (:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_int_5d module subroutine hdf_add_int_6d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( in ) :: value (:,:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_int_6d module subroutine hdf_add_int_7d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( in ) :: value (:,:,:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_int_7d module subroutine hdf_add_real64 ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( in ) :: value end subroutine hdf_add_real64 module subroutine hdf_add_real64_1d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( in ) :: value (:) end subroutine hdf_add_real64_1d module subroutine hdf_add_real64_2d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( in ) :: value (:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real64_2d module subroutine hdf_add_real64_3d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( in ) :: value (:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real64_3d module subroutine hdf_add_real64_4d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( in ) :: value (:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real64_4d module subroutine hdf_add_real64_5d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( in ) :: value (:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real64_5d module subroutine hdf_add_real64_6d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( in ) :: value (:,:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real64_6d module subroutine hdf_add_real64_7d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( in ) :: value (:,:,:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real64_7d module subroutine hdf_add_real32 ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( in ) :: value end subroutine hdf_add_real32 module subroutine hdf_add_real32_1d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( in ) :: value (:) end subroutine hdf_add_real32_1d module subroutine hdf_add_real32_2d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( in ) :: value (:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real32_2d module subroutine hdf_add_real32_3d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( in ) :: value (:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real32_3d module subroutine hdf_add_real32_4d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( in ) :: value (:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real32_4d module subroutine hdf_add_real32_5d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( in ) :: value (:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real32_5d module subroutine hdf_add_real32_6d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( in ) :: value (:,:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real32_6d module subroutine hdf_add_real32_7d ( self , dname , value , chunk_size ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( in ) :: value (:,:,:,:,:,:,:) integer , intent ( in ), optional :: chunk_size (:) end subroutine hdf_add_real32_7d module subroutine hdf_get_shape ( self , dname , dims ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( HSIZE_T ), intent ( out ), allocatable :: dims (:) end subroutine hdf_get_shape module subroutine hdf_get_string ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname character ( * ), intent ( out ) :: value end subroutine hdf_get_string module subroutine hdf_get_int ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( out ) :: value end subroutine hdf_get_int module subroutine hdf_get_int_1d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( out ), allocatable :: value (:) end subroutine hdf_get_int_1d module subroutine hdf_get_int_2d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( out ), allocatable :: value (:,:) end subroutine hdf_get_int_2d module subroutine hdf_get_int_3d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( out ), allocatable :: value (:,:,:) end subroutine hdf_get_int_3d module subroutine hdf_get_int_4d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( out ), allocatable :: value (:,:,:,:) end subroutine hdf_get_int_4d module subroutine hdf_get_int_5d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( out ), allocatable :: value (:,:,:,:,:) end subroutine hdf_get_int_5d module subroutine hdf_get_int_6d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( out ), allocatable :: value (:,:,:,:,:,:) end subroutine hdf_get_int_6d module subroutine hdf_get_int_7d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname integer ( int32 ), intent ( out ), allocatable :: value (:,:,:,:,:,:,:) end subroutine hdf_get_int_7d module subroutine hdf_get_real32 ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( out ) :: value end subroutine hdf_get_real32 module subroutine hdf_get_real32_1d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( out ), allocatable :: value (:) end subroutine hdf_get_real32_1d module subroutine hdf_get_real32_2d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( out ), allocatable :: value (:,:) end subroutine hdf_get_real32_2d module subroutine hdf_get_real32_3d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( out ), allocatable :: value (:,:,:) end subroutine hdf_get_real32_3d module subroutine hdf_get_real32_4d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( out ), allocatable :: value (:,:,:,:) end subroutine hdf_get_real32_4d module subroutine hdf_get_real32_5d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( out ), allocatable :: value (:,:,:,:,:) end subroutine hdf_get_real32_5d module subroutine hdf_get_real32_6d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( out ), allocatable :: value (:,:,:,:,:,:) end subroutine hdf_get_real32_6d module subroutine hdf_get_real32_7d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real32 ), intent ( out ), allocatable :: value (:,:,:,:,:,:,:) end subroutine hdf_get_real32_7d module subroutine hdf_get_real64 ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( out ) :: value end subroutine hdf_get_real64 module subroutine hdf_get_real64_1d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( out ), allocatable :: value (:) end subroutine hdf_get_real64_1d module subroutine hdf_get_real64_2d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( out ), allocatable :: value (:,:) end subroutine hdf_get_real64_2d module subroutine hdf_get_real64_3d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( out ), allocatable :: value (:,:,:) end subroutine hdf_get_real64_3d module subroutine hdf_get_real64_4d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( out ), allocatable :: value (:,:,:,:) end subroutine hdf_get_real64_4d module subroutine hdf_get_real64_5d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( out ), allocatable :: value (:,:,:,:,:) end subroutine hdf_get_real64_5d module subroutine hdf_get_real64_6d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( out ), allocatable :: value (:,:,:,:,:,:) end subroutine hdf_get_real64_6d module subroutine hdf_get_real64_7d ( self , dname , value ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname real ( real64 ), intent ( out ), allocatable :: value (:,:,:,:,:,:,:) end subroutine hdf_get_real64_7d module subroutine hdf_open_group ( self , gname ) class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: gname end subroutine hdf_open_group module subroutine hdf_close_group ( self ) class ( hdf5_file ), intent ( inout ) :: self end subroutine hdf_close_group module subroutine writeattr ( self , dname , attr , attrval ) class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: dname , attr , attrval end subroutine writeattr end interface public :: hdf5_file , toLower , hsize_t , strip_trailing_null private contains !============================================================================= subroutine hdf_initialize ( self , filename , status , action , comp_lvl ) !< Opens hdf5 file class ( hdf5_file ), intent ( inout ) :: self character ( * ), intent ( in ) :: filename character ( * ), intent ( in ), optional :: status character ( * ), intent ( in ), optional :: action integer , intent ( in ), optional :: comp_lvl character (:), allocatable :: lstatus , laction integer :: ierr self % filename = filename if ( present ( comp_lvl )) self % comp_lvl = comp_lvl !> Initialize FORTRAN interface. call h5open_f ( ierr ) if ( ierr /= 0 ) error stop 'Error: HDF5 library initialize Failed for ' // self % filename lstatus = 'old' if ( present ( status )) lstatus = toLower ( status ) laction = 'rw' if ( present ( action )) laction = toLower ( action ) select case ( lstatus ) case ( 'old' ) select case ( laction ) case ( 'read' , 'r' ) !< Open an existing file. call h5fopen_f ( filename , H5F_ACC_RDONLY_F , self % lid , ierr ) case ( 'write' , 'readwrite' , 'w' , 'rw' ) call h5fopen_f ( filename , H5F_ACC_RDWR_F , self % lid , ierr ) case default error stop 'Error: Unsupported action ->' // laction endselect case ( 'new' , 'replace' ) call h5fcreate_f ( filename , H5F_ACC_TRUNC_F , self % lid , ierr ) case default error stop 'Error: Unsupported status ->' // lstatus endselect if ( ierr /= 0 ) error stop 'Error: HDF5 open/create failed: ' // filename end subroutine hdf_initialize subroutine hdf_finalize ( self ) class ( hdf5_file ), intent ( in ) :: self integer :: ierr !> close hdf5 file call h5fclose_f ( self % lid , ierr ) if ( ierr /= 0 ) error stop 'Error: HDF5 file close: ' // self % filename !>  Close Fortran interface. call h5close_f ( ierr ) if ( ierr /= 0 ) error stop 'Error: HDF5 finalization: ' // self % filename end subroutine hdf_finalize subroutine hdf_add_group ( self , gname ) !! NOTE: needs to stay here instead of in submodule apparently? class ( hdf5_file ), intent ( in ) :: self character ( * ), intent ( in ) :: gname !< relative path to group integer ( HID_T ) :: gid integer :: ierr , sp , ep , sl logical :: gexist sl = len ( gname ) sp = 1 ep = 0 do ep = index ( gname ( sp + 1 : sl ), \"/\" ) ! no subgroup found if ( ep == 0 ) exit ! check subgroup exists sp = sp + ep call h5lexists_f ( self % lid , gname ( 1 : sp - 1 ), gexist , ierr ) if ( ierr /= 0 ) error stop 'did not find group ' // gname // ' in ' // self % filename if (. not . gexist ) then call h5gcreate_f ( self % lid , gname ( 1 : sp - 1 ), gid , ierr ) if ( ierr /= 0 ) error stop 'problem creating group ' // gname // ' in ' // self % filename call h5gclose_f ( gid , ierr ) if ( ierr /= 0 ) error stop 'problem closing group ' // gname // ' in ' // self % filename endif end do end subroutine hdf_add_group end module hdf5_interface","tags":"","loc":"sourcefile/hdf5_interface.f90.html"},{"title":"read.f90 – object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for reading HDF5, via child submodules This file depends on sourcefile~~read.f90~~EfferentGraph sourcefile~read.f90 read.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~read.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~read.f90~~AfferentGraph sourcefile~read.f90 read.f90 sourcefile~read_real32.f90 read_real32.f90 sourcefile~read_real32.f90->sourcefile~read.f90 sourcefile~read_int.f90 read_int.f90 sourcefile~read_int.f90->sourcefile~read.f90 sourcefile~read_real64.f90 read_real64.f90 sourcefile~read_real64.f90->sourcefile~read.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules read Source Code read.f90 Source Code !! This submodule is for reading HDF5, via child submodules submodule ( hdf5_interface ) read use H5LT , only : h5ltget_dataset_info_f , h5ltread_dataset_f , h5ltget_dataset_info_f , h5ltget_dataset_ndims_f , & h5dopen_f , h5dread_f , h5dclose_f , h5ltread_dataset_string_f implicit none contains module procedure hdf_get_shape !! must get dims before info, as \"dims\" must be allocated or segfault occurs. integer ( SIZE_T ) :: dsize integer :: ierr , dtype , drank call h5ltget_dataset_ndims_f ( self % lid , dname , drank , ierr ) if ( ierr /= 0 ) error stop 'error opening dataset ' // dname // ' rank ' // self % filename allocate ( dims ( drank )) call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error opening dataset ' // dname // ' info ' // self % filename end procedure hdf_get_shape module procedure hdf_get_string !! FIXME: need to use another function to read length, as simply reads gibberish after actual data !! till buffer is full integer :: ierr !integer(HSIZE_T), allocatable :: dims(:) !> This is a random integer, how to retrieve length of string? !call hdf_get_shape(self, dname, dims) !print *, dname, dims(1) call h5ltread_dataset_string_f ( self % lid , dname , value , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // 'read ' // self % filename end procedure hdf_get_string end submodule read","tags":"","loc":"sourcefile/read.f90.html"},{"title":"read_int.f90 – object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for reading integer HDF5 data This file depends on sourcefile~~read_int.f90~~EfferentGraph sourcefile~read_int.f90 read_int.f90 sourcefile~read.f90 read.f90 sourcefile~read_int.f90->sourcefile~read.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~read.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules read_int Source Code read_int.f90 Source Code !! This submodule is for reading integer HDF5 data submodule ( hdf5_interface : read ) read_int use H5LT , only : H5_INTEGER_KIND , HSIZE_T , SIZE_T , H5KIND_TO_TYPE implicit none contains module procedure hdf_get_int integer ( HID_T ) :: dsid integer :: ierr !> open dataset call h5dopen_f ( self % lid , dname , dsid , ierr ) if ( ierr /= 0 ) error stop 'error open scalar integer dataset ' // dname // ' read file ' // self % filename !> read dataset call h5dread_f ( dsid , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , int ( shape ( value ), HSIZE_T ), ierr ) if ( ierr /= 0 ) error stop 'error read scalar integer dataset ' // dname // ' read file ' // self % filename !> close dataset call h5dclose_f ( dsid , ierr ) if ( ierr /= 0 ) error stop 'error close scalar integer dataset ' // dname // ' read file ' // self % filename end procedure hdf_get_int module procedure hdf_get_int_1d integer ( HSIZE_T ) :: dims ( 1 ) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_int_1d module procedure hdf_get_int_2d integer ( HSIZE_T ) :: dims ( 2 ) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_int_2d module procedure hdf_get_int_3d integer ( HSIZE_T ) :: dims ( 3 ) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_int_3d module procedure hdf_get_int_4d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_int_4d module procedure hdf_get_int_5d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ), dims ( 5 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_int_5d module procedure hdf_get_int_6d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ), dims ( 5 ), dims ( 6 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_int_6d module procedure hdf_get_int_7d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ), dims ( 5 ), dims ( 6 ), dims ( 7 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_int_7d end submodule read_int","tags":"","loc":"sourcefile/read_int.f90.html"},{"title":"read_real32.f90 – object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for reading single precision float (32 bit) This file depends on sourcefile~~read_real32.f90~~EfferentGraph sourcefile~read_real32.f90 read_real32.f90 sourcefile~read.f90 read.f90 sourcefile~read_real32.f90->sourcefile~read.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~read.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules read_real32 Source Code read_real32.f90 Source Code !! This submodule is for reading single precision float (32 bit) submodule ( hdf5_interface : read ) read_real32 use H5LT , only : HSIZE_T , SIZE_T , H5_REAL_KIND , H5KIND_TO_TYPE implicit none contains module procedure hdf_get_real32 integer ( HID_T ) :: dsid integer :: ierr !> open dataset call h5dopen_f ( self % lid , dname , dsid , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename !> read dataset call h5dread_f ( dsid , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , int ( shape ( value ), HSIZE_T ), ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename !> close dataset call h5dclose_f ( dsid , ierr ) if ( ierr /= 0 ) error stop 'error close dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real32 module procedure hdf_get_real32_1d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real32_1d module procedure hdf_get_real32_2d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real32_2d module procedure hdf_get_real32_3d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real32_3d module procedure hdf_get_real32_4d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real32_4d module procedure hdf_get_real32_5d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ), dims ( 5 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real32_5d module procedure hdf_get_real32_6d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ), dims ( 5 ), dims ( 6 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real32_6d module procedure hdf_get_real32_7d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ), dims ( 5 ), dims ( 6 ), dims ( 7 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real32_7d end submodule read_real32","tags":"","loc":"sourcefile/read_real32.f90.html"},{"title":"read_real64.f90 – object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for reading double precision float (64 bit) This file depends on sourcefile~~read_real64.f90~~EfferentGraph sourcefile~read_real64.f90 read_real64.f90 sourcefile~read.f90 read.f90 sourcefile~read_real64.f90->sourcefile~read.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~read.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules read_real64 Source Code read_real64.f90 Source Code !! This submodule is for reading double precision float (64 bit) submodule ( hdf5_interface : read ) read_real64 use H5LT , only : HSIZE_T , SIZE_T , H5_REAL_KIND , H5KIND_TO_TYPE implicit none contains module procedure hdf_get_real64 integer ( HID_T ) :: dsid integer :: ierr !> open dataset call h5dopen_f ( self % lid , dname , dsid , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename !> read dataset call h5dread_f ( dsid , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , int ( shape ( value ), HSIZE_T ), ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename !> close dataset call h5dclose_f ( dsid , ierr ) if ( ierr /= 0 ) error stop 'error close dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real64 module procedure hdf_get_real64_1d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real64_1d module procedure hdf_get_real64_2d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real64_2d module procedure hdf_get_real64_3d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real64_3d module procedure hdf_get_real64_4d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real64_4d module procedure hdf_get_real64_5d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ), dims ( 5 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real64_5d module procedure hdf_get_real64_6d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ), dims ( 5 ), dims ( 6 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real64_6d module procedure hdf_get_real64_7d integer ( HSIZE_T ) :: dims ( rank ( value )) integer ( SIZE_T ) :: dsize integer :: ierr , dtype call h5ltget_dataset_info_f ( self % lid , dname , dims , dtype , dsize , ierr ) if ( ierr /= 0 ) error stop 'error open dataset ' // dname // ' read ' // self % filename allocate ( value ( dims ( 1 ), dims ( 2 ), dims ( 3 ), dims ( 4 ), dims ( 5 ), dims ( 6 ), dims ( 7 ))) call h5ltread_dataset_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , dims , ierr ) if ( ierr /= 0 ) error stop 'error read dataset ' // dname // ' read ' // self % filename end procedure hdf_get_real64_7d end submodule read_real64","tags":"","loc":"sourcefile/read_real64.f90.html"},{"title":"string_utils.f90 – object-oriented Fortran 2018 HDF5 interface","text":"This module is for string manipulation Files dependent on this one sourcefile~~string_utils.f90~~AfferentGraph sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 sourcefile~read.f90 read.f90 sourcefile~read.f90->sourcefile~hdf5_interface.f90 sourcefile~write.f90 write.f90 sourcefile~write.f90->sourcefile~hdf5_interface.f90 sourcefile~read_int.f90 read_int.f90 sourcefile~read_int.f90->sourcefile~read.f90 sourcefile~write_int.f90 write_int.f90 sourcefile~write_int.f90->sourcefile~write.f90 sourcefile~write_real32.f90 write_real32.f90 sourcefile~write_real32.f90->sourcefile~write.f90 sourcefile~read_real32.f90 read_real32.f90 sourcefile~read_real32.f90->sourcefile~read.f90 sourcefile~read_real64.f90 read_real64.f90 sourcefile~read_real64.f90->sourcefile~read.f90 sourcefile~write_real64.f90 write_real64.f90 sourcefile~write_real64.f90->sourcefile~write.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules string_utils Source Code string_utils.f90 Source Code !! This module is for string manipulation module string_utils use , intrinsic :: iso_c_binding , only : c_null_char implicit none contains elemental function toLower ( str ) !! convert uppercase characters to lowercase !! !! can be trivially extended to non-ASCII character ( * ), intent ( in ) :: str character ( len ( str )) :: toLower character ( * ), parameter :: lower = \"abcdefghijklmnopqrstuvwxyz\" , & upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" integer :: i , j toLower = str do concurrent ( i = 1 : len ( str )) j = index ( upper , str ( i : i )) if ( j > 0 ) toLower ( i : i ) = lower ( j : j ) end do end function toLower pure function strip_trailing_null ( str ) result ( stripped ) !! strip trailing C null from strings character ( * ), intent ( in ) :: str character (:), allocatable :: stripped integer :: i i = len_trim ( str ) if ( str ( i : i ) == c_null_char ) then stripped = str (: i - 1 ) else stripped = str endif end function strip_trailing_null end module string_utils","tags":"","loc":"sourcefile/string_utils.f90.html"},{"title":"write.f90 – object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for writing HDF5 data via child submodules This file depends on sourcefile~~write.f90~~EfferentGraph sourcefile~write.f90 write.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~write.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~write.f90~~AfferentGraph sourcefile~write.f90 write.f90 sourcefile~write_int.f90 write_int.f90 sourcefile~write_int.f90->sourcefile~write.f90 sourcefile~write_real32.f90 write_real32.f90 sourcefile~write_real32.f90->sourcefile~write.f90 sourcefile~write_real64.f90 write_real64.f90 sourcefile~write_real64.f90->sourcefile~write.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules write Source Code write.f90 Source Code !! This submodule is for writing HDF5 data via child submodules submodule ( hdf5_interface ) write use H5LT , only : h5screate_f , h5sclose_f , h5dcreate_f , h5dwrite_f , h5dclose_f , h5ltmake_dataset_f , & h5ltpath_valid_f , h5ltset_attribute_string_f , h5screate_simple_f , & h5pset_chunk_f , h5pset_deflate_f , h5pset_shuffle_f , h5pcreate_f , H5P_DATASET_CREATE_F , h5pclose_f , & h5ltmake_dataset_string_f , h5gopen_f , h5gclose_f implicit none contains module procedure writeattr integer :: ierr logical :: exists call self % add ( dname ) call h5ltpath_valid_f ( self % lid , dname , . true ., exists , ierr ) if ( ierr /= 0 ) error stop 'problem checking existence: ' // dname // ' file ' // self % filename if (. not . exists ) then write ( stderr , * ) 'WARNING: variable ' // dname // ' must be created before writing ' // attr return endif call h5ltset_attribute_string_f ( self % lid , dname , attr , attrval , ierr ) if ( ierr /= 0 ) error stop 'problem writing attribute ' // attr // ' to ' // dname // ' file ' // self % filename end procedure writeattr module procedure hdf_add_string integer :: ierr call h5ltmake_dataset_string_f ( self % lid , dname , value , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename end procedure hdf_add_string module procedure hdf_setup_write integer :: ierr call self % add ( dname ) if ( present ( chunk_size )) self % chunk_size (: size ( dims )) = chunk_size call hdf_set_deflate ( self , dims ) call h5screate_simple_f ( size ( dims ), dims , self % sid , ierr ) if ( ierr /= 0 ) error stop 'error on dataspace ' // dname // ' ' // self % filename call h5dcreate_f ( self % lid , dname , dtype , self % sid , self % did , ierr , self % pid ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' ' // self % filename end procedure hdf_setup_write module procedure hdf_set_deflate integer :: ierr , ndims , i integer ( HSIZE_T ), allocatable :: chunk_size (:) ndims = size ( dims ) allocate ( chunk_size ( ndims )) do concurrent ( i = 1 : ndims ) chunk_size ( i ) = min ( self % chunk_size ( i ), dims ( i )) enddo if ( self % verbose ) print * , 'dims: ' , dims , 'chunk size: ' , chunk_size call h5pcreate_f ( H5P_DATASET_CREATE_F , self % pid , ierr ) if ( ierr /= 0 ) error stop 'error creating property ' // self % filename call h5pset_chunk_f ( self % pid , ndims , chunk_size , ierr ) if ( ierr /= 0 ) error stop 'error setting chunk ' // self % filename if ( self % comp_lvl < 1 . or . self % comp_lvl > 9 ) return call h5pset_shuffle_f ( self % pid , ierr ) if ( ierr /= 0 ) error stop 'error enabling Shuffle ' // self % filename call h5pset_deflate_f ( self % pid , self % comp_lvl , ierr ) if ( ierr /= 0 ) error stop 'error enabling Deflate compression ' // self % filename end procedure hdf_set_deflate module procedure hdf_wrapup integer :: ierr call h5sclose_f ( self % sid , ierr ) call h5pclose_f ( self % pid , ierr ) call h5dclose_f ( self % did , ierr ) if ( ierr /= 0 ) error stop 'problem closing dataset in ' // self % filename end procedure hdf_wrapup module procedure hdf_open_group integer :: ierr call h5gopen_f ( self % lid , gname , self % gid , ierr ) if ( ierr /= 0 ) error stop 'problem opening group ' // gname // ' in ' // self % filename self % glid = self % lid self % lid = self % gid end procedure hdf_open_group module procedure hdf_close_group integer :: ierr call h5gclose_f ( self % gid , ierr ) if ( ierr /= 0 ) error stop 'problem closing group ' // self % filename self % lid = self % glid end procedure hdf_close_group end submodule write","tags":"","loc":"sourcefile/write.f90.html"},{"title":"write_int.f90 – object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for writing integer HDF5 data This file depends on sourcefile~~write_int.f90~~EfferentGraph sourcefile~write_int.f90 write_int.f90 sourcefile~write.f90 write.f90 sourcefile~write_int.f90->sourcefile~write.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~write.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules write_int Source Code write_int.f90 Source Code !! This submodule is for writing integer HDF5 data submodule ( hdf5_interface : write ) write_int use H5LT , only : H5S_SCALAR_F , H5_INTEGER_KIND , H5KIND_TO_TYPE implicit none contains module procedure hdf_add_int integer ( HID_T ) :: sid , did integer :: ierr call self % add ( dname ) !> HDF5 >= 1.10 !call h5ltmake_dataset_f(self%lid, dname, & !  rank(value), int(shape(value),HSIZE_T), h5kind_to_type(kind(value),H5_INTEGER_KIND), value, ierr) !if (ierr /= 0) error stop 'error on dataset '//dname//' write '//self%filename !>  HDF5 1.8 compatbility below: !> create dataspace call h5screate_f ( H5S_SCALAR_F , sid , ierr ) if ( ierr /= 0 ) error stop 'error create dataspace ' // dname // ' write ' // self % filename !> create dataset call h5dcreate_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), sid , did , ierr ) if ( ierr /= 0 ) error stop 'error create dataet ' // dname // ' write ' // self % filename !> write dataset call h5dwrite_f ( did , h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , int ( shape ( value ), HSIZE_T ), ierr ) if ( ierr /= 0 ) error stop 'error write dataspace ' // dname // ' write ' // self % filename !> close space and dataset call h5dclose_f ( did , ierr ) if ( ierr /= 0 ) error stop 'error close dataset ' // dname // ' write ' // self % filename call h5sclose_f ( sid , ierr ) if ( ierr /= 0 ) error stop 'error close dataspace ' // dname // ' write ' // self % filename end procedure hdf_add_int module procedure hdf_add_int_1d integer :: ierr call self % add ( dname ) call h5ltmake_dataset_f ( self % lid , dname , & rank ( value ), int ( shape ( value ), HSIZE_T ), h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ), value , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename end procedure hdf_add_int_1d module procedure hdf_add_int_2d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_int_2d module procedure hdf_add_int_3d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_int_3d module procedure hdf_add_int_4d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_int_4d module procedure hdf_add_int_5d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_int_5d module procedure hdf_add_int_6d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_int_6d module procedure hdf_add_int_7d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_INTEGER_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_int_7d end submodule write_int","tags":"","loc":"sourcefile/write_int.f90.html"},{"title":"write_real32.f90 – object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for writing single precision float (32 bit) This file depends on sourcefile~~write_real32.f90~~EfferentGraph sourcefile~write_real32.f90 write_real32.f90 sourcefile~write.f90 write.f90 sourcefile~write_real32.f90->sourcefile~write.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~write.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules write_real32 Source Code write_real32.f90 Source Code !! This submodule is for writing single precision float (32 bit) submodule ( hdf5_interface : write ) write_real32 use H5LT , only : H5_REAL_KIND , H5S_SCALAR_F , H5KIND_TO_TYPE implicit none contains module procedure hdf_add_real32 integer ( HID_T ) :: sid , did integer :: ierr call self % add ( dname ) !> HDF5 >= 1.10 !call h5ltmake_dataset_f(self%lid, dname, & !   rank(value), int(shape(value),HSIZE_T), h5kind_to_type(kind(value),H5_REAL_KIND), value, ierr) !if (ierr /= 0) error stop 'error on dataset '//dname//' write '//self%filename !> HDF5 1.8 compatbility below: !> create dataspace call h5screate_f ( H5S_SCALAR_F , sid , ierr ) if ( ierr /= 0 ) error stop 'error create dataspace ' // dname // ' write ' // self % filename !> create dataset call h5dcreate_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), sid , did , ierr ) if ( ierr /= 0 ) error stop 'error create dataset ' // dname // ' write ' // self % filename !> write dataset call h5dwrite_f ( did , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , int ( shape ( value ), HSIZE_T ), ierr ) if ( ierr /= 0 ) error stop 'error write dataset ' // dname // ' write ' // self % filename !> close space and dataset call h5dclose_f ( did , ierr ) call h5sclose_f ( sid , ierr ) if ( ierr /= 0 ) error stop 'error close dataspace ' // dname // ' write ' // self % filename end procedure hdf_add_real32 module procedure hdf_add_real32_1d integer :: ierr call self % add ( dname ) call h5ltmake_dataset_f ( self % lid , dname , & rank ( value ), int ( shape ( value ), HSIZE_T ), h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename end procedure hdf_add_real32_1d module procedure hdf_add_real32_2d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real32_2d module procedure hdf_add_real32_3d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real32_3d module procedure hdf_add_real32_4d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real32_4d module procedure hdf_add_real32_5d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real32_5d module procedure hdf_add_real32_6d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real32_6d module procedure hdf_add_real32_7d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real32_7d end submodule write_real32","tags":"","loc":"sourcefile/write_real32.f90.html"},{"title":"write_real64.f90 – object-oriented Fortran 2018 HDF5 interface","text":"This submodule is for writing double precision float (64 bit) This file depends on sourcefile~~write_real64.f90~~EfferentGraph sourcefile~write_real64.f90 write_real64.f90 sourcefile~write.f90 write.f90 sourcefile~write_real64.f90->sourcefile~write.f90 sourcefile~hdf5_interface.f90 hdf5_interface.f90 sourcefile~write.f90->sourcefile~hdf5_interface.f90 sourcefile~string_utils.f90 string_utils.f90 sourcefile~hdf5_interface.f90->sourcefile~string_utils.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules write_real64 Source Code write_real64.f90 Source Code !! This submodule is for writing double precision float (64 bit) submodule ( hdf5_interface : write ) write_real64 use H5LT , only : H5_REAL_KIND , H5S_SCALAR_F , H5KIND_TO_TYPE implicit none contains module procedure hdf_add_real64 integer ( HID_T ) :: sid , did integer :: ierr call self % add ( dname ) ! HDF5 >= 1.10 !call h5ltmake_dataset_f(self%lid, dname, & !   rank(value), int(shape(value),HSIZE_T), h5kind_to_type(kind(value),H5_REAL_KIND), value, ierr) !if (ierr /= 0) error stop 'error on dataset '//dname//' write '//self%filename ! HDF5 1.8 compatbility below: !> create dataspace call h5screate_f ( H5S_SCALAR_F , sid , ierr ) if ( ierr /= 0 ) error stop 'error create dataspace ' // dname // ' write ' // self % filename !> create dataset call h5dcreate_f ( self % lid , dname , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), sid , did , ierr ) if ( ierr /= 0 ) error stop 'error create dataset ' // dname // ' write ' // self % filename !> write dataset call h5dwrite_f ( did , h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , int ( shape ( value ), HSIZE_T ), ierr ) if ( ierr /= 0 ) error stop 'error write dataset ' // dname // ' write ' // self % filename !> close space and dataset call h5dclose_f ( did , ierr ) call h5sclose_f ( sid , ierr ) if ( ierr /= 0 ) error stop 'error close dataspace ' // dname // ' write ' // self % filename end procedure hdf_add_real64 module procedure hdf_add_real64_1d integer :: ierr call self % add ( dname ) call h5ltmake_dataset_f ( self % lid , dname , & rank ( value ), int ( shape ( value ), HSIZE_T ), h5kind_to_type ( kind ( value ), H5_REAL_KIND ), value , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename end procedure hdf_add_real64_1d module procedure hdf_add_real64_2d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real64_2d module procedure hdf_add_real64_3d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real64_3d module procedure hdf_add_real64_4d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real64_4d module procedure hdf_add_real64_5d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real64_5d module procedure hdf_add_real64_6d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real64_6d module procedure hdf_add_real64_7d integer :: ierr integer ( HID_T ) :: dtype integer ( HSIZE_T ) :: dims ( rank ( value )) dims = shape ( value ) dtype = h5kind_to_type ( kind ( value ), H5_REAL_KIND ) call hdf_setup_write ( self , dname , dtype , dims , chunk_size ) call h5dwrite_f ( self % did , dtype , value , dims , ierr ) if ( ierr /= 0 ) error stop 'error on dataset ' // dname // ' write ' // self % filename call hdf_wrapup ( self ) end procedure hdf_add_real64_7d end submodule write_real64","tags":"","loc":"sourcefile/write_real64.f90.html"},{"title":"hdf5_file – object-oriented Fortran 2018 HDF5 interface ","text":"type, public :: hdf5_file main type Contents Variables filename lid gid glid sid did pid comp_lvl chunk_size verbose Type-Bound Procedures shape close open writeattr finalize initialize add get hdf_get_string hdf_add_string hdf_get_real64_7d hdf_get_real64_6d hdf_get_real64_5d hdf_get_real64_4d hdf_get_real64_3d hdf_get_real64_2d hdf_get_real64_1d hdf_get_real64 hdf_get_real32_7d hdf_get_real32_6d hdf_get_real32_5d hdf_get_real32_4d hdf_get_real32_3d hdf_get_real32_2d hdf_get_real32_1d hdf_get_real32 hdf_add_real64_7d hdf_add_real64_6d hdf_add_real64_5d hdf_add_real64_4d hdf_add_real64_3d hdf_add_real64_2d hdf_add_real64_1d hdf_add_real64 hdf_add_real32_7d hdf_add_real32_6d hdf_add_real32_5d hdf_add_real32_4d hdf_add_real32_3d hdf_add_real32_2d hdf_add_real32_1d hdf_add_real32 hdf_get_int_7d hdf_get_int_6d hdf_get_int_5d hdf_get_int_4d hdf_get_int_3d hdf_get_int_2d hdf_get_int_1d hdf_get_int hdf_add_int_7d hdf_add_int_6d hdf_add_int_5d hdf_add_int_4d hdf_add_int_3d hdf_add_int_2d hdf_add_int_1d hdf_add_int hdf_add_group Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: filename integer(kind=HID_T), public :: lid integer(kind=HID_T), public :: gid integer(kind=HID_T), public :: glid integer(kind=HID_T), public :: sid integer(kind=HID_T), public :: did integer(kind=HID_T), public :: pid integer, public :: comp_lvl = 0 integer(kind=HSIZE_T), public :: chunk_size (7) = [64, 64, 1, 1, 1, 1, 1] logical, public :: verbose = .false. Type-Bound Procedures procedure, public :: shape => hdf_get_shape initialize HDF5 file interface Submodules public module subroutine hdf_get_shape(self, dname, dims) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) procedure, public :: close => hdf_close_group interface Submodules public module subroutine hdf_close_group(self) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self procedure, public :: open => hdf_open_group interface Submodules public module subroutine hdf_open_group(self, gname) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname procedure, public :: writeattr interface Submodules public module subroutine writeattr(self, dname, attr, attrval) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval procedure, public :: finalize => hdf_finalize private subroutine hdf_finalize (self) close hdf5 file\n  Close Fortran interface. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self procedure, public :: initialize => hdf_initialize private subroutine hdf_initialize (self, filename, status, action, comp_lvl) Initialize FORTRAN interface. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: filename character(len=*), intent(in), optional :: status character(len=*), intent(in), optional :: action integer, intent(in), optional :: comp_lvl generic, public :: add => hdf_add_group , hdf_add_int , hdf_add_int_1d , hdf_add_int_2d , hdf_add_int_3d , hdf_add_int_5d , hdf_add_int_6d , hdf_add_int_7d , hdf_add_real32 , hdf_add_real32_1d , hdf_add_real32_2d , hdf_add_real32_3d , hdf_add_real32_4d , hdf_add_real32_5d , hdf_add_real32_6d , hdf_add_real32_7d , hdf_add_real64 , hdf_add_real64_1d , hdf_add_real64_2d , hdf_add_real64_3d , hdf_add_real64_4d , hdf_add_real64_5d , hdf_add_real64_6d , hdf_add_real64_7d , hdf_add_string add group or dataset integer/real private subroutine hdf_add_group (self, gname) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname public interface hdf_add_int () Submodules Arguments None public interface hdf_add_int_1d () Submodules Arguments None public interface hdf_add_int_2d () Submodules Arguments None public interface hdf_add_int_3d () Submodules Arguments None public interface hdf_add_int_5d () Submodules Arguments None public interface hdf_add_int_6d () Submodules Arguments None public interface hdf_add_int_7d () Submodules Arguments None public interface hdf_add_real32 () Submodules Arguments None public interface hdf_add_real32_1d () Submodules Arguments None public interface hdf_add_real32_2d () Submodules Arguments None public interface hdf_add_real32_3d () Submodules Arguments None public interface hdf_add_real32_4d () Submodules Arguments None public interface hdf_add_real32_5d () Submodules Arguments None public interface hdf_add_real32_6d () Submodules Arguments None public interface hdf_add_real32_7d () Submodules Arguments None public interface hdf_add_real64 () Submodules Arguments None public interface hdf_add_real64_1d () Submodules Arguments None public interface hdf_add_real64_2d () Submodules Arguments None public interface hdf_add_real64_3d () Submodules Arguments None public interface hdf_add_real64_4d () Submodules Arguments None public interface hdf_add_real64_5d () Submodules Arguments None public interface hdf_add_real64_6d () Submodules Arguments None public interface hdf_add_real64_7d () Submodules Arguments None public interface hdf_add_string () Submodules Arguments None generic, public :: get => hdf_get_int , hdf_get_int_1d , hdf_get_int_2d , hdf_get_int_3d , hdf_get_int_4d , hdf_get_int_5d , hdf_get_int_6d , hdf_get_int_7d , hdf_get_real32 , hdf_get_real32_1d , hdf_get_real32_2d , hdf_get_real32_3d , hdf_get_real32_4d , hdf_get_real32_5d , hdf_get_real32_6d , hdf_get_real32_7d , hdf_get_real64 , hdf_get_real64_1d , hdf_get_real64_2d , hdf_get_real64_3d , hdf_get_real64_4d , hdf_get_real64_5d , hdf_get_real64_6d , hdf_get_real64_7d , hdf_get_string get dataset integer/real public interface hdf_get_int () Submodules Arguments None public interface hdf_get_int_1d () Submodules Arguments None public interface hdf_get_int_2d () Submodules Arguments None public interface hdf_get_int_3d () Submodules Arguments None public interface hdf_get_int_4d () Submodules Arguments None public interface hdf_get_int_5d () Submodules Arguments None public interface hdf_get_int_6d () Submodules Arguments None public interface hdf_get_int_7d () Submodules Arguments None public interface hdf_get_real32 () Submodules Arguments None public interface hdf_get_real32_1d () Submodules Arguments None public interface hdf_get_real32_2d () Submodules Arguments None public interface hdf_get_real32_3d () Submodules Arguments None public interface hdf_get_real32_4d () Submodules Arguments None public interface hdf_get_real32_5d () Submodules Arguments None public interface hdf_get_real32_6d () Submodules Arguments None public interface hdf_get_real32_7d () Submodules Arguments None public interface hdf_get_real64 () Submodules Arguments None public interface hdf_get_real64_1d () Submodules Arguments None public interface hdf_get_real64_2d () Submodules Arguments None public interface hdf_get_real64_3d () Submodules Arguments None public interface hdf_get_real64_4d () Submodules Arguments None public interface hdf_get_real64_5d () Submodules Arguments None public interface hdf_get_real64_6d () Submodules Arguments None public interface hdf_get_real64_7d () Submodules Arguments None public interface hdf_get_string () Submodules Arguments None procedure, private :: hdf_get_string private methods interface Submodules public module subroutine hdf_get_string(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(out) :: value procedure, private :: hdf_add_string interface Submodules public module subroutine hdf_add_string(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: value procedure, private :: hdf_get_real64_7d interface Submodules public module subroutine hdf_get_real64_7d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:,:,:) procedure, private :: hdf_get_real64_6d interface Submodules public module subroutine hdf_get_real64_6d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:,:) procedure, private :: hdf_get_real64_5d interface Submodules public module subroutine hdf_get_real64_5d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:) procedure, private :: hdf_get_real64_4d interface Submodules public module subroutine hdf_get_real64_4d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:) procedure, private :: hdf_get_real64_3d interface Submodules public module subroutine hdf_get_real64_3d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:) procedure, private :: hdf_get_real64_2d interface Submodules public module subroutine hdf_get_real64_2d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:) procedure, private :: hdf_get_real64_1d interface Submodules public module subroutine hdf_get_real64_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:) procedure, private :: hdf_get_real64 interface Submodules public module subroutine hdf_get_real64(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out) :: value procedure, private :: hdf_get_real32_7d interface Submodules public module subroutine hdf_get_real32_7d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:,:,:) procedure, private :: hdf_get_real32_6d interface Submodules public module subroutine hdf_get_real32_6d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:,:) procedure, private :: hdf_get_real32_5d interface Submodules public module subroutine hdf_get_real32_5d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:) procedure, private :: hdf_get_real32_4d interface Submodules public module subroutine hdf_get_real32_4d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:) procedure, private :: hdf_get_real32_3d interface Submodules public module subroutine hdf_get_real32_3d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:) procedure, private :: hdf_get_real32_2d interface Submodules public module subroutine hdf_get_real32_2d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:) procedure, private :: hdf_get_real32_1d interface Submodules public module subroutine hdf_get_real32_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:) procedure, private :: hdf_get_real32 interface Submodules public module subroutine hdf_get_real32(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out) :: value procedure, private :: hdf_add_real64_7d interface Submodules public module subroutine hdf_add_real64_7d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real64_6d interface Submodules public module subroutine hdf_add_real64_6d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real64_5d interface Submodules public module subroutine hdf_add_real64_5d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real64_4d interface Submodules public module subroutine hdf_add_real64_4d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real64_3d interface Submodules public module subroutine hdf_add_real64_3d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real64_2d interface Submodules public module subroutine hdf_add_real64_2d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real64_1d interface Submodules public module subroutine hdf_add_real64_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:) procedure, private :: hdf_add_real64 interface Submodules public module subroutine hdf_add_real64(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value procedure, private :: hdf_add_real32_7d interface Submodules public module subroutine hdf_add_real32_7d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real32_6d interface Submodules public module subroutine hdf_add_real32_6d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real32_5d interface Submodules public module subroutine hdf_add_real32_5d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real32_4d interface Submodules public module subroutine hdf_add_real32_4d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real32_3d interface Submodules public module subroutine hdf_add_real32_3d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real32_2d interface Submodules public module subroutine hdf_add_real32_2d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_real32_1d interface Submodules public module subroutine hdf_add_real32_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:) procedure, private :: hdf_add_real32 interface Submodules public module subroutine hdf_add_real32(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value procedure, private :: hdf_get_int_7d interface Submodules public module subroutine hdf_get_int_7d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:,:,:) procedure, private :: hdf_get_int_6d interface Submodules public module subroutine hdf_get_int_6d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:,:) procedure, private :: hdf_get_int_5d interface Submodules public module subroutine hdf_get_int_5d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:) procedure, private :: hdf_get_int_4d interface Submodules public module subroutine hdf_get_int_4d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:) procedure, private :: hdf_get_int_3d interface Submodules public module subroutine hdf_get_int_3d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:) procedure, private :: hdf_get_int_2d interface Submodules public module subroutine hdf_get_int_2d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:) procedure, private :: hdf_get_int_1d interface Submodules public module subroutine hdf_get_int_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:) procedure, private :: hdf_get_int interface Submodules public module subroutine hdf_get_int(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out) :: value procedure, private :: hdf_add_int_7d interface Submodules public module subroutine hdf_add_int_7d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_int_6d interface Submodules public module subroutine hdf_add_int_6d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_int_5d interface Submodules public module subroutine hdf_add_int_5d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_int_4d interface Submodules public module subroutine hdf_add_int_4d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer, intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_int_3d interface Submodules public module subroutine hdf_add_int_3d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_int_2d interface Submodules public module subroutine hdf_add_int_2d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) procedure, private :: hdf_add_int_1d interface Submodules public module subroutine hdf_add_int_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:) procedure, private :: hdf_add_int interface Submodules public module subroutine hdf_add_int(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value procedure, private :: hdf_add_group private subroutine hdf_add_group (self, gname) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname","tags":"","loc":"type/hdf5_file.html"},{"title":"hdf_initialize – object-oriented Fortran 2018 HDF5 interface","text":"private subroutine hdf_initialize(self, filename, status, action, comp_lvl) Initialize FORTRAN interface. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: filename character(len=*), intent(in), optional :: status character(len=*), intent(in), optional :: action integer, intent(in), optional :: comp_lvl Calls proc~~hdf_initialize~~CallsGraph proc~hdf_initialize hdf_initialize h5open_f h5open_f proc~hdf_initialize->h5open_f proc~tolower toLower proc~hdf_initialize->proc~tolower h5fcreate_f h5fcreate_f proc~hdf_initialize->h5fcreate_f h5fopen_f h5fopen_f proc~hdf_initialize->h5fopen_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_initialize.html"},{"title":"hdf_finalize – object-oriented Fortran 2018 HDF5 interface","text":"private subroutine hdf_finalize(self) close hdf5 file\n  Close Fortran interface. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self Calls proc~~hdf_finalize~~CallsGraph proc~hdf_finalize hdf_finalize h5fclose_f h5fclose_f proc~hdf_finalize->h5fclose_f h5close_f h5close_f proc~hdf_finalize->h5close_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_finalize.html"},{"title":"hdf_add_group – object-oriented Fortran 2018 HDF5 interface","text":"private subroutine hdf_add_group(self, gname) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname Calls proc~~hdf_add_group~~CallsGraph proc~hdf_add_group hdf_add_group h5gcreate_f h5gcreate_f proc~hdf_add_group->h5gcreate_f h5gclose_f h5gclose_f proc~hdf_add_group->h5gclose_f h5lexists_f h5lexists_f proc~hdf_add_group->h5lexists_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_group.html"},{"title":"hdf_setup_write – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_setup_write~~CallsGraph interface~hdf_setup_write hdf_setup_write proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~hdf_setup_write~~CalledByGraph interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_6d hdf_add_real32_6d proc~hdf_add_real32_6d->interface~hdf_setup_write proc~hdf_add_int_5d hdf_add_int_5d proc~hdf_add_int_5d->interface~hdf_setup_write proc~hdf_add_int_4d hdf_add_int_4d proc~hdf_add_int_4d->interface~hdf_setup_write proc~hdf_add_real32_5d hdf_add_real32_5d proc~hdf_add_real32_5d->interface~hdf_setup_write proc~hdf_add_int_3d hdf_add_int_3d proc~hdf_add_int_3d->interface~hdf_setup_write proc~hdf_add_real64_2d hdf_add_real64_2d proc~hdf_add_real64_2d->interface~hdf_setup_write proc~hdf_add_real32_3d hdf_add_real32_3d proc~hdf_add_real32_3d->interface~hdf_setup_write proc~hdf_add_real64_6d hdf_add_real64_6d proc~hdf_add_real64_6d->interface~hdf_setup_write proc~hdf_add_real64_5d hdf_add_real64_5d proc~hdf_add_real64_5d->interface~hdf_setup_write proc~hdf_add_real64_4d hdf_add_real64_4d proc~hdf_add_real64_4d->interface~hdf_setup_write proc~hdf_add_int_2d hdf_add_int_2d proc~hdf_add_int_2d->interface~hdf_setup_write proc~hdf_add_int_6d hdf_add_int_6d proc~hdf_add_int_6d->interface~hdf_setup_write proc~hdf_add_real32_4d hdf_add_real32_4d proc~hdf_add_real32_4d->interface~hdf_setup_write proc~hdf_add_real32_7d hdf_add_real32_7d proc~hdf_add_real32_7d->interface~hdf_setup_write proc~hdf_add_real64_7d hdf_add_real64_7d proc~hdf_add_real64_7d->interface~hdf_setup_write proc~hdf_add_real64_3d hdf_add_real64_3d proc~hdf_add_real64_3d->interface~hdf_setup_write proc~hdf_add_int_7d hdf_add_int_7d proc~hdf_add_int_7d->interface~hdf_setup_write proc~hdf_add_real32_2d hdf_add_real32_2d proc~hdf_add_real32_2d->interface~hdf_setup_write interface~hdf_add_real64_5d hdf_add_real64_5d interface~hdf_add_real64_5d->proc~hdf_add_real64_5d interface~hdf_add_real64_3d hdf_add_real64_3d interface~hdf_add_real64_3d->proc~hdf_add_real64_3d interface~hdf_add_real64_2d hdf_add_real64_2d interface~hdf_add_real64_2d->proc~hdf_add_real64_2d interface~hdf_add_real64_4d hdf_add_real64_4d interface~hdf_add_real64_4d->proc~hdf_add_real64_4d interface~hdf_add_real64_7d hdf_add_real64_7d interface~hdf_add_real64_7d->proc~hdf_add_real64_7d interface~hdf_add_real64_6d hdf_add_real64_6d interface~hdf_add_real64_6d->proc~hdf_add_real64_6d interface~hdf_add_int_7d hdf_add_int_7d interface~hdf_add_int_7d->proc~hdf_add_int_7d interface~hdf_add_real32_3d hdf_add_real32_3d interface~hdf_add_real32_3d->proc~hdf_add_real32_3d interface~hdf_add_real32_6d hdf_add_real32_6d interface~hdf_add_real32_6d->proc~hdf_add_real32_6d interface~hdf_add_real32_5d hdf_add_real32_5d interface~hdf_add_real32_5d->proc~hdf_add_real32_5d interface~hdf_add_int_5d hdf_add_int_5d interface~hdf_add_int_5d->proc~hdf_add_int_5d interface~hdf_add_int_3d hdf_add_int_3d interface~hdf_add_int_3d->proc~hdf_add_int_3d interface~hdf_add_int_6d hdf_add_int_6d interface~hdf_add_int_6d->proc~hdf_add_int_6d interface~hdf_add_real32_2d hdf_add_real32_2d interface~hdf_add_real32_2d->proc~hdf_add_real32_2d interface~hdf_add_real32_7d hdf_add_real32_7d interface~hdf_add_real32_7d->proc~hdf_add_real32_7d interface~hdf_add_int_4d hdf_add_int_4d interface~hdf_add_int_4d->proc~hdf_add_int_4d interface~hdf_add_int_2d hdf_add_int_2d interface~hdf_add_int_2d->proc~hdf_add_int_2d interface~hdf_add_real32_4d hdf_add_real32_4d interface~hdf_add_real32_4d->proc~hdf_add_real32_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_setup_write(self, dname, dtype, dims, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=HID_T), intent(in) :: dtype integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_setup_write.html"},{"title":"hdf_wrapup – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_wrapup~~CallsGraph interface~hdf_wrapup hdf_wrapup proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~hdf_wrapup~~CalledByGraph interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_6d hdf_add_real32_6d proc~hdf_add_real32_6d->interface~hdf_wrapup proc~hdf_add_int_5d hdf_add_int_5d proc~hdf_add_int_5d->interface~hdf_wrapup proc~hdf_add_int_4d hdf_add_int_4d proc~hdf_add_int_4d->interface~hdf_wrapup proc~hdf_add_real32_5d hdf_add_real32_5d proc~hdf_add_real32_5d->interface~hdf_wrapup proc~hdf_add_int_3d hdf_add_int_3d proc~hdf_add_int_3d->interface~hdf_wrapup proc~hdf_add_real64_2d hdf_add_real64_2d proc~hdf_add_real64_2d->interface~hdf_wrapup proc~hdf_add_real32_3d hdf_add_real32_3d proc~hdf_add_real32_3d->interface~hdf_wrapup proc~hdf_add_real64_6d hdf_add_real64_6d proc~hdf_add_real64_6d->interface~hdf_wrapup proc~hdf_add_real64_5d hdf_add_real64_5d proc~hdf_add_real64_5d->interface~hdf_wrapup proc~hdf_add_real64_4d hdf_add_real64_4d proc~hdf_add_real64_4d->interface~hdf_wrapup proc~hdf_add_int_2d hdf_add_int_2d proc~hdf_add_int_2d->interface~hdf_wrapup proc~hdf_add_int_6d hdf_add_int_6d proc~hdf_add_int_6d->interface~hdf_wrapup proc~hdf_add_real32_4d hdf_add_real32_4d proc~hdf_add_real32_4d->interface~hdf_wrapup proc~hdf_add_real32_7d hdf_add_real32_7d proc~hdf_add_real32_7d->interface~hdf_wrapup proc~hdf_add_real64_7d hdf_add_real64_7d proc~hdf_add_real64_7d->interface~hdf_wrapup proc~hdf_add_real64_3d hdf_add_real64_3d proc~hdf_add_real64_3d->interface~hdf_wrapup proc~hdf_add_int_7d hdf_add_int_7d proc~hdf_add_int_7d->interface~hdf_wrapup proc~hdf_add_real32_2d hdf_add_real32_2d proc~hdf_add_real32_2d->interface~hdf_wrapup interface~hdf_add_real64_5d hdf_add_real64_5d interface~hdf_add_real64_5d->proc~hdf_add_real64_5d interface~hdf_add_real64_3d hdf_add_real64_3d interface~hdf_add_real64_3d->proc~hdf_add_real64_3d interface~hdf_add_real64_2d hdf_add_real64_2d interface~hdf_add_real64_2d->proc~hdf_add_real64_2d interface~hdf_add_real64_4d hdf_add_real64_4d interface~hdf_add_real64_4d->proc~hdf_add_real64_4d interface~hdf_add_real64_7d hdf_add_real64_7d interface~hdf_add_real64_7d->proc~hdf_add_real64_7d interface~hdf_add_real64_6d hdf_add_real64_6d interface~hdf_add_real64_6d->proc~hdf_add_real64_6d interface~hdf_add_int_7d hdf_add_int_7d interface~hdf_add_int_7d->proc~hdf_add_int_7d interface~hdf_add_real32_3d hdf_add_real32_3d interface~hdf_add_real32_3d->proc~hdf_add_real32_3d interface~hdf_add_real32_6d hdf_add_real32_6d interface~hdf_add_real32_6d->proc~hdf_add_real32_6d interface~hdf_add_real32_5d hdf_add_real32_5d interface~hdf_add_real32_5d->proc~hdf_add_real32_5d interface~hdf_add_int_5d hdf_add_int_5d interface~hdf_add_int_5d->proc~hdf_add_int_5d interface~hdf_add_int_3d hdf_add_int_3d interface~hdf_add_int_3d->proc~hdf_add_int_3d interface~hdf_add_int_6d hdf_add_int_6d interface~hdf_add_int_6d->proc~hdf_add_int_6d interface~hdf_add_real32_2d hdf_add_real32_2d interface~hdf_add_real32_2d->proc~hdf_add_real32_2d interface~hdf_add_real32_7d hdf_add_real32_7d interface~hdf_add_real32_7d->proc~hdf_add_real32_7d interface~hdf_add_int_4d hdf_add_int_4d interface~hdf_add_int_4d->proc~hdf_add_int_4d interface~hdf_add_int_2d hdf_add_int_2d interface~hdf_add_int_2d->proc~hdf_add_int_2d interface~hdf_add_real32_4d hdf_add_real32_4d interface~hdf_add_real32_4d->proc~hdf_add_real32_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_wrapup(self) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self","tags":"","loc":"interface/hdf_wrapup.html"},{"title":"hdf_set_deflate – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_set_deflate~~CallsGraph interface~hdf_set_deflate hdf_set_deflate proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~hdf_set_deflate~~CalledByGraph interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write hdf_setup_write proc~hdf_setup_write->interface~hdf_set_deflate interface~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_add_real32_6d hdf_add_real32_6d proc~hdf_add_real32_6d->interface~hdf_setup_write proc~hdf_add_int_5d hdf_add_int_5d proc~hdf_add_int_5d->interface~hdf_setup_write proc~hdf_add_int_4d hdf_add_int_4d proc~hdf_add_int_4d->interface~hdf_setup_write proc~hdf_add_real32_5d hdf_add_real32_5d proc~hdf_add_real32_5d->interface~hdf_setup_write proc~hdf_add_int_3d hdf_add_int_3d proc~hdf_add_int_3d->interface~hdf_setup_write proc~hdf_add_real64_2d hdf_add_real64_2d proc~hdf_add_real64_2d->interface~hdf_setup_write proc~hdf_add_real32_3d hdf_add_real32_3d proc~hdf_add_real32_3d->interface~hdf_setup_write proc~hdf_add_real64_6d hdf_add_real64_6d proc~hdf_add_real64_6d->interface~hdf_setup_write proc~hdf_add_real64_5d hdf_add_real64_5d proc~hdf_add_real64_5d->interface~hdf_setup_write proc~hdf_add_real64_4d hdf_add_real64_4d proc~hdf_add_real64_4d->interface~hdf_setup_write proc~hdf_add_int_2d hdf_add_int_2d proc~hdf_add_int_2d->interface~hdf_setup_write proc~hdf_add_int_6d hdf_add_int_6d proc~hdf_add_int_6d->interface~hdf_setup_write proc~hdf_add_real32_4d hdf_add_real32_4d proc~hdf_add_real32_4d->interface~hdf_setup_write proc~hdf_add_real32_7d hdf_add_real32_7d proc~hdf_add_real32_7d->interface~hdf_setup_write proc~hdf_add_real64_7d hdf_add_real64_7d proc~hdf_add_real64_7d->interface~hdf_setup_write proc~hdf_add_real64_3d hdf_add_real64_3d proc~hdf_add_real64_3d->interface~hdf_setup_write proc~hdf_add_int_7d hdf_add_int_7d proc~hdf_add_int_7d->interface~hdf_setup_write proc~hdf_add_real32_2d hdf_add_real32_2d proc~hdf_add_real32_2d->interface~hdf_setup_write interface~hdf_add_real64_5d hdf_add_real64_5d interface~hdf_add_real64_5d->proc~hdf_add_real64_5d interface~hdf_add_real64_3d hdf_add_real64_3d interface~hdf_add_real64_3d->proc~hdf_add_real64_3d interface~hdf_add_real64_2d hdf_add_real64_2d interface~hdf_add_real64_2d->proc~hdf_add_real64_2d interface~hdf_add_real64_4d hdf_add_real64_4d interface~hdf_add_real64_4d->proc~hdf_add_real64_4d interface~hdf_add_real64_7d hdf_add_real64_7d interface~hdf_add_real64_7d->proc~hdf_add_real64_7d interface~hdf_add_real64_6d hdf_add_real64_6d interface~hdf_add_real64_6d->proc~hdf_add_real64_6d interface~hdf_add_int_7d hdf_add_int_7d interface~hdf_add_int_7d->proc~hdf_add_int_7d interface~hdf_add_real32_3d hdf_add_real32_3d interface~hdf_add_real32_3d->proc~hdf_add_real32_3d interface~hdf_add_real32_6d hdf_add_real32_6d interface~hdf_add_real32_6d->proc~hdf_add_real32_6d interface~hdf_add_real32_5d hdf_add_real32_5d interface~hdf_add_real32_5d->proc~hdf_add_real32_5d interface~hdf_add_int_5d hdf_add_int_5d interface~hdf_add_int_5d->proc~hdf_add_int_5d interface~hdf_add_int_3d hdf_add_int_3d interface~hdf_add_int_3d->proc~hdf_add_int_3d interface~hdf_add_int_6d hdf_add_int_6d interface~hdf_add_int_6d->proc~hdf_add_int_6d interface~hdf_add_real32_2d hdf_add_real32_2d interface~hdf_add_real32_2d->proc~hdf_add_real32_2d interface~hdf_add_real32_7d hdf_add_real32_7d interface~hdf_add_real32_7d->proc~hdf_add_real32_7d interface~hdf_add_int_4d hdf_add_int_4d interface~hdf_add_int_4d->proc~hdf_add_int_4d interface~hdf_add_int_2d hdf_add_int_2d interface~hdf_add_int_2d->proc~hdf_add_int_2d interface~hdf_add_real32_4d hdf_add_real32_4d interface~hdf_add_real32_4d->proc~hdf_add_real32_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_set_deflate(self, dims) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer(kind=HSIZE_T), intent(in) :: dims (:)","tags":"","loc":"interface/hdf_set_deflate.html"},{"title":"hdf_add_string – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_string~~CallsGraph interface~hdf_add_string hdf_add_string proc~hdf_add_string hdf_add_string interface~hdf_add_string->proc~hdf_add_string h5ltmake_dataset_string_f h5ltmake_dataset_string_f proc~hdf_add_string->h5ltmake_dataset_string_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_string(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: value","tags":"","loc":"interface/hdf_add_string.html"},{"title":"hdf_add_int – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_int~~CallsGraph interface~hdf_add_int hdf_add_int proc~hdf_add_int hdf_add_int interface~hdf_add_int->proc~hdf_add_int h5dcreate_f h5dcreate_f proc~hdf_add_int->h5dcreate_f h5dclose_f h5dclose_f proc~hdf_add_int->h5dclose_f h5dwrite_f h5dwrite_f proc~hdf_add_int->h5dwrite_f h5screate_f h5screate_f proc~hdf_add_int->h5screate_f h5kind_to_type h5kind_to_type proc~hdf_add_int->h5kind_to_type h5sclose_f h5sclose_f proc~hdf_add_int->h5sclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_int(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value","tags":"","loc":"interface/hdf_add_int.html"},{"title":"hdf_add_int_1d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_int_1d~~CallsGraph interface~hdf_add_int_1d hdf_add_int_1d proc~hdf_add_int_1d hdf_add_int_1d interface~hdf_add_int_1d->proc~hdf_add_int_1d h5kind_to_type h5kind_to_type proc~hdf_add_int_1d->h5kind_to_type h5ltmake_dataset_f h5ltmake_dataset_f proc~hdf_add_int_1d->h5ltmake_dataset_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_int_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:)","tags":"","loc":"interface/hdf_add_int_1d.html"},{"title":"hdf_add_int_2d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_int_2d~~CallsGraph interface~hdf_add_int_2d hdf_add_int_2d proc~hdf_add_int_2d hdf_add_int_2d interface~hdf_add_int_2d->proc~hdf_add_int_2d h5dwrite_f h5dwrite_f proc~hdf_add_int_2d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_2d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_2d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_2d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_int_2dCallsGraph = svgPanZoom('#interfacehdf_add_int_2dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_int_2d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_int_2d.html"},{"title":"hdf_add_int_3d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_int_3d~~CallsGraph interface~hdf_add_int_3d hdf_add_int_3d proc~hdf_add_int_3d hdf_add_int_3d interface~hdf_add_int_3d->proc~hdf_add_int_3d h5dwrite_f h5dwrite_f proc~hdf_add_int_3d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_3d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_3d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_3d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_int_3dCallsGraph = svgPanZoom('#interfacehdf_add_int_3dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_int_3d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_int_3d.html"},{"title":"hdf_add_int_4d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_int_4d~~CallsGraph interface~hdf_add_int_4d hdf_add_int_4d proc~hdf_add_int_4d hdf_add_int_4d interface~hdf_add_int_4d->proc~hdf_add_int_4d h5dwrite_f h5dwrite_f proc~hdf_add_int_4d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_4d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_4d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_4d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_int_4dCallsGraph = svgPanZoom('#interfacehdf_add_int_4dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_int_4d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer, intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_int_4d.html"},{"title":"hdf_add_int_5d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_int_5d~~CallsGraph interface~hdf_add_int_5d hdf_add_int_5d proc~hdf_add_int_5d hdf_add_int_5d interface~hdf_add_int_5d->proc~hdf_add_int_5d h5dwrite_f h5dwrite_f proc~hdf_add_int_5d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_5d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_5d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_5d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_int_5dCallsGraph = svgPanZoom('#interfacehdf_add_int_5dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_int_5d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_int_5d.html"},{"title":"hdf_add_int_6d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_int_6d~~CallsGraph interface~hdf_add_int_6d hdf_add_int_6d proc~hdf_add_int_6d hdf_add_int_6d interface~hdf_add_int_6d->proc~hdf_add_int_6d h5dwrite_f h5dwrite_f proc~hdf_add_int_6d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_6d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_6d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_6d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_int_6dCallsGraph = svgPanZoom('#interfacehdf_add_int_6dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_int_6d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_int_6d.html"},{"title":"hdf_add_int_7d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_int_7d~~CallsGraph interface~hdf_add_int_7d hdf_add_int_7d proc~hdf_add_int_7d hdf_add_int_7d interface~hdf_add_int_7d->proc~hdf_add_int_7d h5dwrite_f h5dwrite_f proc~hdf_add_int_7d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_7d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_7d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_7d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_int_7dCallsGraph = svgPanZoom('#interfacehdf_add_int_7dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_int_7d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_int_7d.html"},{"title":"hdf_add_real64 – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real64~~CallsGraph interface~hdf_add_real64 hdf_add_real64 proc~hdf_add_real64 hdf_add_real64 interface~hdf_add_real64->proc~hdf_add_real64 h5dcreate_f h5dcreate_f proc~hdf_add_real64->h5dcreate_f h5dclose_f h5dclose_f proc~hdf_add_real64->h5dclose_f h5dwrite_f h5dwrite_f proc~hdf_add_real64->h5dwrite_f h5screate_f h5screate_f proc~hdf_add_real64->h5screate_f h5kind_to_type h5kind_to_type proc~hdf_add_real64->h5kind_to_type h5sclose_f h5sclose_f proc~hdf_add_real64->h5sclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real64(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value","tags":"","loc":"interface/hdf_add_real64.html"},{"title":"hdf_add_real64_1d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real64_1d~~CallsGraph interface~hdf_add_real64_1d hdf_add_real64_1d proc~hdf_add_real64_1d hdf_add_real64_1d interface~hdf_add_real64_1d->proc~hdf_add_real64_1d h5kind_to_type h5kind_to_type proc~hdf_add_real64_1d->h5kind_to_type h5ltmake_dataset_f h5ltmake_dataset_f proc~hdf_add_real64_1d->h5ltmake_dataset_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real64_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:)","tags":"","loc":"interface/hdf_add_real64_1d.html"},{"title":"hdf_add_real64_2d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real64_2d~~CallsGraph interface~hdf_add_real64_2d hdf_add_real64_2d proc~hdf_add_real64_2d hdf_add_real64_2d interface~hdf_add_real64_2d->proc~hdf_add_real64_2d h5dwrite_f h5dwrite_f proc~hdf_add_real64_2d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_2d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_2d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_2d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real64_2dCallsGraph = svgPanZoom('#interfacehdf_add_real64_2dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real64_2d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real64_2d.html"},{"title":"hdf_add_real64_3d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real64_3d~~CallsGraph interface~hdf_add_real64_3d hdf_add_real64_3d proc~hdf_add_real64_3d hdf_add_real64_3d interface~hdf_add_real64_3d->proc~hdf_add_real64_3d h5dwrite_f h5dwrite_f proc~hdf_add_real64_3d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_3d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_3d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_3d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real64_3dCallsGraph = svgPanZoom('#interfacehdf_add_real64_3dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real64_3d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real64_3d.html"},{"title":"hdf_add_real64_4d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real64_4d~~CallsGraph interface~hdf_add_real64_4d hdf_add_real64_4d proc~hdf_add_real64_4d hdf_add_real64_4d interface~hdf_add_real64_4d->proc~hdf_add_real64_4d h5dwrite_f h5dwrite_f proc~hdf_add_real64_4d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_4d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_4d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_4d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real64_4dCallsGraph = svgPanZoom('#interfacehdf_add_real64_4dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real64_4d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real64_4d.html"},{"title":"hdf_add_real64_5d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real64_5d~~CallsGraph interface~hdf_add_real64_5d hdf_add_real64_5d proc~hdf_add_real64_5d hdf_add_real64_5d interface~hdf_add_real64_5d->proc~hdf_add_real64_5d h5dwrite_f h5dwrite_f proc~hdf_add_real64_5d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_5d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_5d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_5d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real64_5dCallsGraph = svgPanZoom('#interfacehdf_add_real64_5dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real64_5d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real64_5d.html"},{"title":"hdf_add_real64_6d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real64_6d~~CallsGraph interface~hdf_add_real64_6d hdf_add_real64_6d proc~hdf_add_real64_6d hdf_add_real64_6d interface~hdf_add_real64_6d->proc~hdf_add_real64_6d h5dwrite_f h5dwrite_f proc~hdf_add_real64_6d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_6d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_6d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_6d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real64_6dCallsGraph = svgPanZoom('#interfacehdf_add_real64_6dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real64_6d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real64_6d.html"},{"title":"hdf_add_real64_7d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real64_7d~~CallsGraph interface~hdf_add_real64_7d hdf_add_real64_7d proc~hdf_add_real64_7d hdf_add_real64_7d interface~hdf_add_real64_7d->proc~hdf_add_real64_7d h5dwrite_f h5dwrite_f proc~hdf_add_real64_7d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_7d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_7d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_7d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real64_7dCallsGraph = svgPanZoom('#interfacehdf_add_real64_7dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real64_7d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real64_7d.html"},{"title":"hdf_add_real32 – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real32~~CallsGraph interface~hdf_add_real32 hdf_add_real32 proc~hdf_add_real32 hdf_add_real32 interface~hdf_add_real32->proc~hdf_add_real32 h5dcreate_f h5dcreate_f proc~hdf_add_real32->h5dcreate_f h5dclose_f h5dclose_f proc~hdf_add_real32->h5dclose_f h5dwrite_f h5dwrite_f proc~hdf_add_real32->h5dwrite_f h5screate_f h5screate_f proc~hdf_add_real32->h5screate_f h5kind_to_type h5kind_to_type proc~hdf_add_real32->h5kind_to_type h5sclose_f h5sclose_f proc~hdf_add_real32->h5sclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real32(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value","tags":"","loc":"interface/hdf_add_real32.html"},{"title":"hdf_add_real32_1d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real32_1d~~CallsGraph interface~hdf_add_real32_1d hdf_add_real32_1d proc~hdf_add_real32_1d hdf_add_real32_1d interface~hdf_add_real32_1d->proc~hdf_add_real32_1d h5kind_to_type h5kind_to_type proc~hdf_add_real32_1d->h5kind_to_type h5ltmake_dataset_f h5ltmake_dataset_f proc~hdf_add_real32_1d->h5ltmake_dataset_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real32_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:)","tags":"","loc":"interface/hdf_add_real32_1d.html"},{"title":"hdf_add_real32_2d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real32_2d~~CallsGraph interface~hdf_add_real32_2d hdf_add_real32_2d proc~hdf_add_real32_2d hdf_add_real32_2d interface~hdf_add_real32_2d->proc~hdf_add_real32_2d h5dwrite_f h5dwrite_f proc~hdf_add_real32_2d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_2d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_2d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_2d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real32_2dCallsGraph = svgPanZoom('#interfacehdf_add_real32_2dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real32_2d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real32_2d.html"},{"title":"hdf_add_real32_3d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real32_3d~~CallsGraph interface~hdf_add_real32_3d hdf_add_real32_3d proc~hdf_add_real32_3d hdf_add_real32_3d interface~hdf_add_real32_3d->proc~hdf_add_real32_3d h5dwrite_f h5dwrite_f proc~hdf_add_real32_3d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_3d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_3d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_3d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real32_3dCallsGraph = svgPanZoom('#interfacehdf_add_real32_3dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real32_3d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real32_3d.html"},{"title":"hdf_add_real32_4d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real32_4d~~CallsGraph interface~hdf_add_real32_4d hdf_add_real32_4d proc~hdf_add_real32_4d hdf_add_real32_4d interface~hdf_add_real32_4d->proc~hdf_add_real32_4d h5dwrite_f h5dwrite_f proc~hdf_add_real32_4d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_4d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_4d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_4d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real32_4dCallsGraph = svgPanZoom('#interfacehdf_add_real32_4dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real32_4d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real32_4d.html"},{"title":"hdf_add_real32_5d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real32_5d~~CallsGraph interface~hdf_add_real32_5d hdf_add_real32_5d proc~hdf_add_real32_5d hdf_add_real32_5d interface~hdf_add_real32_5d->proc~hdf_add_real32_5d h5dwrite_f h5dwrite_f proc~hdf_add_real32_5d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_5d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_5d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_5d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real32_5dCallsGraph = svgPanZoom('#interfacehdf_add_real32_5dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real32_5d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real32_5d.html"},{"title":"hdf_add_real32_6d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real32_6d~~CallsGraph interface~hdf_add_real32_6d hdf_add_real32_6d proc~hdf_add_real32_6d hdf_add_real32_6d interface~hdf_add_real32_6d->proc~hdf_add_real32_6d h5dwrite_f h5dwrite_f proc~hdf_add_real32_6d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_6d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_6d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_6d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real32_6dCallsGraph = svgPanZoom('#interfacehdf_add_real32_6dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real32_6d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real32_6d.html"},{"title":"hdf_add_real32_7d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_add_real32_7d~~CallsGraph interface~hdf_add_real32_7d hdf_add_real32_7d proc~hdf_add_real32_7d hdf_add_real32_7d interface~hdf_add_real32_7d->proc~hdf_add_real32_7d h5dwrite_f h5dwrite_f proc~hdf_add_real32_7d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_7d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_7d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_7d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var paninterfacehdf_add_real32_7dCallsGraph = svgPanZoom('#interfacehdf_add_real32_7dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_add_real32_7d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"interface/hdf_add_real32_7d.html"},{"title":"hdf_get_shape – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_shape~~CallsGraph interface~hdf_get_shape hdf_get_shape proc~hdf_get_shape hdf_get_shape interface~hdf_get_shape->proc~hdf_get_shape h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_shape->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_get_shape->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_shape(self, dname, dims) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:)","tags":"","loc":"interface/hdf_get_shape.html"},{"title":"hdf_get_string – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_string~~CallsGraph interface~hdf_get_string hdf_get_string proc~hdf_get_string hdf_get_string interface~hdf_get_string->proc~hdf_get_string h5ltread_dataset_string_f h5ltread_dataset_string_f proc~hdf_get_string->h5ltread_dataset_string_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_string(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(out) :: value","tags":"","loc":"interface/hdf_get_string.html"},{"title":"hdf_get_int – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_int~~CallsGraph interface~hdf_get_int hdf_get_int proc~hdf_get_int hdf_get_int interface~hdf_get_int->proc~hdf_get_int h5dclose_f h5dclose_f proc~hdf_get_int->h5dclose_f h5dread_f h5dread_f proc~hdf_get_int->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_int->h5dopen_f h5kind_to_type h5kind_to_type proc~hdf_get_int->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_int(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out) :: value","tags":"","loc":"interface/hdf_get_int.html"},{"title":"hdf_get_int_1d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_int_1d~~CallsGraph interface~hdf_get_int_1d hdf_get_int_1d proc~hdf_get_int_1d hdf_get_int_1d interface~hdf_get_int_1d->proc~hdf_get_int_1d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_1d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_1d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_1d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_int_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:)","tags":"","loc":"interface/hdf_get_int_1d.html"},{"title":"hdf_get_int_2d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_int_2d~~CallsGraph interface~hdf_get_int_2d hdf_get_int_2d proc~hdf_get_int_2d hdf_get_int_2d interface~hdf_get_int_2d->proc~hdf_get_int_2d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_2d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_2d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_2d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_int_2d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:)","tags":"","loc":"interface/hdf_get_int_2d.html"},{"title":"hdf_get_int_3d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_int_3d~~CallsGraph interface~hdf_get_int_3d hdf_get_int_3d proc~hdf_get_int_3d hdf_get_int_3d interface~hdf_get_int_3d->proc~hdf_get_int_3d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_3d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_3d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_3d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_int_3d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:)","tags":"","loc":"interface/hdf_get_int_3d.html"},{"title":"hdf_get_int_4d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_int_4d~~CallsGraph interface~hdf_get_int_4d hdf_get_int_4d proc~hdf_get_int_4d hdf_get_int_4d interface~hdf_get_int_4d->proc~hdf_get_int_4d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_4d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_4d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_4d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_int_4d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:)","tags":"","loc":"interface/hdf_get_int_4d.html"},{"title":"hdf_get_int_5d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_int_5d~~CallsGraph interface~hdf_get_int_5d hdf_get_int_5d proc~hdf_get_int_5d hdf_get_int_5d interface~hdf_get_int_5d->proc~hdf_get_int_5d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_5d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_5d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_5d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_int_5d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:)","tags":"","loc":"interface/hdf_get_int_5d.html"},{"title":"hdf_get_int_6d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_int_6d~~CallsGraph interface~hdf_get_int_6d hdf_get_int_6d proc~hdf_get_int_6d hdf_get_int_6d interface~hdf_get_int_6d->proc~hdf_get_int_6d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_6d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_6d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_6d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_int_6d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:,:)","tags":"","loc":"interface/hdf_get_int_6d.html"},{"title":"hdf_get_int_7d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_int_7d~~CallsGraph interface~hdf_get_int_7d hdf_get_int_7d proc~hdf_get_int_7d hdf_get_int_7d interface~hdf_get_int_7d->proc~hdf_get_int_7d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_7d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_7d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_7d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_int_7d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:,:,:)","tags":"","loc":"interface/hdf_get_int_7d.html"},{"title":"hdf_get_real32 – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real32~~CallsGraph interface~hdf_get_real32 hdf_get_real32 proc~hdf_get_real32 hdf_get_real32 interface~hdf_get_real32->proc~hdf_get_real32 h5dclose_f h5dclose_f proc~hdf_get_real32->h5dclose_f h5dread_f h5dread_f proc~hdf_get_real32->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_real32->h5dopen_f h5kind_to_type h5kind_to_type proc~hdf_get_real32->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real32(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out) :: value","tags":"","loc":"interface/hdf_get_real32.html"},{"title":"hdf_get_real32_1d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real32_1d~~CallsGraph interface~hdf_get_real32_1d hdf_get_real32_1d proc~hdf_get_real32_1d hdf_get_real32_1d interface~hdf_get_real32_1d->proc~hdf_get_real32_1d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_1d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_1d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_1d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real32_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:)","tags":"","loc":"interface/hdf_get_real32_1d.html"},{"title":"hdf_get_real32_2d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real32_2d~~CallsGraph interface~hdf_get_real32_2d hdf_get_real32_2d proc~hdf_get_real32_2d hdf_get_real32_2d interface~hdf_get_real32_2d->proc~hdf_get_real32_2d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_2d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_2d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_2d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real32_2d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:)","tags":"","loc":"interface/hdf_get_real32_2d.html"},{"title":"hdf_get_real32_3d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real32_3d~~CallsGraph interface~hdf_get_real32_3d hdf_get_real32_3d proc~hdf_get_real32_3d hdf_get_real32_3d interface~hdf_get_real32_3d->proc~hdf_get_real32_3d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_3d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_3d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_3d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real32_3d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:)","tags":"","loc":"interface/hdf_get_real32_3d.html"},{"title":"hdf_get_real32_4d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real32_4d~~CallsGraph interface~hdf_get_real32_4d hdf_get_real32_4d proc~hdf_get_real32_4d hdf_get_real32_4d interface~hdf_get_real32_4d->proc~hdf_get_real32_4d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_4d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_4d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_4d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real32_4d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:)","tags":"","loc":"interface/hdf_get_real32_4d.html"},{"title":"hdf_get_real32_5d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real32_5d~~CallsGraph interface~hdf_get_real32_5d hdf_get_real32_5d proc~hdf_get_real32_5d hdf_get_real32_5d interface~hdf_get_real32_5d->proc~hdf_get_real32_5d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_5d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_5d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_5d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real32_5d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:)","tags":"","loc":"interface/hdf_get_real32_5d.html"},{"title":"hdf_get_real32_6d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real32_6d~~CallsGraph interface~hdf_get_real32_6d hdf_get_real32_6d proc~hdf_get_real32_6d hdf_get_real32_6d interface~hdf_get_real32_6d->proc~hdf_get_real32_6d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_6d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_6d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_6d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real32_6d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:,:)","tags":"","loc":"interface/hdf_get_real32_6d.html"},{"title":"hdf_get_real32_7d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real32_7d~~CallsGraph interface~hdf_get_real32_7d hdf_get_real32_7d proc~hdf_get_real32_7d hdf_get_real32_7d interface~hdf_get_real32_7d->proc~hdf_get_real32_7d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_7d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_7d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_7d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real32_7d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:,:,:)","tags":"","loc":"interface/hdf_get_real32_7d.html"},{"title":"hdf_get_real64 – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real64~~CallsGraph interface~hdf_get_real64 hdf_get_real64 proc~hdf_get_real64 hdf_get_real64 interface~hdf_get_real64->proc~hdf_get_real64 h5dclose_f h5dclose_f proc~hdf_get_real64->h5dclose_f h5dread_f h5dread_f proc~hdf_get_real64->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_real64->h5dopen_f h5kind_to_type h5kind_to_type proc~hdf_get_real64->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real64(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out) :: value","tags":"","loc":"interface/hdf_get_real64.html"},{"title":"hdf_get_real64_1d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real64_1d~~CallsGraph interface~hdf_get_real64_1d hdf_get_real64_1d proc~hdf_get_real64_1d hdf_get_real64_1d interface~hdf_get_real64_1d->proc~hdf_get_real64_1d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_1d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_1d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_1d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real64_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:)","tags":"","loc":"interface/hdf_get_real64_1d.html"},{"title":"hdf_get_real64_2d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real64_2d~~CallsGraph interface~hdf_get_real64_2d hdf_get_real64_2d proc~hdf_get_real64_2d hdf_get_real64_2d interface~hdf_get_real64_2d->proc~hdf_get_real64_2d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_2d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_2d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_2d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real64_2d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:)","tags":"","loc":"interface/hdf_get_real64_2d.html"},{"title":"hdf_get_real64_3d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real64_3d~~CallsGraph interface~hdf_get_real64_3d hdf_get_real64_3d proc~hdf_get_real64_3d hdf_get_real64_3d interface~hdf_get_real64_3d->proc~hdf_get_real64_3d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_3d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_3d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_3d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real64_3d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:)","tags":"","loc":"interface/hdf_get_real64_3d.html"},{"title":"hdf_get_real64_4d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real64_4d~~CallsGraph interface~hdf_get_real64_4d hdf_get_real64_4d proc~hdf_get_real64_4d hdf_get_real64_4d interface~hdf_get_real64_4d->proc~hdf_get_real64_4d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_4d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_4d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_4d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real64_4d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:)","tags":"","loc":"interface/hdf_get_real64_4d.html"},{"title":"hdf_get_real64_5d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real64_5d~~CallsGraph interface~hdf_get_real64_5d hdf_get_real64_5d proc~hdf_get_real64_5d hdf_get_real64_5d interface~hdf_get_real64_5d->proc~hdf_get_real64_5d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_5d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_5d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_5d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real64_5d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:)","tags":"","loc":"interface/hdf_get_real64_5d.html"},{"title":"hdf_get_real64_6d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real64_6d~~CallsGraph interface~hdf_get_real64_6d hdf_get_real64_6d proc~hdf_get_real64_6d hdf_get_real64_6d interface~hdf_get_real64_6d->proc~hdf_get_real64_6d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_6d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_6d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_6d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real64_6d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:,:)","tags":"","loc":"interface/hdf_get_real64_6d.html"},{"title":"hdf_get_real64_7d – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_get_real64_7d~~CallsGraph interface~hdf_get_real64_7d hdf_get_real64_7d proc~hdf_get_real64_7d hdf_get_real64_7d interface~hdf_get_real64_7d->proc~hdf_get_real64_7d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_7d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_7d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_7d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_get_real64_7d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:,:,:)","tags":"","loc":"interface/hdf_get_real64_7d.html"},{"title":"hdf_open_group – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_open_group~~CallsGraph interface~hdf_open_group hdf_open_group proc~hdf_open_group hdf_open_group interface~hdf_open_group->proc~hdf_open_group h5gopen_f h5gopen_f proc~hdf_open_group->h5gopen_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_open_group(self, gname) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname","tags":"","loc":"interface/hdf_open_group.html"},{"title":"hdf_close_group – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~hdf_close_group~~CallsGraph interface~hdf_close_group hdf_close_group proc~hdf_close_group hdf_close_group interface~hdf_close_group->proc~hdf_close_group h5gclose_f h5gclose_f proc~hdf_close_group->h5gclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine hdf_close_group(self) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self","tags":"","loc":"interface/hdf_close_group.html"},{"title":"writeattr – object-oriented Fortran 2018 HDF5 interface","text":"interface Submodules Calls interface~~writeattr~~CallsGraph interface~writeattr writeattr proc~writeattr writeattr interface~writeattr->proc~writeattr h5ltset_attribute_string_f h5ltset_attribute_string_f proc~writeattr->h5ltset_attribute_string_f h5ltpath_valid_f h5ltpath_valid_f proc~writeattr->h5ltpath_valid_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module subroutine writeattr(self, dname, attr, attrval) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval","tags":"","loc":"interface/writeattr.html"},{"title":"toLower – object-oriented Fortran 2018 HDF5 interface","text":"public elemental function toLower(str) convert uppercase characters to lowercase can be trivially extended to non-ASCII Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=len(str)) Called by proc~~tolower~~CalledByGraph proc~tolower toLower proc~hdf_initialize hdf_initialize proc~hdf_initialize->proc~tolower Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/tolower.html"},{"title":"strip_trailing_null – object-oriented Fortran 2018 HDF5 interface","text":"public pure function strip_trailing_null(str) result(stripped) strip trailing C null from strings Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=:),\n  allocatable Contents None","tags":"","loc":"proc/strip_trailing_null.html"},{"title":"hdf_get_shape – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_shape module subroutine hdf_get_shape(self, dname, dims) Interface → must get dims before info, as \"dims\" must be allocated or segfault occurs. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) Calls proc~~hdf_get_shape~~CallsGraph proc~hdf_get_shape hdf_get_shape h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_shape->h5ltget_dataset_info_f h5ltget_dataset_ndims_f h5ltget_dataset_ndims_f proc~hdf_get_shape->h5ltget_dataset_ndims_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_shape~~CalledByGraph proc~hdf_get_shape hdf_get_shape interface~hdf_get_shape hdf_get_shape interface~hdf_get_shape->proc~hdf_get_shape Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_shape.html"},{"title":"hdf_get_string – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_string module subroutine hdf_get_string(self, dname, value) Interface → till buffer is full This is a random integer, how to retrieve length of string? Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(out) :: value Calls proc~~hdf_get_string~~CallsGraph proc~hdf_get_string hdf_get_string h5ltread_dataset_string_f h5ltread_dataset_string_f proc~hdf_get_string->h5ltread_dataset_string_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_string~~CalledByGraph proc~hdf_get_string hdf_get_string interface~hdf_get_string hdf_get_string interface~hdf_get_string->proc~hdf_get_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_string.html"},{"title":"hdf_get_int – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_int module subroutine hdf_get_int(self, dname, value) Interface → open dataset\n read dataset\n close dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out) :: value Calls proc~~hdf_get_int~~CallsGraph proc~hdf_get_int hdf_get_int h5dclose_f h5dclose_f proc~hdf_get_int->h5dclose_f h5dread_f h5dread_f proc~hdf_get_int->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_int->h5dopen_f h5kind_to_type h5kind_to_type proc~hdf_get_int->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_int~~CalledByGraph proc~hdf_get_int hdf_get_int interface~hdf_get_int hdf_get_int interface~hdf_get_int->proc~hdf_get_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_int.html"},{"title":"hdf_get_int_1d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_int_1d module subroutine hdf_get_int_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:) Calls proc~~hdf_get_int_1d~~CallsGraph proc~hdf_get_int_1d hdf_get_int_1d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_1d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_1d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_1d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_int_1d~~CalledByGraph proc~hdf_get_int_1d hdf_get_int_1d interface~hdf_get_int_1d hdf_get_int_1d interface~hdf_get_int_1d->proc~hdf_get_int_1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_int_1d.html"},{"title":"hdf_get_int_2d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_int_2d module subroutine hdf_get_int_2d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:) Calls proc~~hdf_get_int_2d~~CallsGraph proc~hdf_get_int_2d hdf_get_int_2d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_2d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_2d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_2d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_int_2d~~CalledByGraph proc~hdf_get_int_2d hdf_get_int_2d interface~hdf_get_int_2d hdf_get_int_2d interface~hdf_get_int_2d->proc~hdf_get_int_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_int_2d.html"},{"title":"hdf_get_int_3d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_int_3d module subroutine hdf_get_int_3d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:) Calls proc~~hdf_get_int_3d~~CallsGraph proc~hdf_get_int_3d hdf_get_int_3d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_3d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_3d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_3d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_int_3d~~CalledByGraph proc~hdf_get_int_3d hdf_get_int_3d interface~hdf_get_int_3d hdf_get_int_3d interface~hdf_get_int_3d->proc~hdf_get_int_3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_int_3d.html"},{"title":"hdf_get_int_4d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_int_4d module subroutine hdf_get_int_4d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:) Calls proc~~hdf_get_int_4d~~CallsGraph proc~hdf_get_int_4d hdf_get_int_4d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_4d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_4d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_4d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_int_4d~~CalledByGraph proc~hdf_get_int_4d hdf_get_int_4d interface~hdf_get_int_4d hdf_get_int_4d interface~hdf_get_int_4d->proc~hdf_get_int_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_int_4d.html"},{"title":"hdf_get_int_5d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_int_5d module subroutine hdf_get_int_5d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:) Calls proc~~hdf_get_int_5d~~CallsGraph proc~hdf_get_int_5d hdf_get_int_5d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_5d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_5d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_5d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_int_5d~~CalledByGraph proc~hdf_get_int_5d hdf_get_int_5d interface~hdf_get_int_5d hdf_get_int_5d interface~hdf_get_int_5d->proc~hdf_get_int_5d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_int_5d.html"},{"title":"hdf_get_int_6d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_int_6d module subroutine hdf_get_int_6d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:,:) Calls proc~~hdf_get_int_6d~~CallsGraph proc~hdf_get_int_6d hdf_get_int_6d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_6d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_6d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_6d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_int_6d~~CalledByGraph proc~hdf_get_int_6d hdf_get_int_6d interface~hdf_get_int_6d hdf_get_int_6d interface~hdf_get_int_6d->proc~hdf_get_int_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_int_6d.html"},{"title":"hdf_get_int_7d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_int_7d module subroutine hdf_get_int_7d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:,:,:) Calls proc~~hdf_get_int_7d~~CallsGraph proc~hdf_get_int_7d hdf_get_int_7d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_int_7d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_int_7d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_int_7d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_int_7d~~CalledByGraph proc~hdf_get_int_7d hdf_get_int_7d interface~hdf_get_int_7d hdf_get_int_7d interface~hdf_get_int_7d->proc~hdf_get_int_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_int_7d.html"},{"title":"hdf_get_real32 – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real32 module subroutine hdf_get_real32(self, dname, value) Interface → open dataset\n read dataset\n close dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out) :: value Calls proc~~hdf_get_real32~~CallsGraph proc~hdf_get_real32 hdf_get_real32 h5dclose_f h5dclose_f proc~hdf_get_real32->h5dclose_f h5dread_f h5dread_f proc~hdf_get_real32->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_real32->h5dopen_f h5kind_to_type h5kind_to_type proc~hdf_get_real32->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real32~~CalledByGraph proc~hdf_get_real32 hdf_get_real32 interface~hdf_get_real32 hdf_get_real32 interface~hdf_get_real32->proc~hdf_get_real32 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real32.html"},{"title":"hdf_get_real32_1d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real32_1d module subroutine hdf_get_real32_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:) Calls proc~~hdf_get_real32_1d~~CallsGraph proc~hdf_get_real32_1d hdf_get_real32_1d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_1d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_1d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_1d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real32_1d~~CalledByGraph proc~hdf_get_real32_1d hdf_get_real32_1d interface~hdf_get_real32_1d hdf_get_real32_1d interface~hdf_get_real32_1d->proc~hdf_get_real32_1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real32_1d.html"},{"title":"hdf_get_real32_2d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real32_2d module subroutine hdf_get_real32_2d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:) Calls proc~~hdf_get_real32_2d~~CallsGraph proc~hdf_get_real32_2d hdf_get_real32_2d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_2d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_2d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_2d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real32_2d~~CalledByGraph proc~hdf_get_real32_2d hdf_get_real32_2d interface~hdf_get_real32_2d hdf_get_real32_2d interface~hdf_get_real32_2d->proc~hdf_get_real32_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real32_2d.html"},{"title":"hdf_get_real32_3d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real32_3d module subroutine hdf_get_real32_3d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:) Calls proc~~hdf_get_real32_3d~~CallsGraph proc~hdf_get_real32_3d hdf_get_real32_3d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_3d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_3d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_3d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real32_3d~~CalledByGraph proc~hdf_get_real32_3d hdf_get_real32_3d interface~hdf_get_real32_3d hdf_get_real32_3d interface~hdf_get_real32_3d->proc~hdf_get_real32_3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real32_3d.html"},{"title":"hdf_get_real32_4d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real32_4d module subroutine hdf_get_real32_4d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:) Calls proc~~hdf_get_real32_4d~~CallsGraph proc~hdf_get_real32_4d hdf_get_real32_4d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_4d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_4d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_4d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real32_4d~~CalledByGraph proc~hdf_get_real32_4d hdf_get_real32_4d interface~hdf_get_real32_4d hdf_get_real32_4d interface~hdf_get_real32_4d->proc~hdf_get_real32_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real32_4d.html"},{"title":"hdf_get_real32_5d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real32_5d module subroutine hdf_get_real32_5d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:) Calls proc~~hdf_get_real32_5d~~CallsGraph proc~hdf_get_real32_5d hdf_get_real32_5d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_5d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_5d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_5d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real32_5d~~CalledByGraph proc~hdf_get_real32_5d hdf_get_real32_5d interface~hdf_get_real32_5d hdf_get_real32_5d interface~hdf_get_real32_5d->proc~hdf_get_real32_5d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real32_5d.html"},{"title":"hdf_get_real32_6d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real32_6d module subroutine hdf_get_real32_6d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:,:) Calls proc~~hdf_get_real32_6d~~CallsGraph proc~hdf_get_real32_6d hdf_get_real32_6d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_6d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_6d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_6d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real32_6d~~CalledByGraph proc~hdf_get_real32_6d hdf_get_real32_6d interface~hdf_get_real32_6d hdf_get_real32_6d interface~hdf_get_real32_6d->proc~hdf_get_real32_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real32_6d.html"},{"title":"hdf_get_real32_7d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real32_7d module subroutine hdf_get_real32_7d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:,:,:) Calls proc~~hdf_get_real32_7d~~CallsGraph proc~hdf_get_real32_7d hdf_get_real32_7d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real32_7d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real32_7d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real32_7d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real32_7d~~CalledByGraph proc~hdf_get_real32_7d hdf_get_real32_7d interface~hdf_get_real32_7d hdf_get_real32_7d interface~hdf_get_real32_7d->proc~hdf_get_real32_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real32_7d.html"},{"title":"hdf_get_real64 – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real64 module subroutine hdf_get_real64(self, dname, value) Interface → open dataset\n read dataset\n close dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out) :: value Calls proc~~hdf_get_real64~~CallsGraph proc~hdf_get_real64 hdf_get_real64 h5dclose_f h5dclose_f proc~hdf_get_real64->h5dclose_f h5dread_f h5dread_f proc~hdf_get_real64->h5dread_f h5dopen_f h5dopen_f proc~hdf_get_real64->h5dopen_f h5kind_to_type h5kind_to_type proc~hdf_get_real64->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real64~~CalledByGraph proc~hdf_get_real64 hdf_get_real64 interface~hdf_get_real64 hdf_get_real64 interface~hdf_get_real64->proc~hdf_get_real64 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real64.html"},{"title":"hdf_get_real64_1d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real64_1d module subroutine hdf_get_real64_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:) Calls proc~~hdf_get_real64_1d~~CallsGraph proc~hdf_get_real64_1d hdf_get_real64_1d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_1d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_1d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_1d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real64_1d~~CalledByGraph proc~hdf_get_real64_1d hdf_get_real64_1d interface~hdf_get_real64_1d hdf_get_real64_1d interface~hdf_get_real64_1d->proc~hdf_get_real64_1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real64_1d.html"},{"title":"hdf_get_real64_2d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real64_2d module subroutine hdf_get_real64_2d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:) Calls proc~~hdf_get_real64_2d~~CallsGraph proc~hdf_get_real64_2d hdf_get_real64_2d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_2d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_2d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_2d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real64_2d~~CalledByGraph proc~hdf_get_real64_2d hdf_get_real64_2d interface~hdf_get_real64_2d hdf_get_real64_2d interface~hdf_get_real64_2d->proc~hdf_get_real64_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real64_2d.html"},{"title":"hdf_get_real64_3d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real64_3d module subroutine hdf_get_real64_3d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:) Calls proc~~hdf_get_real64_3d~~CallsGraph proc~hdf_get_real64_3d hdf_get_real64_3d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_3d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_3d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_3d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real64_3d~~CalledByGraph proc~hdf_get_real64_3d hdf_get_real64_3d interface~hdf_get_real64_3d hdf_get_real64_3d interface~hdf_get_real64_3d->proc~hdf_get_real64_3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real64_3d.html"},{"title":"hdf_get_real64_4d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real64_4d module subroutine hdf_get_real64_4d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:) Calls proc~~hdf_get_real64_4d~~CallsGraph proc~hdf_get_real64_4d hdf_get_real64_4d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_4d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_4d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_4d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real64_4d~~CalledByGraph proc~hdf_get_real64_4d hdf_get_real64_4d interface~hdf_get_real64_4d hdf_get_real64_4d interface~hdf_get_real64_4d->proc~hdf_get_real64_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real64_4d.html"},{"title":"hdf_get_real64_5d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real64_5d module subroutine hdf_get_real64_5d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:) Calls proc~~hdf_get_real64_5d~~CallsGraph proc~hdf_get_real64_5d hdf_get_real64_5d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_5d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_5d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_5d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real64_5d~~CalledByGraph proc~hdf_get_real64_5d hdf_get_real64_5d interface~hdf_get_real64_5d hdf_get_real64_5d interface~hdf_get_real64_5d->proc~hdf_get_real64_5d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real64_5d.html"},{"title":"hdf_get_real64_6d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real64_6d module subroutine hdf_get_real64_6d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:,:) Calls proc~~hdf_get_real64_6d~~CallsGraph proc~hdf_get_real64_6d hdf_get_real64_6d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_6d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_6d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_6d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real64_6d~~CalledByGraph proc~hdf_get_real64_6d hdf_get_real64_6d interface~hdf_get_real64_6d hdf_get_real64_6d interface~hdf_get_real64_6d->proc~hdf_get_real64_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real64_6d.html"},{"title":"hdf_get_real64_7d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_get_real64_7d module subroutine hdf_get_real64_7d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:,:,:) Calls proc~~hdf_get_real64_7d~~CallsGraph proc~hdf_get_real64_7d hdf_get_real64_7d h5ltget_dataset_info_f h5ltget_dataset_info_f proc~hdf_get_real64_7d->h5ltget_dataset_info_f h5ltread_dataset_f h5ltread_dataset_f proc~hdf_get_real64_7d->h5ltread_dataset_f h5kind_to_type h5kind_to_type proc~hdf_get_real64_7d->h5kind_to_type Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_get_real64_7d~~CalledByGraph proc~hdf_get_real64_7d hdf_get_real64_7d interface~hdf_get_real64_7d hdf_get_real64_7d interface~hdf_get_real64_7d->proc~hdf_get_real64_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_get_real64_7d.html"},{"title":"writeattr – object-oriented Fortran 2018 HDF5 interface","text":"module procedure writeattr module subroutine writeattr(self, dname, attr, attrval) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval Calls proc~~writeattr~~CallsGraph proc~writeattr writeattr h5ltset_attribute_string_f h5ltset_attribute_string_f proc~writeattr->h5ltset_attribute_string_f h5ltpath_valid_f h5ltpath_valid_f proc~writeattr->h5ltpath_valid_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~writeattr~~CalledByGraph proc~writeattr writeattr interface~writeattr writeattr interface~writeattr->proc~writeattr Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/writeattr.html"},{"title":"hdf_add_string – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_string module subroutine hdf_add_string(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: value Calls proc~~hdf_add_string~~CallsGraph proc~hdf_add_string hdf_add_string h5ltmake_dataset_string_f h5ltmake_dataset_string_f proc~hdf_add_string->h5ltmake_dataset_string_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_string~~CalledByGraph proc~hdf_add_string hdf_add_string interface~hdf_add_string hdf_add_string interface~hdf_add_string->proc~hdf_add_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_string.html"},{"title":"hdf_setup_write – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_setup_write module subroutine hdf_setup_write(self, dname, dtype, dims, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=HID_T), intent(in) :: dtype integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_setup_write~~CallsGraph proc~hdf_setup_write hdf_setup_write h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_setup_write~~CalledByGraph proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_add_real32_6d hdf_add_real32_6d proc~hdf_add_real32_6d->interface~hdf_setup_write proc~hdf_add_int_5d hdf_add_int_5d proc~hdf_add_int_5d->interface~hdf_setup_write proc~hdf_add_int_4d hdf_add_int_4d proc~hdf_add_int_4d->interface~hdf_setup_write proc~hdf_add_real32_5d hdf_add_real32_5d proc~hdf_add_real32_5d->interface~hdf_setup_write proc~hdf_add_int_3d hdf_add_int_3d proc~hdf_add_int_3d->interface~hdf_setup_write proc~hdf_add_real64_2d hdf_add_real64_2d proc~hdf_add_real64_2d->interface~hdf_setup_write proc~hdf_add_real32_3d hdf_add_real32_3d proc~hdf_add_real32_3d->interface~hdf_setup_write proc~hdf_add_real64_6d hdf_add_real64_6d proc~hdf_add_real64_6d->interface~hdf_setup_write proc~hdf_add_real64_5d hdf_add_real64_5d proc~hdf_add_real64_5d->interface~hdf_setup_write proc~hdf_add_real64_4d hdf_add_real64_4d proc~hdf_add_real64_4d->interface~hdf_setup_write proc~hdf_add_int_2d hdf_add_int_2d proc~hdf_add_int_2d->interface~hdf_setup_write proc~hdf_add_int_6d hdf_add_int_6d proc~hdf_add_int_6d->interface~hdf_setup_write proc~hdf_add_real32_4d hdf_add_real32_4d proc~hdf_add_real32_4d->interface~hdf_setup_write proc~hdf_add_real32_7d hdf_add_real32_7d proc~hdf_add_real32_7d->interface~hdf_setup_write proc~hdf_add_real64_7d hdf_add_real64_7d proc~hdf_add_real64_7d->interface~hdf_setup_write proc~hdf_add_real64_3d hdf_add_real64_3d proc~hdf_add_real64_3d->interface~hdf_setup_write proc~hdf_add_int_7d hdf_add_int_7d proc~hdf_add_int_7d->interface~hdf_setup_write proc~hdf_add_real32_2d hdf_add_real32_2d proc~hdf_add_real32_2d->interface~hdf_setup_write interface~hdf_add_real64_5d hdf_add_real64_5d interface~hdf_add_real64_5d->proc~hdf_add_real64_5d interface~hdf_add_real64_3d hdf_add_real64_3d interface~hdf_add_real64_3d->proc~hdf_add_real64_3d interface~hdf_add_real64_2d hdf_add_real64_2d interface~hdf_add_real64_2d->proc~hdf_add_real64_2d interface~hdf_add_real64_4d hdf_add_real64_4d interface~hdf_add_real64_4d->proc~hdf_add_real64_4d interface~hdf_add_real64_7d hdf_add_real64_7d interface~hdf_add_real64_7d->proc~hdf_add_real64_7d interface~hdf_add_real64_6d hdf_add_real64_6d interface~hdf_add_real64_6d->proc~hdf_add_real64_6d interface~hdf_add_int_7d hdf_add_int_7d interface~hdf_add_int_7d->proc~hdf_add_int_7d interface~hdf_add_real32_3d hdf_add_real32_3d interface~hdf_add_real32_3d->proc~hdf_add_real32_3d interface~hdf_add_real32_6d hdf_add_real32_6d interface~hdf_add_real32_6d->proc~hdf_add_real32_6d interface~hdf_add_real32_5d hdf_add_real32_5d interface~hdf_add_real32_5d->proc~hdf_add_real32_5d interface~hdf_add_int_5d hdf_add_int_5d interface~hdf_add_int_5d->proc~hdf_add_int_5d interface~hdf_add_int_3d hdf_add_int_3d interface~hdf_add_int_3d->proc~hdf_add_int_3d interface~hdf_add_int_6d hdf_add_int_6d interface~hdf_add_int_6d->proc~hdf_add_int_6d interface~hdf_add_real32_2d hdf_add_real32_2d interface~hdf_add_real32_2d->proc~hdf_add_real32_2d interface~hdf_add_real32_7d hdf_add_real32_7d interface~hdf_add_real32_7d->proc~hdf_add_real32_7d interface~hdf_add_int_4d hdf_add_int_4d interface~hdf_add_int_4d->proc~hdf_add_int_4d interface~hdf_add_int_2d hdf_add_int_2d interface~hdf_add_int_2d->proc~hdf_add_int_2d interface~hdf_add_real32_4d hdf_add_real32_4d interface~hdf_add_real32_4d->proc~hdf_add_real32_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_setup_write.html"},{"title":"hdf_set_deflate – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_set_deflate module subroutine hdf_set_deflate(self, dims) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer(kind=HSIZE_T), intent(in) :: dims (:) Calls proc~~hdf_set_deflate~~CallsGraph proc~hdf_set_deflate hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_set_deflate~~CalledByGraph proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate proc~hdf_setup_write hdf_setup_write proc~hdf_setup_write->interface~hdf_set_deflate interface~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_add_real32_6d hdf_add_real32_6d proc~hdf_add_real32_6d->interface~hdf_setup_write proc~hdf_add_int_5d hdf_add_int_5d proc~hdf_add_int_5d->interface~hdf_setup_write proc~hdf_add_int_4d hdf_add_int_4d proc~hdf_add_int_4d->interface~hdf_setup_write proc~hdf_add_real32_5d hdf_add_real32_5d proc~hdf_add_real32_5d->interface~hdf_setup_write proc~hdf_add_int_3d hdf_add_int_3d proc~hdf_add_int_3d->interface~hdf_setup_write proc~hdf_add_real64_2d hdf_add_real64_2d proc~hdf_add_real64_2d->interface~hdf_setup_write proc~hdf_add_real32_3d hdf_add_real32_3d proc~hdf_add_real32_3d->interface~hdf_setup_write proc~hdf_add_real64_6d hdf_add_real64_6d proc~hdf_add_real64_6d->interface~hdf_setup_write proc~hdf_add_real64_5d hdf_add_real64_5d proc~hdf_add_real64_5d->interface~hdf_setup_write proc~hdf_add_real64_4d hdf_add_real64_4d proc~hdf_add_real64_4d->interface~hdf_setup_write proc~hdf_add_int_2d hdf_add_int_2d proc~hdf_add_int_2d->interface~hdf_setup_write proc~hdf_add_int_6d hdf_add_int_6d proc~hdf_add_int_6d->interface~hdf_setup_write proc~hdf_add_real32_4d hdf_add_real32_4d proc~hdf_add_real32_4d->interface~hdf_setup_write proc~hdf_add_real32_7d hdf_add_real32_7d proc~hdf_add_real32_7d->interface~hdf_setup_write proc~hdf_add_real64_7d hdf_add_real64_7d proc~hdf_add_real64_7d->interface~hdf_setup_write proc~hdf_add_real64_3d hdf_add_real64_3d proc~hdf_add_real64_3d->interface~hdf_setup_write proc~hdf_add_int_7d hdf_add_int_7d proc~hdf_add_int_7d->interface~hdf_setup_write proc~hdf_add_real32_2d hdf_add_real32_2d proc~hdf_add_real32_2d->interface~hdf_setup_write interface~hdf_add_real64_5d hdf_add_real64_5d interface~hdf_add_real64_5d->proc~hdf_add_real64_5d interface~hdf_add_real64_3d hdf_add_real64_3d interface~hdf_add_real64_3d->proc~hdf_add_real64_3d interface~hdf_add_real64_2d hdf_add_real64_2d interface~hdf_add_real64_2d->proc~hdf_add_real64_2d interface~hdf_add_real64_4d hdf_add_real64_4d interface~hdf_add_real64_4d->proc~hdf_add_real64_4d interface~hdf_add_real64_7d hdf_add_real64_7d interface~hdf_add_real64_7d->proc~hdf_add_real64_7d interface~hdf_add_real64_6d hdf_add_real64_6d interface~hdf_add_real64_6d->proc~hdf_add_real64_6d interface~hdf_add_int_7d hdf_add_int_7d interface~hdf_add_int_7d->proc~hdf_add_int_7d interface~hdf_add_real32_3d hdf_add_real32_3d interface~hdf_add_real32_3d->proc~hdf_add_real32_3d interface~hdf_add_real32_6d hdf_add_real32_6d interface~hdf_add_real32_6d->proc~hdf_add_real32_6d interface~hdf_add_real32_5d hdf_add_real32_5d interface~hdf_add_real32_5d->proc~hdf_add_real32_5d interface~hdf_add_int_5d hdf_add_int_5d interface~hdf_add_int_5d->proc~hdf_add_int_5d interface~hdf_add_int_3d hdf_add_int_3d interface~hdf_add_int_3d->proc~hdf_add_int_3d interface~hdf_add_int_6d hdf_add_int_6d interface~hdf_add_int_6d->proc~hdf_add_int_6d interface~hdf_add_real32_2d hdf_add_real32_2d interface~hdf_add_real32_2d->proc~hdf_add_real32_2d interface~hdf_add_real32_7d hdf_add_real32_7d interface~hdf_add_real32_7d->proc~hdf_add_real32_7d interface~hdf_add_int_4d hdf_add_int_4d interface~hdf_add_int_4d->proc~hdf_add_int_4d interface~hdf_add_int_2d hdf_add_int_2d interface~hdf_add_int_2d->proc~hdf_add_int_2d interface~hdf_add_real32_4d hdf_add_real32_4d interface~hdf_add_real32_4d->proc~hdf_add_real32_4d var panprochdf_set_deflateCalledByGraph = svgPanZoom('#prochdf_set_deflateCalledByGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_set_deflate.html"},{"title":"hdf_wrapup – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_wrapup module subroutine hdf_wrapup(self) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self Calls proc~~hdf_wrapup~~CallsGraph proc~hdf_wrapup hdf_wrapup h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_wrapup~~CalledByGraph proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup proc~hdf_add_real32_6d hdf_add_real32_6d proc~hdf_add_real32_6d->interface~hdf_wrapup proc~hdf_add_int_5d hdf_add_int_5d proc~hdf_add_int_5d->interface~hdf_wrapup proc~hdf_add_int_4d hdf_add_int_4d proc~hdf_add_int_4d->interface~hdf_wrapup proc~hdf_add_real32_5d hdf_add_real32_5d proc~hdf_add_real32_5d->interface~hdf_wrapup proc~hdf_add_int_3d hdf_add_int_3d proc~hdf_add_int_3d->interface~hdf_wrapup proc~hdf_add_real64_2d hdf_add_real64_2d proc~hdf_add_real64_2d->interface~hdf_wrapup proc~hdf_add_real32_3d hdf_add_real32_3d proc~hdf_add_real32_3d->interface~hdf_wrapup proc~hdf_add_real64_6d hdf_add_real64_6d proc~hdf_add_real64_6d->interface~hdf_wrapup proc~hdf_add_real64_5d hdf_add_real64_5d proc~hdf_add_real64_5d->interface~hdf_wrapup proc~hdf_add_real64_4d hdf_add_real64_4d proc~hdf_add_real64_4d->interface~hdf_wrapup proc~hdf_add_int_2d hdf_add_int_2d proc~hdf_add_int_2d->interface~hdf_wrapup proc~hdf_add_int_6d hdf_add_int_6d proc~hdf_add_int_6d->interface~hdf_wrapup proc~hdf_add_real32_4d hdf_add_real32_4d proc~hdf_add_real32_4d->interface~hdf_wrapup proc~hdf_add_real32_7d hdf_add_real32_7d proc~hdf_add_real32_7d->interface~hdf_wrapup proc~hdf_add_real64_7d hdf_add_real64_7d proc~hdf_add_real64_7d->interface~hdf_wrapup proc~hdf_add_real64_3d hdf_add_real64_3d proc~hdf_add_real64_3d->interface~hdf_wrapup proc~hdf_add_int_7d hdf_add_int_7d proc~hdf_add_int_7d->interface~hdf_wrapup proc~hdf_add_real32_2d hdf_add_real32_2d proc~hdf_add_real32_2d->interface~hdf_wrapup interface~hdf_add_real64_5d hdf_add_real64_5d interface~hdf_add_real64_5d->proc~hdf_add_real64_5d interface~hdf_add_real64_3d hdf_add_real64_3d interface~hdf_add_real64_3d->proc~hdf_add_real64_3d interface~hdf_add_real64_2d hdf_add_real64_2d interface~hdf_add_real64_2d->proc~hdf_add_real64_2d interface~hdf_add_real64_4d hdf_add_real64_4d interface~hdf_add_real64_4d->proc~hdf_add_real64_4d interface~hdf_add_real64_7d hdf_add_real64_7d interface~hdf_add_real64_7d->proc~hdf_add_real64_7d interface~hdf_add_real64_6d hdf_add_real64_6d interface~hdf_add_real64_6d->proc~hdf_add_real64_6d interface~hdf_add_int_7d hdf_add_int_7d interface~hdf_add_int_7d->proc~hdf_add_int_7d interface~hdf_add_real32_3d hdf_add_real32_3d interface~hdf_add_real32_3d->proc~hdf_add_real32_3d interface~hdf_add_real32_6d hdf_add_real32_6d interface~hdf_add_real32_6d->proc~hdf_add_real32_6d interface~hdf_add_real32_5d hdf_add_real32_5d interface~hdf_add_real32_5d->proc~hdf_add_real32_5d interface~hdf_add_int_5d hdf_add_int_5d interface~hdf_add_int_5d->proc~hdf_add_int_5d interface~hdf_add_int_3d hdf_add_int_3d interface~hdf_add_int_3d->proc~hdf_add_int_3d interface~hdf_add_int_6d hdf_add_int_6d interface~hdf_add_int_6d->proc~hdf_add_int_6d interface~hdf_add_real32_2d hdf_add_real32_2d interface~hdf_add_real32_2d->proc~hdf_add_real32_2d interface~hdf_add_real32_7d hdf_add_real32_7d interface~hdf_add_real32_7d->proc~hdf_add_real32_7d interface~hdf_add_int_4d hdf_add_int_4d interface~hdf_add_int_4d->proc~hdf_add_int_4d interface~hdf_add_int_2d hdf_add_int_2d interface~hdf_add_int_2d->proc~hdf_add_int_2d interface~hdf_add_real32_4d hdf_add_real32_4d interface~hdf_add_real32_4d->proc~hdf_add_real32_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_wrapup.html"},{"title":"hdf_open_group – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_open_group module subroutine hdf_open_group(self, gname) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname Calls proc~~hdf_open_group~~CallsGraph proc~hdf_open_group hdf_open_group h5gopen_f h5gopen_f proc~hdf_open_group->h5gopen_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_open_group~~CalledByGraph proc~hdf_open_group hdf_open_group interface~hdf_open_group hdf_open_group interface~hdf_open_group->proc~hdf_open_group Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_open_group.html"},{"title":"hdf_close_group – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_close_group module subroutine hdf_close_group(self) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self Calls proc~~hdf_close_group~~CallsGraph proc~hdf_close_group hdf_close_group h5gclose_f h5gclose_f proc~hdf_close_group->h5gclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_close_group~~CalledByGraph proc~hdf_close_group hdf_close_group interface~hdf_close_group hdf_close_group interface~hdf_close_group->proc~hdf_close_group Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_close_group.html"},{"title":"hdf_add_int – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_int module subroutine hdf_add_int(self, dname, value) Interface → HDF5 >= 1.10\n  HDF5 1.8 compatbility below:\n create dataspace\n create dataset\n write dataset\n close space and dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value Calls proc~~hdf_add_int~~CallsGraph proc~hdf_add_int hdf_add_int h5dcreate_f h5dcreate_f proc~hdf_add_int->h5dcreate_f h5dclose_f h5dclose_f proc~hdf_add_int->h5dclose_f h5dwrite_f h5dwrite_f proc~hdf_add_int->h5dwrite_f h5screate_f h5screate_f proc~hdf_add_int->h5screate_f h5kind_to_type h5kind_to_type proc~hdf_add_int->h5kind_to_type h5sclose_f h5sclose_f proc~hdf_add_int->h5sclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_int~~CalledByGraph proc~hdf_add_int hdf_add_int interface~hdf_add_int hdf_add_int interface~hdf_add_int->proc~hdf_add_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_int.html"},{"title":"hdf_add_int_1d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_int_1d module subroutine hdf_add_int_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:) Calls proc~~hdf_add_int_1d~~CallsGraph proc~hdf_add_int_1d hdf_add_int_1d h5kind_to_type h5kind_to_type proc~hdf_add_int_1d->h5kind_to_type h5ltmake_dataset_f h5ltmake_dataset_f proc~hdf_add_int_1d->h5ltmake_dataset_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_int_1d~~CalledByGraph proc~hdf_add_int_1d hdf_add_int_1d interface~hdf_add_int_1d hdf_add_int_1d interface~hdf_add_int_1d->proc~hdf_add_int_1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_int_1d.html"},{"title":"hdf_add_int_2d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_int_2d module subroutine hdf_add_int_2d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_int_2d~~CallsGraph proc~hdf_add_int_2d hdf_add_int_2d h5dwrite_f h5dwrite_f proc~hdf_add_int_2d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_2d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_2d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_2d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_int_2dCallsGraph = svgPanZoom('#prochdf_add_int_2dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_int_2d~~CalledByGraph proc~hdf_add_int_2d hdf_add_int_2d interface~hdf_add_int_2d hdf_add_int_2d interface~hdf_add_int_2d->proc~hdf_add_int_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_int_2d.html"},{"title":"hdf_add_int_3d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_int_3d module subroutine hdf_add_int_3d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_int_3d~~CallsGraph proc~hdf_add_int_3d hdf_add_int_3d h5dwrite_f h5dwrite_f proc~hdf_add_int_3d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_3d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_3d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_3d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_int_3dCallsGraph = svgPanZoom('#prochdf_add_int_3dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_int_3d~~CalledByGraph proc~hdf_add_int_3d hdf_add_int_3d interface~hdf_add_int_3d hdf_add_int_3d interface~hdf_add_int_3d->proc~hdf_add_int_3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_int_3d.html"},{"title":"hdf_add_int_4d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_int_4d module subroutine hdf_add_int_4d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer, intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_int_4d~~CallsGraph proc~hdf_add_int_4d hdf_add_int_4d h5dwrite_f h5dwrite_f proc~hdf_add_int_4d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_4d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_4d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_4d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_int_4dCallsGraph = svgPanZoom('#prochdf_add_int_4dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_int_4d~~CalledByGraph proc~hdf_add_int_4d hdf_add_int_4d interface~hdf_add_int_4d hdf_add_int_4d interface~hdf_add_int_4d->proc~hdf_add_int_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_int_4d.html"},{"title":"hdf_add_int_5d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_int_5d module subroutine hdf_add_int_5d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_int_5d~~CallsGraph proc~hdf_add_int_5d hdf_add_int_5d h5dwrite_f h5dwrite_f proc~hdf_add_int_5d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_5d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_5d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_5d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_int_5dCallsGraph = svgPanZoom('#prochdf_add_int_5dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_int_5d~~CalledByGraph proc~hdf_add_int_5d hdf_add_int_5d interface~hdf_add_int_5d hdf_add_int_5d interface~hdf_add_int_5d->proc~hdf_add_int_5d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_int_5d.html"},{"title":"hdf_add_int_6d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_int_6d module subroutine hdf_add_int_6d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_int_6d~~CallsGraph proc~hdf_add_int_6d hdf_add_int_6d h5dwrite_f h5dwrite_f proc~hdf_add_int_6d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_6d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_6d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_6d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_int_6dCallsGraph = svgPanZoom('#prochdf_add_int_6dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_int_6d~~CalledByGraph proc~hdf_add_int_6d hdf_add_int_6d interface~hdf_add_int_6d hdf_add_int_6d interface~hdf_add_int_6d->proc~hdf_add_int_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_int_6d.html"},{"title":"hdf_add_int_7d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_int_7d module subroutine hdf_add_int_7d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_int_7d~~CallsGraph proc~hdf_add_int_7d hdf_add_int_7d h5dwrite_f h5dwrite_f proc~hdf_add_int_7d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_int_7d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_int_7d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_int_7d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_int_7dCallsGraph = svgPanZoom('#prochdf_add_int_7dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_int_7d~~CalledByGraph proc~hdf_add_int_7d hdf_add_int_7d interface~hdf_add_int_7d hdf_add_int_7d interface~hdf_add_int_7d->proc~hdf_add_int_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_int_7d.html"},{"title":"hdf_add_real32 – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real32 module subroutine hdf_add_real32(self, dname, value) Interface → HDF5 >= 1.10\n HDF5 1.8 compatbility below:\n create dataspace\n create dataset\n write dataset\n close space and dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value Calls proc~~hdf_add_real32~~CallsGraph proc~hdf_add_real32 hdf_add_real32 h5dcreate_f h5dcreate_f proc~hdf_add_real32->h5dcreate_f h5dclose_f h5dclose_f proc~hdf_add_real32->h5dclose_f h5dwrite_f h5dwrite_f proc~hdf_add_real32->h5dwrite_f h5screate_f h5screate_f proc~hdf_add_real32->h5screate_f h5kind_to_type h5kind_to_type proc~hdf_add_real32->h5kind_to_type h5sclose_f h5sclose_f proc~hdf_add_real32->h5sclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real32~~CalledByGraph proc~hdf_add_real32 hdf_add_real32 interface~hdf_add_real32 hdf_add_real32 interface~hdf_add_real32->proc~hdf_add_real32 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real32.html"},{"title":"hdf_add_real32_1d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real32_1d module subroutine hdf_add_real32_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:) Calls proc~~hdf_add_real32_1d~~CallsGraph proc~hdf_add_real32_1d hdf_add_real32_1d h5kind_to_type h5kind_to_type proc~hdf_add_real32_1d->h5kind_to_type h5ltmake_dataset_f h5ltmake_dataset_f proc~hdf_add_real32_1d->h5ltmake_dataset_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real32_1d~~CalledByGraph proc~hdf_add_real32_1d hdf_add_real32_1d interface~hdf_add_real32_1d hdf_add_real32_1d interface~hdf_add_real32_1d->proc~hdf_add_real32_1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real32_1d.html"},{"title":"hdf_add_real32_2d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real32_2d module subroutine hdf_add_real32_2d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real32_2d~~CallsGraph proc~hdf_add_real32_2d hdf_add_real32_2d h5dwrite_f h5dwrite_f proc~hdf_add_real32_2d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_2d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_2d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_2d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real32_2dCallsGraph = svgPanZoom('#prochdf_add_real32_2dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real32_2d~~CalledByGraph proc~hdf_add_real32_2d hdf_add_real32_2d interface~hdf_add_real32_2d hdf_add_real32_2d interface~hdf_add_real32_2d->proc~hdf_add_real32_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real32_2d.html"},{"title":"hdf_add_real32_3d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real32_3d module subroutine hdf_add_real32_3d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real32_3d~~CallsGraph proc~hdf_add_real32_3d hdf_add_real32_3d h5dwrite_f h5dwrite_f proc~hdf_add_real32_3d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_3d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_3d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_3d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real32_3dCallsGraph = svgPanZoom('#prochdf_add_real32_3dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real32_3d~~CalledByGraph proc~hdf_add_real32_3d hdf_add_real32_3d interface~hdf_add_real32_3d hdf_add_real32_3d interface~hdf_add_real32_3d->proc~hdf_add_real32_3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real32_3d.html"},{"title":"hdf_add_real32_4d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real32_4d module subroutine hdf_add_real32_4d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real32_4d~~CallsGraph proc~hdf_add_real32_4d hdf_add_real32_4d h5dwrite_f h5dwrite_f proc~hdf_add_real32_4d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_4d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_4d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_4d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real32_4dCallsGraph = svgPanZoom('#prochdf_add_real32_4dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real32_4d~~CalledByGraph proc~hdf_add_real32_4d hdf_add_real32_4d interface~hdf_add_real32_4d hdf_add_real32_4d interface~hdf_add_real32_4d->proc~hdf_add_real32_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real32_4d.html"},{"title":"hdf_add_real32_5d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real32_5d module subroutine hdf_add_real32_5d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real32_5d~~CallsGraph proc~hdf_add_real32_5d hdf_add_real32_5d h5dwrite_f h5dwrite_f proc~hdf_add_real32_5d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_5d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_5d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_5d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real32_5dCallsGraph = svgPanZoom('#prochdf_add_real32_5dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real32_5d~~CalledByGraph proc~hdf_add_real32_5d hdf_add_real32_5d interface~hdf_add_real32_5d hdf_add_real32_5d interface~hdf_add_real32_5d->proc~hdf_add_real32_5d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real32_5d.html"},{"title":"hdf_add_real32_6d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real32_6d module subroutine hdf_add_real32_6d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real32_6d~~CallsGraph proc~hdf_add_real32_6d hdf_add_real32_6d h5dwrite_f h5dwrite_f proc~hdf_add_real32_6d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_6d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_6d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_6d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real32_6dCallsGraph = svgPanZoom('#prochdf_add_real32_6dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real32_6d~~CalledByGraph proc~hdf_add_real32_6d hdf_add_real32_6d interface~hdf_add_real32_6d hdf_add_real32_6d interface~hdf_add_real32_6d->proc~hdf_add_real32_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real32_6d.html"},{"title":"hdf_add_real32_7d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real32_7d module subroutine hdf_add_real32_7d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real32_7d~~CallsGraph proc~hdf_add_real32_7d hdf_add_real32_7d h5dwrite_f h5dwrite_f proc~hdf_add_real32_7d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real32_7d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real32_7d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real32_7d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real32_7dCallsGraph = svgPanZoom('#prochdf_add_real32_7dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real32_7d~~CalledByGraph proc~hdf_add_real32_7d hdf_add_real32_7d interface~hdf_add_real32_7d hdf_add_real32_7d interface~hdf_add_real32_7d->proc~hdf_add_real32_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real32_7d.html"},{"title":"hdf_add_real64 – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real64 module subroutine hdf_add_real64(self, dname, value) Interface → create dataspace\n create dataset\n write dataset\n close space and dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value Calls proc~~hdf_add_real64~~CallsGraph proc~hdf_add_real64 hdf_add_real64 h5dcreate_f h5dcreate_f proc~hdf_add_real64->h5dcreate_f h5dclose_f h5dclose_f proc~hdf_add_real64->h5dclose_f h5dwrite_f h5dwrite_f proc~hdf_add_real64->h5dwrite_f h5screate_f h5screate_f proc~hdf_add_real64->h5screate_f h5kind_to_type h5kind_to_type proc~hdf_add_real64->h5kind_to_type h5sclose_f h5sclose_f proc~hdf_add_real64->h5sclose_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real64~~CalledByGraph proc~hdf_add_real64 hdf_add_real64 interface~hdf_add_real64 hdf_add_real64 interface~hdf_add_real64->proc~hdf_add_real64 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real64.html"},{"title":"hdf_add_real64_1d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real64_1d module subroutine hdf_add_real64_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:) Calls proc~~hdf_add_real64_1d~~CallsGraph proc~hdf_add_real64_1d hdf_add_real64_1d h5kind_to_type h5kind_to_type proc~hdf_add_real64_1d->h5kind_to_type h5ltmake_dataset_f h5ltmake_dataset_f proc~hdf_add_real64_1d->h5ltmake_dataset_f Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real64_1d~~CalledByGraph proc~hdf_add_real64_1d hdf_add_real64_1d interface~hdf_add_real64_1d hdf_add_real64_1d interface~hdf_add_real64_1d->proc~hdf_add_real64_1d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real64_1d.html"},{"title":"hdf_add_real64_2d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real64_2d module subroutine hdf_add_real64_2d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real64_2d~~CallsGraph proc~hdf_add_real64_2d hdf_add_real64_2d h5dwrite_f h5dwrite_f proc~hdf_add_real64_2d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_2d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_2d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_2d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real64_2dCallsGraph = svgPanZoom('#prochdf_add_real64_2dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real64_2d~~CalledByGraph proc~hdf_add_real64_2d hdf_add_real64_2d interface~hdf_add_real64_2d hdf_add_real64_2d interface~hdf_add_real64_2d->proc~hdf_add_real64_2d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real64_2d.html"},{"title":"hdf_add_real64_3d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real64_3d module subroutine hdf_add_real64_3d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real64_3d~~CallsGraph proc~hdf_add_real64_3d hdf_add_real64_3d h5dwrite_f h5dwrite_f proc~hdf_add_real64_3d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_3d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_3d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_3d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real64_3dCallsGraph = svgPanZoom('#prochdf_add_real64_3dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real64_3d~~CalledByGraph proc~hdf_add_real64_3d hdf_add_real64_3d interface~hdf_add_real64_3d hdf_add_real64_3d interface~hdf_add_real64_3d->proc~hdf_add_real64_3d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real64_3d.html"},{"title":"hdf_add_real64_4d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real64_4d module subroutine hdf_add_real64_4d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real64_4d~~CallsGraph proc~hdf_add_real64_4d hdf_add_real64_4d h5dwrite_f h5dwrite_f proc~hdf_add_real64_4d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_4d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_4d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_4d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real64_4dCallsGraph = svgPanZoom('#prochdf_add_real64_4dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real64_4d~~CalledByGraph proc~hdf_add_real64_4d hdf_add_real64_4d interface~hdf_add_real64_4d hdf_add_real64_4d interface~hdf_add_real64_4d->proc~hdf_add_real64_4d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real64_4d.html"},{"title":"hdf_add_real64_5d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real64_5d module subroutine hdf_add_real64_5d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real64_5d~~CallsGraph proc~hdf_add_real64_5d hdf_add_real64_5d h5dwrite_f h5dwrite_f proc~hdf_add_real64_5d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_5d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_5d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_5d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real64_5dCallsGraph = svgPanZoom('#prochdf_add_real64_5dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real64_5d~~CalledByGraph proc~hdf_add_real64_5d hdf_add_real64_5d interface~hdf_add_real64_5d hdf_add_real64_5d interface~hdf_add_real64_5d->proc~hdf_add_real64_5d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real64_5d.html"},{"title":"hdf_add_real64_6d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real64_6d module subroutine hdf_add_real64_6d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real64_6d~~CallsGraph proc~hdf_add_real64_6d hdf_add_real64_6d h5dwrite_f h5dwrite_f proc~hdf_add_real64_6d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_6d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_6d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_6d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real64_6dCallsGraph = svgPanZoom('#prochdf_add_real64_6dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real64_6d~~CalledByGraph proc~hdf_add_real64_6d hdf_add_real64_6d interface~hdf_add_real64_6d hdf_add_real64_6d interface~hdf_add_real64_6d->proc~hdf_add_real64_6d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real64_6d.html"},{"title":"hdf_add_real64_7d – object-oriented Fortran 2018 HDF5 interface","text":"module procedure hdf_add_real64_7d module subroutine hdf_add_real64_7d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) Calls proc~~hdf_add_real64_7d~~CallsGraph proc~hdf_add_real64_7d hdf_add_real64_7d h5dwrite_f h5dwrite_f proc~hdf_add_real64_7d->h5dwrite_f interface~hdf_setup_write hdf_setup_write proc~hdf_add_real64_7d->interface~hdf_setup_write interface~hdf_wrapup hdf_wrapup proc~hdf_add_real64_7d->interface~hdf_wrapup h5kind_to_type h5kind_to_type proc~hdf_add_real64_7d->h5kind_to_type proc~hdf_setup_write hdf_setup_write interface~hdf_setup_write->proc~hdf_setup_write proc~hdf_wrapup hdf_wrapup interface~hdf_wrapup->proc~hdf_wrapup h5dcreate_f h5dcreate_f proc~hdf_setup_write->h5dcreate_f h5screate_simple_f h5screate_simple_f proc~hdf_setup_write->h5screate_simple_f interface~hdf_set_deflate hdf_set_deflate proc~hdf_setup_write->interface~hdf_set_deflate h5dclose_f h5dclose_f proc~hdf_wrapup->h5dclose_f h5sclose_f h5sclose_f proc~hdf_wrapup->h5sclose_f h5pclose_f h5pclose_f proc~hdf_wrapup->h5pclose_f proc~hdf_set_deflate hdf_set_deflate interface~hdf_set_deflate->proc~hdf_set_deflate h5pset_deflate_f h5pset_deflate_f proc~hdf_set_deflate->h5pset_deflate_f h5pset_chunk_f h5pset_chunk_f proc~hdf_set_deflate->h5pset_chunk_f h5pset_shuffle_f h5pset_shuffle_f proc~hdf_set_deflate->h5pset_shuffle_f h5pcreate_f h5pcreate_f proc~hdf_set_deflate->h5pcreate_f var panprochdf_add_real64_7dCallsGraph = svgPanZoom('#prochdf_add_real64_7dCallsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~hdf_add_real64_7d~~CalledByGraph proc~hdf_add_real64_7d hdf_add_real64_7d interface~hdf_add_real64_7d hdf_add_real64_7d interface~hdf_add_real64_7d->proc~hdf_add_real64_7d Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/hdf_add_real64_7d.html"},{"title":"hdf5_interface – object-oriented Fortran 2018 HDF5 interface","text":"HDF5 object-oriented polymorphic interface Uses iso_fortran_env H5LT string_utils module~~hdf5_interface~~UsesGraph module~hdf5_interface hdf5_interface module~string_utils string_utils module~hdf5_interface->module~string_utils iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env H5LT H5LT module~hdf5_interface->H5LT iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: read write module~~hdf5_interface~~UsedByGraph module~hdf5_interface hdf5_interface module~read read module~read->module~hdf5_interface module~write write module~write->module~hdf5_interface module~read_real64 read_real64 module~read_real64->module~read module~write_real32 write_real32 module~write_real32->module~write module~read_int read_int module~read_int->module~read module~read_real32 read_real32 module~read_real32->module~read module~write_int write_int module~write_int->module~write module~write_real64 write_real64 module~write_real64->module~write Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Interfaces hdf_setup_write hdf_wrapup hdf_set_deflate hdf_add_string hdf_add_int hdf_add_int_1d hdf_add_int_2d hdf_add_int_3d hdf_add_int_4d hdf_add_int_5d hdf_add_int_6d hdf_add_int_7d hdf_add_real64 hdf_add_real64_1d hdf_add_real64_2d hdf_add_real64_3d hdf_add_real64_4d hdf_add_real64_5d hdf_add_real64_6d hdf_add_real64_7d hdf_add_real32 hdf_add_real32_1d hdf_add_real32_2d hdf_add_real32_3d hdf_add_real32_4d hdf_add_real32_5d hdf_add_real32_6d hdf_add_real32_7d hdf_get_shape hdf_get_string hdf_get_int hdf_get_int_1d hdf_get_int_2d hdf_get_int_3d hdf_get_int_4d hdf_get_int_5d hdf_get_int_6d hdf_get_int_7d hdf_get_real32 hdf_get_real32_1d hdf_get_real32_2d hdf_get_real32_3d hdf_get_real32_4d hdf_get_real32_5d hdf_get_real32_6d hdf_get_real32_7d hdf_get_real64 hdf_get_real64_1d hdf_get_real64_2d hdf_get_real64_3d hdf_get_real64_4d hdf_get_real64_5d hdf_get_real64_6d hdf_get_real64_7d hdf_open_group hdf_close_group writeattr Derived Types hdf5_file Subroutines hdf_initialize hdf_finalize hdf_add_group Interfaces interface Submodules public module subroutine hdf_setup_write(self, dname, dtype, dims, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=HID_T), intent(in) :: dtype integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_wrapup(self) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self interface Submodules public module subroutine hdf_set_deflate(self, dims) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer(kind=HSIZE_T), intent(in) :: dims (:) interface Submodules public module subroutine hdf_add_string(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: value interface Submodules public module subroutine hdf_add_int(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value interface Submodules public module subroutine hdf_add_int_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:) interface Submodules public module subroutine hdf_add_int_2d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_int_3d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_int_4d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer, intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_int_5d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_int_6d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_int_7d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real64(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value interface Submodules public module subroutine hdf_add_real64_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:) interface Submodules public module subroutine hdf_add_real64_2d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real64_3d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real64_4d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real64_5d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real64_6d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real64_7d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real32(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value interface Submodules public module subroutine hdf_add_real32_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:) interface Submodules public module subroutine hdf_add_real32_2d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real32_3d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real32_4d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real32_5d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real32_6d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_add_real32_7d(self, dname, value, chunk_size) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) interface Submodules public module subroutine hdf_get_shape(self, dname, dims) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) interface Submodules public module subroutine hdf_get_string(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(out) :: value interface Submodules public module subroutine hdf_get_int(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out) :: value interface Submodules public module subroutine hdf_get_int_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:) interface Submodules public module subroutine hdf_get_int_2d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:) interface Submodules public module subroutine hdf_get_int_3d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:) interface Submodules public module subroutine hdf_get_int_4d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:) interface Submodules public module subroutine hdf_get_int_5d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:) interface Submodules public module subroutine hdf_get_int_6d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:,:) interface Submodules public module subroutine hdf_get_int_7d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:,:,:) interface Submodules public module subroutine hdf_get_real32(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out) :: value interface Submodules public module subroutine hdf_get_real32_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:) interface Submodules public module subroutine hdf_get_real32_2d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:) interface Submodules public module subroutine hdf_get_real32_3d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:) interface Submodules public module subroutine hdf_get_real32_4d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:) interface Submodules public module subroutine hdf_get_real32_5d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:) interface Submodules public module subroutine hdf_get_real32_6d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:,:) interface Submodules public module subroutine hdf_get_real32_7d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:,:,:) interface Submodules public module subroutine hdf_get_real64(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out) :: value interface Submodules public module subroutine hdf_get_real64_1d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:) interface Submodules public module subroutine hdf_get_real64_2d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:) interface Submodules public module subroutine hdf_get_real64_3d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:) interface Submodules public module subroutine hdf_get_real64_4d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:) interface Submodules public module subroutine hdf_get_real64_5d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:) interface Submodules public module subroutine hdf_get_real64_6d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:,:) interface Submodules public module subroutine hdf_get_real64_7d(self, dname, value) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:,:,:) interface Submodules public module subroutine hdf_open_group(self, gname) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname interface Submodules public module subroutine hdf_close_group(self) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self interface Submodules public module subroutine writeattr(self, dname, attr, attrval) Implementation → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval Derived Types type, public :: hdf5_file main type Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: filename integer(kind=HID_T), public :: lid integer(kind=HID_T), public :: gid integer(kind=HID_T), public :: glid integer(kind=HID_T), public :: sid integer(kind=HID_T), public :: did integer(kind=HID_T), public :: pid integer, public :: comp_lvl = 0 integer(kind=HSIZE_T), public :: chunk_size (7) = [64, 64, 1, 1, 1, 1, 1] logical, public :: verbose = .false. Type-Bound Procedures procedure, public :: shape => hdf_get_shape initialize HDF5 file procedure, public :: close => hdf_close_group procedure, public :: open => hdf_open_group procedure, public :: writeattr procedure, public :: finalize => hdf_finalize procedure, public :: initialize => hdf_initialize generic, public :: add => hdf_add_group, hdf_add_int, hdf_add_int_1d, hdf_add_int_2d, hdf_add_int_3d, hdf_add_int_5d, hdf_add_int_6d, hdf_add_int_7d, hdf_add_real32, hdf_add_real32_1d, hdf_add_real32_2d, hdf_add_real32_3d, hdf_add_real32_4d, hdf_add_real32_5d, hdf_add_real32_6d, hdf_add_real32_7d, hdf_add_real64, hdf_add_real64_1d, hdf_add_real64_2d, hdf_add_real64_3d, hdf_add_real64_4d, hdf_add_real64_5d, hdf_add_real64_6d, hdf_add_real64_7d, hdf_add_string add group or dataset integer/real generic, public :: get => hdf_get_int, hdf_get_int_1d, hdf_get_int_2d, hdf_get_int_3d, hdf_get_int_4d, hdf_get_int_5d, hdf_get_int_6d, hdf_get_int_7d, hdf_get_real32, hdf_get_real32_1d, hdf_get_real32_2d, hdf_get_real32_3d, hdf_get_real32_4d, hdf_get_real32_5d, hdf_get_real32_6d, hdf_get_real32_7d, hdf_get_real64, hdf_get_real64_1d, hdf_get_real64_2d, hdf_get_real64_3d, hdf_get_real64_4d, hdf_get_real64_5d, hdf_get_real64_6d, hdf_get_real64_7d, hdf_get_string get dataset integer/real procedure, private :: hdf_get_string private methods procedure, private :: hdf_add_string procedure, private :: hdf_get_real64_7d procedure, private :: hdf_get_real64_6d procedure, private :: hdf_get_real64_5d procedure, private :: hdf_get_real64_4d procedure, private :: hdf_get_real64_3d procedure, private :: hdf_get_real64_2d procedure, private :: hdf_get_real64_1d procedure, private :: hdf_get_real64 procedure, private :: hdf_get_real32_7d procedure, private :: hdf_get_real32_6d procedure, private :: hdf_get_real32_5d procedure, private :: hdf_get_real32_4d procedure, private :: hdf_get_real32_3d procedure, private :: hdf_get_real32_2d procedure, private :: hdf_get_real32_1d procedure, private :: hdf_get_real32 procedure, private :: hdf_add_real64_7d procedure, private :: hdf_add_real64_6d procedure, private :: hdf_add_real64_5d procedure, private :: hdf_add_real64_4d procedure, private :: hdf_add_real64_3d procedure, private :: hdf_add_real64_2d procedure, private :: hdf_add_real64_1d procedure, private :: hdf_add_real64 procedure, private :: hdf_add_real32_7d procedure, private :: hdf_add_real32_6d procedure, private :: hdf_add_real32_5d procedure, private :: hdf_add_real32_4d procedure, private :: hdf_add_real32_3d procedure, private :: hdf_add_real32_2d procedure, private :: hdf_add_real32_1d procedure, private :: hdf_add_real32 procedure, private :: hdf_get_int_7d procedure, private :: hdf_get_int_6d procedure, private :: hdf_get_int_5d procedure, private :: hdf_get_int_4d procedure, private :: hdf_get_int_3d procedure, private :: hdf_get_int_2d procedure, private :: hdf_get_int_1d procedure, private :: hdf_get_int procedure, private :: hdf_add_int_7d procedure, private :: hdf_add_int_6d procedure, private :: hdf_add_int_5d procedure, private :: hdf_add_int_4d procedure, private :: hdf_add_int_3d procedure, private :: hdf_add_int_2d procedure, private :: hdf_add_int_1d procedure, private :: hdf_add_int procedure, private :: hdf_add_group Subroutines private subroutine hdf_initialize (self, filename, status, action, comp_lvl) Initialize FORTRAN interface. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: filename character(len=*), intent(in), optional :: status character(len=*), intent(in), optional :: action integer, intent(in), optional :: comp_lvl private subroutine hdf_finalize (self) close hdf5 file\n  Close Fortran interface. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self private subroutine hdf_add_group (self, gname) Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: gname","tags":"","loc":"module/hdf5_interface.html"},{"title":"string_utils – object-oriented Fortran 2018 HDF5 interface","text":"Uses iso_c_binding module~~string_utils~~UsesGraph module~string_utils string_utils iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by module~~string_utils~~UsedByGraph module~string_utils string_utils module~hdf5_interface hdf5_interface module~hdf5_interface->module~string_utils module~read read module~read->module~hdf5_interface module~write write module~write->module~hdf5_interface module~read_real64 read_real64 module~read_real64->module~read module~write_real32 write_real32 module~write_real32->module~write module~read_int read_int module~read_int->module~read module~read_real32 read_real32 module~read_real32->module~read module~write_int write_int module~write_int->module~write module~write_real64 write_real64 module~write_real64->module~write Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Functions toLower strip_trailing_null Functions public elemental function toLower (str) convert uppercase characters to lowercase Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=len(str)) public pure function strip_trailing_null (str) result(stripped) strip trailing C null from strings Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=:),\n  allocatable","tags":"","loc":"module/string_utils.html"},{"title":"read – object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface module~~read~~UsesGraph module~read read module~hdf5_interface hdf5_interface module~read->module~hdf5_interface H5LT H5LT module~read->H5LT module~hdf5_interface->H5LT module~string_utils string_utils module~hdf5_interface->module~string_utils iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: read_int read_real32 read_real64 module~~read~~UsedByGraph module~read read module~read_real64 read_real64 module~read_real64->module~read module~read_int read_int module~read_int->module~read module~read_real32 read_real32 module~read_real32->module~read Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_get_shape hdf_get_string Module Procedures module procedure hdf_get_shape module subroutine hdf_get_shape(self, dname, dims) Interface → must get dims before info, as \"dims\" must be allocated or segfault occurs. Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=HSIZE_T), intent(out), allocatable :: dims (:) module procedure hdf_get_string module subroutine hdf_get_string(self, dname, value) Interface → till buffer is full Read more… Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(out) :: value","tags":"","loc":"module/read.html"},{"title":"read_int – object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface : read module~~read_int~~UsesGraph module~read_int read_int module~read read module~read_int->module~read H5LT H5LT module~read_int->H5LT module~read->H5LT module~hdf5_interface hdf5_interface module~read->module~hdf5_interface module~hdf5_interface->H5LT module~string_utils string_utils module~hdf5_interface->module~string_utils iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_get_int hdf_get_int_1d hdf_get_int_2d hdf_get_int_3d hdf_get_int_4d hdf_get_int_5d hdf_get_int_6d hdf_get_int_7d Module Procedures module procedure hdf_get_int module subroutine hdf_get_int(self, dname, value) Interface → open dataset\n read dataset\n close dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out) :: value module procedure hdf_get_int_1d module subroutine hdf_get_int_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:) module procedure hdf_get_int_2d module subroutine hdf_get_int_2d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:) module procedure hdf_get_int_3d module subroutine hdf_get_int_3d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:) module procedure hdf_get_int_4d module subroutine hdf_get_int_4d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:) module procedure hdf_get_int_5d module subroutine hdf_get_int_5d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:) module procedure hdf_get_int_6d module subroutine hdf_get_int_6d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:,:) module procedure hdf_get_int_7d module subroutine hdf_get_int_7d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(out), allocatable :: value (:,:,:,:,:,:,:)","tags":"","loc":"module/read_int.html"},{"title":"read_real32 – object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface : read module~~read_real32~~UsesGraph module~read_real32 read_real32 module~read read module~read_real32->module~read H5LT H5LT module~read_real32->H5LT module~read->H5LT module~hdf5_interface hdf5_interface module~read->module~hdf5_interface module~hdf5_interface->H5LT module~string_utils string_utils module~hdf5_interface->module~string_utils iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_get_real32 hdf_get_real32_1d hdf_get_real32_2d hdf_get_real32_3d hdf_get_real32_4d hdf_get_real32_5d hdf_get_real32_6d hdf_get_real32_7d Module Procedures module procedure hdf_get_real32 module subroutine hdf_get_real32(self, dname, value) Interface → open dataset\n read dataset\n close dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out) :: value module procedure hdf_get_real32_1d module subroutine hdf_get_real32_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:) module procedure hdf_get_real32_2d module subroutine hdf_get_real32_2d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:) module procedure hdf_get_real32_3d module subroutine hdf_get_real32_3d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:) module procedure hdf_get_real32_4d module subroutine hdf_get_real32_4d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:) module procedure hdf_get_real32_5d module subroutine hdf_get_real32_5d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:) module procedure hdf_get_real32_6d module subroutine hdf_get_real32_6d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:,:) module procedure hdf_get_real32_7d module subroutine hdf_get_real32_7d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(out), allocatable :: value (:,:,:,:,:,:,:)","tags":"","loc":"module/read_real32.html"},{"title":"read_real64 – object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface : read module~~read_real64~~UsesGraph module~read_real64 read_real64 module~read read module~read_real64->module~read H5LT H5LT module~read_real64->H5LT module~read->H5LT module~hdf5_interface hdf5_interface module~read->module~hdf5_interface module~hdf5_interface->H5LT module~string_utils string_utils module~hdf5_interface->module~string_utils iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_get_real64 hdf_get_real64_1d hdf_get_real64_2d hdf_get_real64_3d hdf_get_real64_4d hdf_get_real64_5d hdf_get_real64_6d hdf_get_real64_7d Module Procedures module procedure hdf_get_real64 module subroutine hdf_get_real64(self, dname, value) Interface → open dataset\n read dataset\n close dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out) :: value module procedure hdf_get_real64_1d module subroutine hdf_get_real64_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:) module procedure hdf_get_real64_2d module subroutine hdf_get_real64_2d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:) module procedure hdf_get_real64_3d module subroutine hdf_get_real64_3d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:) module procedure hdf_get_real64_4d module subroutine hdf_get_real64_4d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:) module procedure hdf_get_real64_5d module subroutine hdf_get_real64_5d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:) module procedure hdf_get_real64_6d module subroutine hdf_get_real64_6d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:,:) module procedure hdf_get_real64_7d module subroutine hdf_get_real64_7d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(out), allocatable :: value (:,:,:,:,:,:,:)","tags":"","loc":"module/read_real64.html"},{"title":"write – object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface module~~write~~UsesGraph module~write write module~hdf5_interface hdf5_interface module~write->module~hdf5_interface H5LT H5LT module~write->H5LT module~hdf5_interface->H5LT module~string_utils string_utils module~hdf5_interface->module~string_utils iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: write_int write_real32 write_real64 module~~write~~UsedByGraph module~write write module~write_int write_int module~write_int->module~write module~write_real64 write_real64 module~write_real64->module~write module~write_real32 write_real32 module~write_real32->module~write Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures writeattr hdf_add_string hdf_setup_write hdf_set_deflate hdf_wrapup hdf_open_group hdf_close_group Module Procedures module procedure writeattr module subroutine writeattr(self, dname, attr, attrval) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: attr character(len=*), intent(in) :: attrval module procedure hdf_add_string module subroutine hdf_add_string(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname character(len=*), intent(in) :: value module procedure hdf_setup_write module subroutine hdf_setup_write(self, dname, dtype, dims, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=HID_T), intent(in) :: dtype integer(kind=HSIZE_T), intent(in) :: dims (:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_set_deflate module subroutine hdf_set_deflate(self, dims) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self integer(kind=HSIZE_T), intent(in) :: dims (:) module procedure hdf_wrapup module subroutine hdf_wrapup(self) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self module procedure hdf_open_group module subroutine hdf_open_group(self, gname) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: gname module procedure hdf_close_group module subroutine hdf_close_group(self) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self","tags":"","loc":"module/write.html"},{"title":"write_int – object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface : write module~~write_int~~UsesGraph module~write_int write_int H5LT H5LT module~write_int->H5LT module~write write module~write_int->module~write module~write->H5LT module~hdf5_interface hdf5_interface module~write->module~hdf5_interface module~hdf5_interface->H5LT module~string_utils string_utils module~hdf5_interface->module~string_utils iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_add_int hdf_add_int_1d hdf_add_int_2d hdf_add_int_3d hdf_add_int_4d hdf_add_int_5d hdf_add_int_6d hdf_add_int_7d Module Procedures module procedure hdf_add_int module subroutine hdf_add_int(self, dname, value) Interface → HDF5 >= 1.10\n  HDF5 1.8 compatbility below:\n create dataspace\n create dataset\n write dataset\n close space and dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value module procedure hdf_add_int_1d module subroutine hdf_add_int_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:) module procedure hdf_add_int_2d module subroutine hdf_add_int_2d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_int_3d module subroutine hdf_add_int_3d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_int_4d module subroutine hdf_add_int_4d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer, intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_int_5d module subroutine hdf_add_int_5d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_int_6d module subroutine hdf_add_int_6d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_int_7d module subroutine hdf_add_int_7d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname integer(kind=int32), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"module/write_int.html"},{"title":"write_real32 – object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface : write module~~write_real32~~UsesGraph module~write_real32 write_real32 H5LT H5LT module~write_real32->H5LT module~write write module~write_real32->module~write module~write->H5LT module~hdf5_interface hdf5_interface module~write->module~hdf5_interface module~hdf5_interface->H5LT module~string_utils string_utils module~hdf5_interface->module~string_utils iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_add_real32 hdf_add_real32_1d hdf_add_real32_2d hdf_add_real32_3d hdf_add_real32_4d hdf_add_real32_5d hdf_add_real32_6d hdf_add_real32_7d Module Procedures module procedure hdf_add_real32 module subroutine hdf_add_real32(self, dname, value) Interface → HDF5 >= 1.10\n HDF5 1.8 compatbility below:\n create dataspace\n create dataset\n write dataset\n close space and dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value module procedure hdf_add_real32_1d module subroutine hdf_add_real32_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:) module procedure hdf_add_real32_2d module subroutine hdf_add_real32_2d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_real32_3d module subroutine hdf_add_real32_3d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_real32_4d module subroutine hdf_add_real32_4d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_real32_5d module subroutine hdf_add_real32_5d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_real32_6d module subroutine hdf_add_real32_6d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_real32_7d module subroutine hdf_add_real32_7d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real32), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"module/write_real32.html"},{"title":"write_real64 – object-oriented Fortran 2018 HDF5 interface","text":"Uses H5LT Ancestors: hdf5_interface : write module~~write_real64~~UsesGraph module~write_real64 write_real64 H5LT H5LT module~write_real64->H5LT module~write write module~write_real64->module~write module~write->H5LT module~hdf5_interface hdf5_interface module~write->module~hdf5_interface module~hdf5_interface->H5LT module~string_utils string_utils module~hdf5_interface->module~string_utils iso_fortran_env iso_fortran_env module~hdf5_interface->iso_fortran_env iso_c_binding iso_c_binding module~string_utils->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures hdf_add_real64 hdf_add_real64_1d hdf_add_real64_2d hdf_add_real64_3d hdf_add_real64_4d hdf_add_real64_5d hdf_add_real64_6d hdf_add_real64_7d Module Procedures module procedure hdf_add_real64 module subroutine hdf_add_real64(self, dname, value) Interface → create dataspace\n create dataset\n write dataset\n close space and dataset Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value module procedure hdf_add_real64_1d module subroutine hdf_add_real64_1d(self, dname, value) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(in) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:) module procedure hdf_add_real64_2d module subroutine hdf_add_real64_2d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_real64_3d module subroutine hdf_add_real64_3d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_real64_4d module subroutine hdf_add_real64_4d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_real64_5d module subroutine hdf_add_real64_5d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_real64_6d module subroutine hdf_add_real64_6d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:) module procedure hdf_add_real64_7d module subroutine hdf_add_real64_7d(self, dname, value, chunk_size) Interface → Arguments Type Intent Optional Attributes Name class( hdf5_file ), intent(inout) :: self character(len=*), intent(in) :: dname real(kind=real64), intent(in) :: value (:,:,:,:,:,:,:) integer, intent(in), optional :: chunk_size (:)","tags":"","loc":"module/write_real64.html"}]}